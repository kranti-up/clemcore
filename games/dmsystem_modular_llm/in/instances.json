{"experiments": [{"name": "attraction", "game_instances": [{"game_id": 0, "data": {"n_turns": 8, "similarity": {"threshold": 70}, "liberal_processing": true, "statusmsg": {"welcome": "Welcome to the $domain booking bot. Let me know, how can I help you?", "usergoal": "SaveGoal:\nBegin your interaction with the bot by exactly stating the below mentioned goal:\nGoal:\n$goal\n\nFollow-up with the bot to achieve the goal.", "dmresponse": "$response", "no_booking": "The game has started. You are the first player.", "no_slots": "The game has ended. Thank you for playing.", "no_domain": "domain info is not available", "no_key_match": "none of the keys are matched", "partial_key_match": "only some of the keys are matched", "no_value_match": "keys are matched but none of the values are matched", "partial_value_match": "for some keys, values are matched", "unknown": "unknown error", "success": "Success", "failure": "Failure", "dbfetch": "in fetching the data from the database.", "validatebooking": "in booking", "availablecolumns": "The available columns are: $columns", "missing_slots": "The missing arguments are: $slots", "invalid_value": "The value for $slot is invalid", "booking_reference": "Your booking reference number is 123456.", "nocolumnmatch": "No matching columns found in the database.", "novaluematch": "No matching data found in the database for the given query. Possible values: $values"}, "domain": "attraction", "domaindb_path": "games/dmsystem_monolithic_llm/resources/domains/en/attraction-dbase.db", "domain_schema": {"attraction": {"service_name": "attraction", "slots": [{"name": "area", "is_categorical": true, "possible_values": ["centre", "east", "north", "south", "west"]}, {"name": "name", "is_categorical": false, "possible_values": []}, {"name": "type", "is_categorical": true, "possible_values": ["architecture", "boat", "cinema", "college", "concerthall", "entertainment", "museum", "multiple sports", "nightclub", "park", "swimmingpool", "theatre"]}, {"name": "entrancefee", "is_categorical": false, "possible_values": []}, {"name": "openhours", "is_categorical": false, "possible_values": []}, {"name": "address", "is_categorical": false, "possible_values": []}, {"name": "phone", "is_categorical": false, "possible_values": []}, {"name": "postcode", "is_categorical": false, "possible_values": []}], "description": "find touristy stuff to do around you", "intents": [{"name": "find_attraction", "description": "search for places to see for leisure", "is_transactional": false, "required_slots": [], "optional_slots": {"attraction-area": "dontcare", "attraction-name": "dontcare", "attraction-type": "dontcare"}}]}}, "goal": "I want to tour a college in the centre of town. What's available?", "slots": {"area": "centre", "name": "christ college christ's college", "type": "college"}, "cat_slots": ["area", "type"], "noncat_slots": ["name", "entrancefee", "openhours", "address", "phone", "postcode"], "game_name": "dmsystem_modular_llm", "prompt_a": "ROLE: You are a system tasked with interacting naturally with a attraction booking system.\n\nTASK:\nI want to tour a college in the centre of town. What's available?\n\nINSTRUCTIONS:\n1. Begin the conversation by repeating the task exactly as written under the label TASK. Do not add any other text, commentary, or explanations.\n2. Communicate naturally by expressing preferences, asking clarifying questions, and making decisions as needed during the interaction. Ensure the tone is polite and conversational.\n3. Respond strictly based on the 'response' provided by the booking system. Use no additional logic or interpretation beyond what is explicitly stated in the task.\n4. Once the booking system completes the task and provides all necessary slots, respond with \"DONE.\" No other text should follow.\n5. Do not attempt to simulate or act as the booking system; you are only interacting with it.\n6. Keep responses concise and focused, avoiding unnecessary elaboration or overly conversational tone.\n7. Use the following information to provide information during the conversation:\n{'area': 'centre', 'name': \"christ college christ's college\", 'type': 'college'}\n\nOUTPUT FORMAT:\n1. When beginning: Repeat the TASK exactly as stated.\n2. When interacting: Provide appropriate conversational utterances based solely on the booking system's 'response.'\n3. When finished: Respond with \"DONE\"\n\n\nLets begin\n", "turn_prompt_a": "1. Continue interacting until the task is complete.\n2. Once the task is complete, respond with \"DONE\".\n3. Do not simulate or act as the booking system; you are only interacting with it.\n4. Use the following information to provide information during the conversation:\n{'area': 'centre', 'name': \"christ college christ's college\", 'type': 'college'}\n\nHere is the attraction booking system response:", "prompt_b": "ROLE: You are the dialogue manager for a attraction booking bot. Your role is to process user requests, coordinate interactions with subsystems, and ensure successful task completion.\n\nAVAILABLE SUBSYSTEMS:\n1. Intent Detector: Identifies the user's intent (e.g., inquiry, clarification, or booking).\n2. Slot Extractor: Extracts key details needed for the task (e.g., date, time, location).\n3. Follow-up Generator: Generates responses to gather missing/unclear information or provide booking status.\n4. Booking Aggregator: Consolidates all extracted and clarified details for booking finalization.\n\nSUBSYSTEM NAMING CONVENTIONS:\nFor all sub-system interactions, use these exact names:\n   {\n      Intent Detector = \"intent_detector\"\n      Slot Extractor = \"slot_extractor\"\n      Follow-up Generator = \"followup_generator\"\n      Booking Aggregator = \"booking_aggregator\"\n   }\n\n\nTASK FLOWS:\n1. Information/Query Flow:\n   - Use subsystems 1-3 when the user is:\n     * Asking for information\n     * Making inquiries\n     * Providing partial information\n     * Needs clarification or follow-up questions\n\n2. Booking Flow:\n   - Use subsystem 4 for gathering and consolidating booking information\n     * All required booking information is available\n     * User's intent is clearly to make a booking\n     * Previous clarifications or follow-ups have been resolved\n     * Return to subsystem 4 based on booking confirmation outcome\n\nTASK:\n1. For each user request:\n   a. Determine appropriate flow based on user intent and available information\n   b. Identify next required subsystem\n   c. Prepare the necessary input data for that subsystem\n2. \"db-query\" and \"validate-booking\" are the external systems. Do not treat them as sub-systems.\n\nINTERMEDIATE RESPONSE FORMAT:\nDuring task progression, when calling the next subsystem:\n{\n   \"next_subsystem\": \"SUBSYSTEM_NAME\",\n   \"input_data\": {\n      \"field_1\": \"value_1\",\n      \"field_2\": \"value_2\"\n      // Include all relevant data for the chosen subsystem\n   }\n}\n\nFINAL RESPONSE FORMAT:\n1. For proceeding with the booking:\n{\n   \"status\": \"validate-booking\",\n   \"details\": {FILLED SLOTS}\n}\n\n2. For follow-up (The FOLLOW-UP MESSAGE must be a concise string.):\n{\n   \"status\": \"follow-up\",\n   \"details\": FOLLOW-UP MESSAGE\n}\n\n3. For querying the database:\n{\n   \"status\": \"db-query\",\n   \"details\": {FILLED SLOTS}\n}\n\nNOTES:\n1. Always use the exact subsystem names as specified.\n2. Ensure seamless coordination between subsystems to achieve task completion.\n\n\nUSER REQUEST:", "turn_prompt_b": "TASK:\n1. Review the previous state and new user input\n2. Update the conversation flow if necessary\n3. Identify missing or unclear information\n4. Select the next appropriate subsystem based on:\n   * Current flow status\n   * Completeness of required information\n   * Previous subsystem results\n   * User's latest input\n\nFINAL RESPONSE FORMAT(upon task completion):\n1. For proceeding with the booking:\n{\n   \"status\": \"validate-booking\",\n   \"details\": {FILLED SLOTS}\n}\n\n2. For follow-up (The FOLLOW-UP MESSAGE must be a concise string.):\n{\n   \"status\": \"follow-up\",\n   \"details\": FOLLOW-UP MESSAGE\n}\n\n3. For querying the database:\n{\n   \"status\": \"db-query\",\n   \"details\": {FILLED SLOTS}\n}\n\nUSER REQUEST:", "dbquery_prompt_b": "TASK:\n1. Review the previous state and new user input\n2. Update the conversation flow if necessary\n3. Identify missing or unclear information\n4. Select the next appropriate subsystem based on:\n   * Current flow status\n   * Completeness of required information\n   * Previous subsystem results\n   * User's latest input\n\nRESPONSE FORMAT:\n1. For proceeding with the booking:\n{\n   \"status\": \"validate-booking\",\n   \"details\": {FILLED SLOTS}\n}\n\n2. For follow-up (The FOLLOW-UP MESSAGE must be a concise string.):\n{\n   \"status\": \"follow-up\",\n   \"details\": FOLLOW-UP MESSAGE\n}\n\n3. For querying database:\n{\n   \"status\": \"db-query\",\n   \"details\": {FILLED SLOTS}\n}\n\nDATABASE RETRIEVAL RESULTS:", "validbooking_prompt_b": "TASK:\n1. Review the previous state and new user input\n2. Update the conversation flow if necessary\n3. Identify missing or unclear information\n4. Select the next appropriate subsystem based on:\n   * Current flow status\n   * Completeness of required information\n   * Previous subsystem results\n   * User's latest input\n\nRESPONSE FORMAT:\n1. For proceeding with the booking:\n{\n   \"status\": \"validate-booking\",\n   \"details\": {FILLED SLOTS}\n}\n\n2. For follow-up (The FOLLOW-UP MESSAGE must be a concise string.):\n{\n   \"status\": \"follow-up\",\n   \"details\": FOLLOW-UP MESSAGE\n}\n\n3. For querying the database:\n{\n   \"status\": \"db-query\",\n   \"details\": {FILLED SLOTS}\n}\n\nBOOKING VALIDATION STATUS:", "turn_ss_prompt_b": "Response received from the $sub-system sub-system:", "intent_detection": "ROLE: You are an Intent Detection system designed to classify user requests into predefined intents.\n\nTASK:\n1. Analyze the provided user request.\n2. Classify the request into one of the predefined intents (e.g., \"restaurant-booking,\" \"order-status,\" \"cancellation\").\n3. Return the detected intent as a concise response.\n4. Do not add any other information.\n\nRESPONSE FORMAT:\n{\n    \"intent_detection\": \"DETECTED_INTENT\"\n}\n\nUSER REQUEST:", "slot_extraction": "ROLE: You are an Slot Extraction system designed to identify and extract key entities from user requests to support downstream tasks.\n\nTASK:\n1. Analyze the provided user request.\n2. Identify and extract relevant slots (e.g., location, time, date, type of cuisine, number of people) based on the task context.\n3. Return the extracted slots in a structured format.\n4. Do not add any other information.\n5. Use the following slot names to extract relevant information:\n['area', 'name', 'type']\n\nRESPONSE FORMAT:\n{\n    \"slot_extraction\": {\n        \"slot1\": \"value1\",\n        \"slot2\": \"value2\",\n        ...\n    }\n}\n\nUSER REQUEST:", "followup_generation": "ROLE: You are a Follow-up Generation system responsible for crafting contextually appropriate and concise replies based strictly on the provided input.\n\nTASK:\nGiven the input data (intent, extracted slots, database (DB) information, and additional context):\n1. Generate a meaningful follow-up:\n   a. If additional information is required to proceed, respond conversationally using direct and focused phrasing.\n   b. If recommendations are provided in the DB:\n      * Ask the user to choose from the list of options.\n      * Clearly present all options to the user for selection. Do not decide on any recommendation yourself.\n\n2. Ensure Slot Completion:\n['area', 'name', 'type']\n   a. In the course of the conversation, ensure that all required slots are captured or addressed.\n   b. If any slots are missing, generate a follow-up question to collect the necessary information.\n   c. No need to query information other than the required slots\n\n3. Guidelines for Response:\n   a. Responses must be concise and to the point.\n   b. Avoid unnecessary elaboration or an overly conversational tone.\n   c. Do not generate or fabricate any information that is not explicitly present in the DB or provided input.\n\n\nRESPONSE FORMAT:\n{\n    \"followup_generation\": GENERATED_RESPONSE\n}\n\nINPUT:", "booking_aggregator": "ROLE: You are a Booking Aggregator system responsible for crafting contextually appropriate and concise replies to user requests based on intent and extracted entities.\n\nTASK:\n1. Consolidate all provided booking information.\n2. Format data for booking confirmation.\n3. Do not add any other information.\n4. Use the following slot names to extract relevant information:\n['area', 'name', 'type']\n\nRESPONSE FORMAT:\n{\n    \"slots\": {\n        // Consolidated booking information\n    }\n}\n\nINPUT:"}}]}]}