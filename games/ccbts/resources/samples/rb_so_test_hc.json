{
    "regular": {
        "simple": {
            "2": {
                "bw": [
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th column with bw objects. The bridge is red and the washer is yellow.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Only use bw objects with a red vertical bridge and a blue washer. Fill the first, 4th, and 7th row with bw objects.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bw object with a green washer and a red bridge in the top left corner. Add another bw object in the same colors in the same row, column 5. Place a third bw objects in the same colors in the 5th row, 1st column. The last bw object in the same colors is in the same row, in column 5.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bn": [
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th and 7th column with bn objects. The nut is green and the horizontal bridge is yellow.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 bn objects with a blue bridge and a green nut in the first row. Fill the 4th and 7th row with bn objects in the same colors as well.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bn object in the 5th row, 5th column. The nut is green and the bridge is yellow. Add one more object of the same type and color 4 squares to the left of the first object and another one 4 squares above the first object. Put the fourth bn object in the same colors in the top left corner.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ns": [
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a ns object with a green screw and a yellow nut in each row of column 1, 4, and 7.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th row with ns objects. The nut is always red, and the screw is blue.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['blue', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with eight ns objects. The nut is blue and the screw is yellow.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['red', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a ns object with a red nut and a yellow screw in the top left corner. Add another ns object in the same colors in the top right corner. Place two ns objects in the same colors in the two bottom corners as well.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wn": [
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three wn objects with a red nut and a green washer in the first row, in columns 1, 4 and 7. Repeat the first step for all other rows.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th row with wn objects that include a yellow nut and a blue washer.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['green', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 wn objects on the diagonal from the top left corner to the bottom right corner. The nut is yellow and the washer is green.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['yellow', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place one wn object in each corner of the board. Each object has a yellow washer and a green nut.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bs": [
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 bs objects in the first column. The bridge is yellow, and the screw is red. Fill the 4th and 7th column with bs objects in the same colors as well.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first row with bs objects with a green vertical bridge and a red screw. Place 8 bs objects in the same color in the 4th row. Continue the pattern for the 7th row.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ws": [
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place eight ws objects in the first column, one in each row. The washer is green and the screw is red. Repeat the pattern for column 4 and 7.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place eight ws objects in the first row. The washer is yellow and the screw is green. Put eight more ws objects in the same colors in the 4th row, in all columns. Fill the 7th row with ws objects in the same colors as well.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['red', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place eight ws objects on the diagonal from the top left corner to the bottom right corner. Each ws object has a green screw and a red washer.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['yellow', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a ws object in each corner of the board. Each object has a green screw and a yellow washer.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nw": [
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th column with nw objects of a red washer and a yellow nut.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place one nw object in each column in the first, 4th, and 7th row. The washer is red, and the nut is green.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['blue', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with nw objects. The nut is blue and the washer is yellow for each object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['red', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a nw object in each corner. The washer is green and the nut is red.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nw objects in the first row, in the first and fifth column. The washer is red and the nut is green. Put two more objects of the same type and color in the fifth row, in the same two columns as before.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "3": {
                "nws": [
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three nws objects in the first row, in column 1, 4 and 7. The nut is red, the washer is blue, and the screw is green. Repeat the first step for all other rows.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position 8 nws objects in the first row. The nut is red, the washer is yellow, and the screw is blue. Repeat the process for the 4th and 7th row.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a nws object in each corner of the square from the top left corner to the corner in row 5, column 5. Each nws object has a blue nut, a yellow washer, and a green screw.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnb": [
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th column with wnb objects. The bridge is blue, the washer is green, and the nut is yellow.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 wnb objects in the first row. The bridge is red, the washer is green, and the nut is blue. Add 8 more wnb objects in the same colors in the 4th column. Fill the 7th row with wnb objects in the same colors as well.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four wnb objects on the board. The washer on the left side is red, the nut is yellow, and the horizontal bridge is green. The washers form the corner points of a square. Put two of the objects in the first row, in column 1 and 5. Add another two wnb objects in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwb": [
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 wwb objects in the first column, one in each row. The bridge is red, the left washer is yellow, and the other washer is green. Fill the 4th column with wwb objects in the same colors as well. Repeat step 2 for the 7th column as well.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place eight wwb objects in the first row, one in each column. The bridge is green, the upper washer is blue, and the other washer is red. Position 8 more wwb objects in both the 4th and the 7th row. The objects have the same color as in step 1.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Add four wwb objects on the board, with a green bridge, a red washer on the left and a blue washer on the right. The first two objects are placed in the first row, in the 1st and 5th column, the other two are positioned in the fifth row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wns": [
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wns object in each row, in column 1, 4 and 7. The washer is yellow, the nut is blue, and the screw is green.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th row with wns objects. The nut is green, and the other two parts are red.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place wns objects in the first row, in column 1 and 5. The screw is red and the other two parts are blue. Add two more wns objects in the same colors in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwb": [
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'green'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th column with nwb objects. The red nut is on the left side, the green bridge is horizontal, and the blue washer is on the right side.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th and 7th row with nwb objects. The objects have a yellow bridge, a blue nut, and a green washer.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nwb objects in the first row, in column 1 and 5. The vertical bridge is yellow, the nut and the washer are green. Add two more nwb objects in the same colors in the 5th row, in the same two columns.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bws": [
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'blue'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bws object in each row for column 1, 4 and 7. The screw is blue, the washer is red, and the horizontal bridge is green.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'yellow'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th row with bws objects composed of a yellow screw, a blue washer, and a green vertical bridge.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bws object in the top left corner. The bridge is yellow, the washer is green and the screw is red. Add another bws object in the same color in the same row, in column 5. Place two more bws objects in the same colors in the 5th row, in column 1 and 5.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bns": [
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 bns objects each in column 1, 4, and 7. The bridge is yellow, the nut is blue, and the screw is green.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th and 7th row with bns objects with a yellow bridge, a blue nut, and a green screw. In each of the three rows there are 8 bns objects.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'blue'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bns objects in the first row, in column 1 and in column 5. The screw and the bridge are blue, while the nut is green. Position two more bns objects with parts in the same colors in the 5th row, in the same columns as before.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwn": [
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'green'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position three bwn objects in the first row, in column 1, 4 and 7. The washer is red, the horizontal bridge is blue, and the nut is green. Repeat this pattern for all other rows.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'blue'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th row with bwn objects. The vertical bridge is yellow, the nut is blue, and the washer is red.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bwn objects on the board. The nut is red, the bridge is green, and the washer is blue. Position the first bwn object in the top left corner. Add another one in row 5, column 5. Place two more bwn objects so that the four red nuts form the corner points of a square.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnb": [
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'green'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three nnb object in the first row, in column 1, 4 and 7. The bridge is green and the nuts are red. Repeat the pattern for all rows.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th row with nnb objects. The upper nut is yellow, the one below is red, and the vertical bridge is blue.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two nnb objects in the 1st and two nnb objects in the 5th row. The two objects on the left side are in column 1, while the other two are in column 5. The four objects form the corner points of a square. They include a yellow bridge, a red nut in the upper half, and a blue nut in the lower half.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnw": [
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 bnw objects in the first column, one in each row. The bridge is blue, the nut is yellow, and the washer is red. Fill the 4th column with bnw objects in the same colors. Add 8 more bnw objects in the same colors in the 7th column.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'green'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 bnw objects in the 7th row. The bridge is red, the washer is green, and the nut is yellow. Fill the 4th and 1st row with bnw objects in the same colors as well.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bnw objects in the first row, in column 1 and 5. The nut is green, the other two parts are red. Put two more bnw objects of the same color in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnb": [
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bnb objects in the first row, in the first and 5th column. The vertical bridge is blue and the other two parts of the bnb object are red. Put two more bnb objects in the same colors in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbb": [
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wbb object in the top left corner. The yellow washer is on the left side with a green horizontal bridge on top. The other bridge is red. Put another wbb objects in the same colors in the same row, column 5. Add two more wbb objects in the same colors in the 5th row, in the same two columns as before.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwb": [
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bwb objects with a blue horizontal bridge, and a green vertical bridge and washer on the board. The first two are positioned in the first row, in the 1st and 5th column. The other two are placed in the same two columns, in row 5.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbb": [
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place one bbb object in the top left corner. The upper horizontal bridge is green, the other one is red. The vertical bridge is blue. Put another bbb object in the same colors in the 5th row, 1st column. Position a third bbb object in the same colors in the first row, 5th column. Place another bbb object in the same colors in the 5th row, 5th column.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbb": [
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a nbb object in the top left corner. The nut is red and the horizontal bridge on top is green. The vertical bridge is blue. Place another nbb object in the same colors in the same row, in column 5. Add two more nbb objects in the same colors in row 5, in the same two columns as the first two objects.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "4": {
                "wnbs": [
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position one wnbs object in each row for the columns 1, 4, and 7. The horizontal bridge is blue, the nut is green, and the screw and the washer are yellow.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red', 'blue'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "All wnbs objects have a green nut, a red bridge, and a blue washer and blue screw. Place 8 wnbs objects in the first row. Fill the 4th row with wnbs objects as well. Put wnbs objects in row 7, one in each column.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wnbs object in the top left corner. The washer is green, the nut is gred, the screw is green, and the bridge is yellow. Add another wnbs object in the same colors in the same row, in column 5. Place a wnbs object in the same colors in the 5th row, in the 1st column. Add a last wnbs object in the same colors in the 5th row, 5th column, so that the four objects form a square.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbw": [
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a nnbw object in the 1st, 4th and 7th column in row 1. The left nut is yellow, the right nut and the washer are red, and the bridge is blue. Repeat the first step for all rows.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'green', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th row with nnbw objects. The bridge is green, the washer is yellow, and the two nuts are red.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'green'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two nnbw objects in the first row, in the first and fifth column. The washer and the lower nut are green, the other nut is blue, and the bridge is red. Place two other nnbw objects in the same colors in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbs": [
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'green', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with nnbs objects with a green bridge, two red washers and a red screw. Place 8 more nnbs objects in the same colors in the 4th column. Position a nnbs object in the same colors in each row, in column 7 as well.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, fourth, and 7th row with nnbs objects. The nuts are red, the bridge is yellow, and the screw is red as well.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "There are four nnbs objects on the board that form a square. They are placed in the top left corner, in row 1, column 5, in row 5, column 1, and in row 5, column 5. The left square is always yellow, the right one is green, the bridge is red, and the screw is yellow.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwns": [
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th column with bwns objects. The bridge is yellow, the nut is red, the washer is green, and the screw is blue.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'yellow', 'red'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place eight bwns objects in the first row. The bridge is green, the washer and the screw are red, and the nut is yellow. Repeat step 1 for the rows 4 and 7.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'green'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put two bwns objects in the 5th row, in the 1st and 5th column. The screw and the washer are green, the nut is blue, and the bridge is red. Add two more bwns objects in the first row, in the same columns. The colors of the objects are the same as before.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbn": [
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'green', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three wnbn objects in the first row. The first one is positioned in the first column, the next one in the 4th column, and the third one in the 7th column. The left nut is always blue, the right nut is yellow, the washer is red and the bridge is green. Repeat the first step for all other rows.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th row with wnbn objects. The upper nut is green, the lower one is blue. The bridge is red, and the washer is yellow.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbs": [
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'red', 'blue'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wwbs object in each row, in column 1, 4 and 7. The screw is blue, the bridge is red, the left washer is green, and the right washer is yellow.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'green', 'blue'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 wwbs objects in the first row. The washers are red, the bride is green, and the screw is blue. Repeat the pattern for the 4th and 7th row.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'blue'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put two wwbs objects in the first row, in column 1 and 5. The bridge is yellow, the screw is blue, the left washer is red, and the right washer is green. Add to more objects of the same type and color in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbn": [
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th column with wwbn objects. The nut and the washer on the left are yellow, the bridge is red, and the other washer is green.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue', 'yellow'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first row with wwbn objects. The nut is yellow, the upper washer is red, the washer below is green, and the bridge is blue. Fill the 4th and 7th row with objects of the same type and color as well.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnws": [
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with bnws objects. The nut and the screw are yellow, the washer is green, and the bridge is blue. Place eight more bnws objects in the same colors in the 4th column. Finally, fill the 7th row with bnws objects in the same colors as well.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['red', 'green', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['red', 'green', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue', 'green'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['red', 'green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['red', 'green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, fourth, and seventh row with bnws objects with a red bridge, a green nut and screw, and a blue washer.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['red', 'green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['red', 'green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'blue', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bnws objects in the 5th row, in column 1 and 5. The bridge and the washer are blue, while the screw and the nut are yellow. Add two more bnws objects in the first row, in the same columns as the other two objects. The colors are the same as before.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbw": [
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'yellow', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th column with nwbw objects. The washers are red, the bridge is yellow, and the nut is green.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'green', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th row with nwbw objects. The nwbw objects include a yellow washer on top and another washer in blue, a red nut, and a green vertical bridge.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbs": [
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'green', 'red'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three nwbs objects in the first row, in the 1st, 4th, and 7th column. The nut and the washer are yellow, the screw is red, and the bridge is green. Repeat the pattern for all other rows.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'red', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the firsth, fourth, and seventh row with nwbs objects. The vertical bridge is red, the other parts are green.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two nwbs objects in the first row, in the first and 4th column. The nut is blue, the bridge is red, the screw is green, and the washer is yellow. Place two more objects of the same type and color in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbn": [
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue', 'yellow'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th column with nwbn objects. Each of the three columns contains 8 objects. The nwbn objects include a green washer, two yellow nuts, and a blue horizontal bridge.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'yellow', 'blue'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, and 7th row with nwbn objects with a green washer, a green upper nut, and yellow bridge with a blue nut stacked on top.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nwbn objects in the first row, in the first and 5th column. Add two more in the fifth row, in the same two columns. All nwbn objects include a red nut in the upper half, and a green nut in the lower half, as well as a blue bridge, and a green washer.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbw": [
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'blue', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three wnbw objects in each row, in column 1, 4 and 7. The bridge is blue, the left washer is red, the right washer is yellow, and the nut is green.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'yellow', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first row with wnbw objects with a yellow bridge, a red nut and a red washer in the lower half, and a green washer in the upper half. Repeat step 1 for the 4th and 7th row.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four wnbw objects on the board. The left washer is yellow, the right washer is green, the nut is blue, and the bridge is red. The first object is placed in the top left corner, another one in the same row, in column 5. The two other objects are positioned in the 5th row, in the 1st and 5th column as well.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbs": [
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "This board contains 4 bwbs objects and they all have a green vertical bridge, a blue horizontal bridge, a red washer, and a blue screw. Place the first bwbs object in the top left corner and add another one in the same row, in column 5. Position two more bwbs objects in the 5th row, in column 1 and 5.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbs": [
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow', 'red'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bnbs object in the top left corner. The vertical bridge and the nut are green, the horizontal bridge is yellow, and the screw is red. Put another bnbs object in the same colors in the 5th row, 1st column. Add two more bnbs objects in the same colors in the same two rows, in column 5.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbb": [
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'green', 'green'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'green', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'green'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'green', 'green'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'green', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bbbb objects in the first row, in the 1st and 5th column. The horizontal bridges are blue, the vertical ones are green. Put two more bbbb objects in the 5th row, in the same columns. The horizontal bridges are blue as well, and the vertical bridges are green too.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'green', 'green'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'green', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbs": [
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'red'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two bbbs objects in the first row, in the first and fifth column. The vertical bridges are blue, the horizontal bridge is green, and the screw is red. Repeat the same pattern by placing two of the objects in the fifth row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbn": [
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put two wbbn objects in the first row, in the first and fifth column. The left bridge is green, the right one is red, and the washer and nut are yellow. Position two more wbbn objects in the 5th row, in the same colors. Their parts are colored in the same way as the other two objects.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbw": [
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'yellow'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two nbbw objects in the first row, in the 1st and 5th column. The nut is green, the vertical bridge is red, the horizontal bridge is blue, and the washer is yellow. Place two more nbbw objects in the same colors in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbw": [
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'green'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a bbbw object in the top left corner. The right bridge and the vertical bridge are blue, the left horizontal bridge is red, and the washer is green. Add another bbbw object in the same row, in column 5. The object colors are the same as before. Position two more bbbw objects in the same colors in the 5th row, in the 1st and 5th column.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbs": [
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'yellow'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two wbbs objects in the first row, in the 1st and 5th column. The washer is green, the horizontal bridge is blue, and the screw and vertical bridge are yellow. Position two more wbbs objects in the same colors in the 5th row, in the 1st and 5th column.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbn": [
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'green'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bnbn objects with a blue horizontal bridge, two green nuts and a green vertical bridge on the board. The first one is positioned in the top left corner and another one 4 squares to the right of it. Two more are added in the 5th row, in the first and 5th column as well.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbs": [
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put two nbbs objects in the 5th row, in the 1st and 5th column. The screw and the nut are yellow, the top bridge is blue, and the bottom bridge is red. Add two more nbbs objects in the first row, in the same columns. The colors of the objects are the same as before.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbn": [
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bwbn objects on the board. The vertical bridge is blue, the horizontal bridge is red, the nut is blue and the washer is red. Put one of the objects in the top left corner, the next one in the same row, 5th column. Add another bwbn object in the 5th row, 5th column. Place the last bwbn object in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbw": [
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bnbw object in the top left corner. The vertical bridge with the red washer stacked on top is green, the nut is blue, and the horizontal bridge is yellow. Add three other bnbw objects in the same colors in  row 1, column 5, and in row 5, column 1, and in row 5, column 5.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbw": [
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'green'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wbbw object in the 5th row, 5th column. The vertical bridge is blue, the horizontal one is red, and the two washers are green. Put another wbbw object in the same colors four squares above the other object. Position another wbbw object in the same colors 4 squares to the left of the first object. Place the last wbbw object in the same colors in the top left corner.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbw": [
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'yellow'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bwbw objects on the board, two in the first row and two in the 5th row, in column 1 and 5 for both rows. The horizontal bridge is red, the other parts of the bwbw object are yellow.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbn": [
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'green'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bbbn objects on the board. One is in the top left corner, another one in the same row, in column 5. Place two more bbbn objects in the 5th row, in column 1 and 5. All four objects have a green nut, a red vertical bridge, a green horizontal bridge in the upper half and a blue horizontal bridge below.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "5": {
                "bwbws": [
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'blue', 'red'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two bwbws objects in the first row, in column 1 and 5. The upper washer is blue, the vertical bridge is green, and the other three parts of the bwbws object are red. Place two more bwbws objects of the same color in the 5th row, in the same columns as the two other objects.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbns": [
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'red', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'red', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'green', 'blue'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'red', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'red', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bbbns objects in the first row, in column 1 and 5. The horizontal bridge is green, the upper vertical bridge is yellow and the vertical bridge below is red. The nut is green and the screw is blue. Add two more bbbns objects in the same colors in the 5th row, in the same two columns.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'red', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'red', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbwn": [
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'blue', 'yellow'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position one bwbwn object in the top left corner. The upper washer is blue, the one below is red. The vertical bridge is green, and the nut and the horizontal bridge are yellow. Place another bwbwn object in the same row, in the 5th column. The colors are the same as before. Put two more bwbwn objects in the same colors in the 5th row, in the same two column as the two other objects.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbws": [
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'green', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'green', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'red', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'green', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'green', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a nnbws object in the top left corner. The left nut is red, the right one is green, the bridge is blue, the washer is red, and the screw is yellow. Put another nnbws object in the same colors 4 squares diagonally to the right of the first object. Place another nnbws object 4 steps below the top left corner. The colors are the same. Position the last nnbws object in the same colors 4 steps to the right of the top left corner.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'green', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'green', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue', 'yellow', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th and 7th column with 8 nnbws objects each. The bridge and the screw are blue, the washer is yellow, and the nuts are green.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbns": [
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'red', 'blue'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wnbns object in the top left corner and one in the same row, in the 5th column. Add two more wnbns objects in the 5th row, in the same two columns. All wnbns objects have a yellow nut under a green bridge, a red washer, and a red nut with a blue screw on top.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'green', 'yellow', 'blue'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 8 wnbns objects in the first column. The washer is red, the nuts are yellow, the screw is blue, and the bridge is green. Add 8 more objects of the same type and color in the 4th column. Finally, fill the 7th column with the same object as well.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbns": [
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'blue', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two wwbns objects in the first row, in column 1 and 5. The washer on top is red, the other washer is blue. The screw and the bridge are green, and the nut is blue. Add two more wwbns objects in the 5th row, in the same columns. They have the same colour as the other two objects.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'red', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'red', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue', 'red', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'red', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'red', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 4th, 7th column with wwbns objects with a blue horizontal bridge, red washers, a green screw, and a red nut.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'red', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'red', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbws": [
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'red', 'blue'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a nbbws object in the top left corner. The screw and the bottom bridge are blue, the other bridge is yellow, the washer is red, and the nut is green. Put another object of the same type and color in the same row, in column 5. Place two more nbbws objects in the same colors in the 5th row, in the 1st and 5th column.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbns": [
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'red', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'red', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'yellow', 'blue'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'red', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'red', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "There are four bwbns objects on the board. The vertical bridge is green, the horizontal bridge and the washer are red, the nut is yellow, and the screw is blue. Place two of them in the first row, in column 1 and 5, and two more in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'red', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'red', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbnw": [
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'yellow', 'blue'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bwbnw objects on the board. They have a green vertical bridge, a red horizontal bridge, two blue washers, and a yellow nut. One is placed in the top left corner. The next object is positioned 4 squares to the right of the first bwbnw object. Another object is placed 4 squares below the first object and the last object is in row 5, column 5.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbws": [
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'red', 'blue'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nwbws objects in the 1st row, 1st and 5th column. The objects include red washers, a blue screw, a green nut, and a yellow bridge. Position two more nwbws objects in the same colors in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'red', 'yellow', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, fourth, and seventh column with nwbws objects. The nut is green, the washers are yellow, and the screw and the horizontal bridge are red.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbws": [
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'blue', 'red'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bnbws objects in the first row, in the 1st and 5th column. Add two more bnbws objects in the 5th row, the 1st and 5th column as well. All objects contain a red nut, horizontal bridge and screw, a blue washer and a yellow vertical bridge.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbws": [
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'red', 'green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'red', 'green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'red', 'blue'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'red', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'red', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bbbws object in the top left corner. The screw is blue, the washer is red, the vertical bridge is yellow, the right horizontal bridge is red, and the left horizontal bridge is green. Place another bbbws object in the same colors in the 5th row, in the same column. Position two more bbbws objects in the same colors in the 1st and 5th row, both in the 5th column.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'red', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'red', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbwn": [
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'green', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'green', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'blue', 'green'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'green', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'green', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bnbwn objects in the first row, in column 1 and 5. The nuts are green, the vertical bridge is yellow, the horizontal bridge and the washer are blue. Add two more objects of the same type and color in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'green', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'green', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbwn": [
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'red', 'green'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bbbwn object in the top left corner. The nut is green, the washer is red, and the vertical bridge directly under the washer is green. The other vertical bridge and the horizontal bridge are blue. Put another bbbwn objects in the same colors in the 5th row, 1st column. Add two more bbbwn objects in the same colors in the same rows as the two objects before, both in column 5.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbnw": [
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'blue', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'blue', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'red', 'yellow'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'blue', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'blue', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two bnbnw objects in the first row, in the first and 5th column. The vertical bridge and the left nut are red, while the right nut is blue, and the horizontal bridge and the washer are yellow. Place two more objects of the same type and color in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'blue', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'blue', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbns": [
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'red', 'yellow'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two bnbns objects in the first row, in column 1 and 5. Add two more bnbns objects in the 5th row, in the same columns. All bnbns objects have a red nut with a yellow screw stacked on top, another nut in yellow, a blue vertical bridge, and a red horizontal bridge.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbnw": [
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'red', 'yellow'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bbbnw object in the top left corner. The nut is red, the washer is yellow, the horizontal bridge is blue, the left vertical bridge is red, and the right vertical bridge is yellow. Place another bbbnw object of the same color in the same row, in column 5. Add one more bbbnw object in the same colors in the 5th row, in the 1st column. Put a last bbbnw object in the 5th row, 5th column. It has the same colors as the other three objects.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbns": [
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'red', 'yellow'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two wbbns objects with a blue washer, a red nut and vertical bridge, and a yellow screw and horizontal bridge in the first row, in the 1st and 5th column. Position two more wbbns objects in the same colors in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        }
    }
}