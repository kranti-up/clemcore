{
    "simple": {
        "simple": {
            "2": {
                "wn": [
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            7,
                            7
                        ],
                        "y": [
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 7, 3)\nput(board, 'nut', 'blue', 7, 3)",
                                "output": [
                                    "put(board, 'washer', 'red', 7, 3)",
                                    "put(board, 'nut', 'blue', 7, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwn(board, ('red', 'blue'), 7, 3)",
                                "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wn(board, ('red', 'blue'), 7, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=3)\n    put(board, 'nut', 'blue', x=7, y=3)\nboard = init_board(8, 8)\nwn(board, ['red', 'blue'], [7, 7], [3, 3])",
                                "function": "def wn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=3)\n    put(board, 'nut', 'blue', x=7, y=3)",
                                "usage": "wn(board, ['red', 'blue'], [7, 7], [3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wn. Place a red washer in the 8th row, 4th column. Place a blue nut in the 8th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwn(board, ('red', 'blue'), 7, 3)",
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wn(board, ('red', 'blue'), 7, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wn. place a red washer in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wn. Place a red washer in the 8th row, 4th column. Place a blue nut in the 8th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=3)\n    put(board, 'nut', 'blue', x=7, y=3)\nboard = init_board(8, 8)\nwn(board, ['red', 'blue'], [7, 7], [3, 3])",
                                            "function": "def wn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=3)\n    put(board, 'nut', 'blue', x=7, y=3)",
                                            "usage": "wn(board, ['red', 'blue'], [7, 7], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the last row, 4th column. Stack a blue nut on top of it.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwn(board, ('red', 'blue'), 7, 3)",
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wn(board, ('red', 'blue'), 7, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the last row, 4th column. Stack a blue nut on top of it.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=3)\n    put(board, 'nut', 'blue', x=7, y=3)\nboard = init_board(8, 8)\nwn(board, ['red', 'blue'], [7, 7], [3, 3])",
                                            "function": "def wn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=3)\n    put(board, 'nut', 'blue', x=7, y=3)",
                                            "usage": "wn(board, ['red', 'blue'], [7, 7], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'green', 7, 2)\nput(board, 'nut', 'yellow', 7, 2)",
                                "output": [
                                    "put(board, 'washer', 'green', 7, 2)",
                                    "put(board, 'nut', 'yellow', 7, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwn(board, ('green', 'yellow'), 7, 2)",
                                "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wn(board, ('green', 'yellow'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wn(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=2)\n    put(board, 'nut', 'yellow', x=7, y=2)\nboard = init_board(8, 8)\nwn(board, ['green', 'yellow'], [7, 7], [2, 2])",
                                "function": "def wn(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=2)\n    put(board, 'nut', 'yellow', x=7, y=2)",
                                "usage": "wn(board, ['green', 'yellow'], [7, 7], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wn. Place a green washer in the 8th row, 3rd column. Place a yellow nut in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwn(board, ('green', 'yellow'), 7, 2)",
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wn(board, ('green', 'yellow'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wn. place a green washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'green', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 7, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wn. Place a green washer in the 8th row, 3rd column. Place a yellow nut in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=2)\n    put(board, 'nut', 'yellow', x=7, y=2)\nboard = init_board(8, 8)\nwn(board, ['green', 'yellow'], [7, 7], [2, 2])",
                                            "function": "def wn(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=2)\n    put(board, 'nut', 'yellow', x=7, y=2)",
                                            "usage": "wn(board, ['green', 'yellow'], [7, 7], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green washer with a yellow nut stacked on top in the last row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwn(board, ('green', 'yellow'), 7, 2)",
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wn(board, ('green', 'yellow'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green washer with a yellow nut stacked on top in the last row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wn(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=2)\n    put(board, 'nut', 'yellow', x=7, y=2)\nboard = init_board(8, 8)\nwn(board, ['green', 'yellow'], [7, 7], [2, 2])",
                                            "function": "def wn(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=2)\n    put(board, 'nut', 'yellow', x=7, y=2)",
                                            "usage": "wn(board, ['green', 'yellow'], [7, 7], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ws": [
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            6,
                            6
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 2)\nput(board, 'screw', 'blue', 6, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 2)",
                                    "put(board, 'screw', 'blue', 6, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nws(board, ('red', 'blue'), 6, 2)",
                                "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "ws(board, ('red', 'blue'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def ws(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nws(board, ['red', 'blue'], [6, 6], [2, 2])",
                                "function": "def ws(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                "usage": "ws(board, ['red', 'blue'], [6, 6], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ws. Place a red washer in the 7th row, 3rd column. Place a blue screw in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nws(board, ('red', 'blue'), 6, 2)",
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ws(board, ('red', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build ws. place a red washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 6, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ws. Place a red washer in the 7th row, 3rd column. Place a blue screw in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nws(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "function": "def ws(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                            "usage": "ws(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 3rd column. Stack a blue screw on top of it.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nws(board, ('red', 'blue'), 6, 2)",
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ws(board, ('red', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 3rd column. Stack a blue screw on top of it.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nws(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "function": "def ws(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                            "usage": "ws(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5
                        ],
                        "y": [
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'green', 5, 3)\nput(board, 'screw', 'yellow', 5, 3)",
                                "output": [
                                    "put(board, 'washer', 'green', 5, 3)",
                                    "put(board, 'screw', 'yellow', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nws(board, ('green', 'yellow'), 5, 3)",
                                "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "ws(board, ('green', 'yellow'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def ws(board, colors, x, y):\n    put(board, 'washer', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nws(board, ['green', 'yellow'], [5, 5], [3, 3])",
                                "function": "def ws(board, colors, x, y):\n    put(board, 'washer', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                "usage": "ws(board, ['green', 'yellow'], [5, 5], [3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ws. Place a green washer in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nws(board, ('green', 'yellow'), 5, 3)",
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ws(board, ('green', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build ws. place a green washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ws. Place a green washer in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    put(board, 'washer', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nws(board, ['green', 'yellow'], [5, 5], [3, 3])",
                                            "function": "def ws(board, colors, x, y):\n    put(board, 'washer', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "ws(board, ['green', 'yellow'], [5, 5], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green washer in the 6th row, 4th column. Add a yellow screw on top.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nws(board, ('green', 'yellow'), 5, 3)",
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ws(board, ('green', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green washer in the 6th row, 4th column. Add a yellow screw on top.",
                                        "<Editor>": {
                                            "total_code": "def ws(board, colors, x, y):\n    put(board, 'washer', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nws(board, ['green', 'yellow'], [5, 5], [3, 3])",
                                            "function": "def ws(board, colors, x, y):\n    put(board, 'washer', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "ws(board, ['green', 'yellow'], [5, 5], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nw": [
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            4
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 4, 2)\nput(board, 'washer', 'blue', 4, 2)",
                                "output": [
                                    "put(board, 'nut', 'red', 4, 2)",
                                    "put(board, 'washer', 'blue', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnw(board, ('red', 'blue'), 4, 2)",
                                "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nw(board, ('red', 'blue'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nnw(board, ['red', 'blue'], [4, 4], [2, 2])",
                                "function": "def nw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)",
                                "usage": "nw(board, ['red', 'blue'], [4, 4], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nw. Place a red nut in the 5th row, 3rd column. Place a blue washer in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnw(board, ('red', 'blue'), 4, 2)",
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nw(board, ('red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nw. place a red nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nw. Place a red nut in the 5th row, 3rd column. Place a blue washer in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nnw(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "function": "def nw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)",
                                            "usage": "nw(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the 5th row, 3rd column. Stack a blue washer on top",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnw(board, ('red', 'blue'), 4, 2)",
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nw(board, ('red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the 5th row, 3rd column. Stack a blue washer on top",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nnw(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "function": "def nw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)",
                                            "usage": "nw(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'green', 4, 2)\nput(board, 'washer', 'yellow', 4, 2)",
                                "output": [
                                    "put(board, 'nut', 'green', 4, 2)",
                                    "put(board, 'washer', 'yellow', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnw(board, ('green', 'yellow'), 4, 2)",
                                "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nw(board, ('green', 'yellow'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nw(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=2)\n    put(board, 'washer', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nnw(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                "function": "def nw(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=2)\n    put(board, 'washer', 'yellow', x=4, y=2)",
                                "usage": "nw(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nw. Place a green nut in the 5th row, 3rd column. Place a yellow washer in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnw(board, ('green', 'yellow'), 4, 2)",
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nw(board, ('green', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nw. place a green nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'green', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nw. Place a green nut in the 5th row, 3rd column. Place a yellow washer in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=2)\n    put(board, 'washer', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nnw(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "function": "def nw(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=2)\n    put(board, 'washer', 'yellow', x=4, y=2)",
                                            "usage": "nw(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green nut with a yellow washer stacked on top in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnw(board, ('green', 'yellow'), 4, 2)",
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nw(board, ('green', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green nut with a yellow washer stacked on top in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nw(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=2)\n    put(board, 'washer', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nnw(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "function": "def nw(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=2)\n    put(board, 'washer', 'yellow', x=4, y=2)",
                                            "usage": "nw(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ns": [
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4
                        ],
                        "y": [
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'green', 4, 3)\nput(board, 'screw', 'yellow', 4, 3)",
                                "output": [
                                    "put(board, 'nut', 'green', 4, 3)",
                                    "put(board, 'screw', 'yellow', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nns(board, ('green', 'yellow'), 4, 3)",
                                "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "ns(board, ('green', 'yellow'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def ns(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nns(board, ['green', 'yellow'], [4, 4], [3, 3])",
                                "function": "def ns(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)",
                                "usage": "ns(board, ['green', 'yellow'], [4, 4], [3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ns. Place a green nut in the 5th row, 4th column. Place a yellow screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nns(board, ('green', 'yellow'), 4, 3)",
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ns(board, ('green', 'yellow'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build ns. place a green nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'green', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ns. Place a green nut in the 5th row, 4th column. Place a yellow screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nns(board, ['green', 'yellow'], [4, 4], [3, 3])",
                                            "function": "def ns(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)",
                                            "usage": "ns(board, ['green', 'yellow'], [4, 4], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a green nut in the 5th row, 4th column. Stack a yellow screw on top of it.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nns(board, ('green', 'yellow'), 4, 3)",
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ns(board, ('green', 'yellow'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a green nut in the 5th row, 4th column. Stack a yellow screw on top of it.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nns(board, ['green', 'yellow'], [4, 4], [3, 3])",
                                            "function": "def ns(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)",
                                            "usage": "ns(board, ['green', 'yellow'], [4, 4], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            7,
                            7
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 7, 2)\nput(board, 'screw', 'blue', 7, 2)",
                                "output": [
                                    "put(board, 'nut', 'red', 7, 2)",
                                    "put(board, 'screw', 'blue', 7, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nns(board, ('red', 'blue'), 7, 2)",
                                "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "ns(board, ('red', 'blue'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def ns(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nns(board, ['red', 'blue'], [7, 7], [2, 2])",
                                "function": "def ns(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)",
                                "usage": "ns(board, ['red', 'blue'], [7, 7], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ns. Place a red nut in the 8th row, 3rd column. Place a blue screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nns(board, ('red', 'blue'), 7, 2)",
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ns(board, ('red', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build ns. place a red nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 7, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build ns. Place a red nut in the 8th row, 3rd column. Place a blue screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nns(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "function": "def ns(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)",
                                            "usage": "ns(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 3rd column. Stack a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nns(board, ('red', 'blue'), 7, 2)",
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "ns(board, ('red', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 3rd column. Stack a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def ns(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nns(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "function": "def ns(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)",
                                            "usage": "ns(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bw": [
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            7,
                            7
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 7, 2)\nput(board, 'washer', 'blue', 7, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 7, 2)",
                                    "put(board, 'washer', 'blue', 7, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbw(board, ('red', 'blue'), 7, 2)",
                                "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bw(board, ('red', 'blue'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nbw(board, ['red', 'blue'], [7, 7], [2, 2])",
                                "function": "def bw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)",
                                "usage": "bw(board, ['red', 'blue'], [7, 7], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bw. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue washer in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbw(board, ('red', 'blue'), 7, 2)",
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bw(board, ('red', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bw. place a red bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bw. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue washer in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nbw(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "function": "def bw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)",
                                            "usage": "bw(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the last row, 3rd column. Stack a blue washer on top of its left side.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbw(board, ('red', 'blue'), 7, 2)",
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bw(board, ('red', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the last row, 3rd column. Stack a blue washer on top of its left side.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nbw(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "function": "def bw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)",
                                            "usage": "bw(board, ['red', 'blue'], [7, 7], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            6,
                            6
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            "vertical",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 2)\nput(board, 'washer', 'blue', 6, 2)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 2)",
                                    "put(board, 'washer', 'blue', 6, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbw(board, ('red', 'blue'), 6, 2)",
                                "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bw(board, ('red', 'blue'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nbw(board, ['red', 'blue'], [6, 6], [2, 2])",
                                "function": "def bw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=2)",
                                "usage": "bw(board, ['red', 'blue'], [6, 6], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bw. Place a red bridge vertically in the 7th row, 3rd column. Place a blue washer in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbw(board, ('red', 'blue'), 6, 2)",
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bw(board, ('red', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bw. place a red bridge vertically in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bw. Place a red bridge vertically in the 7th row, 3rd column. Place a blue washer in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nbw(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "function": "def bw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=2)",
                                            "usage": "bw(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red vertical bridge in the 7th row, 3rd column. Place a blue washer on top of the upper side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbw(board, ('red', 'blue'), 6, 2)",
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bw(board, ('red', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red vertical bridge in the 7th row, 3rd column. Place a blue washer on top of the upper side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def bw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nbw(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "function": "def bw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=2)",
                                            "usage": "bw(board, ['red', 'blue'], [6, 6], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bn": [
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'green', 4, 2)\nput(board, 'nut', 'yellow', 4, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'green', 4, 2)",
                                    "put(board, 'nut', 'yellow', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbn(board, ('green', 'yellow'), 4, 2)",
                                "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bn(board, ('green', 'yellow'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'green', x=4, y=2)\n    put(board, 'nut', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nbn(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                "function": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'green', x=4, y=2)\n    put(board, 'nut', 'yellow', x=4, y=2)",
                                "usage": "bn(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bn. Place a green bridge horizontally in the 5th row, 3rd column. Place a yellow nut in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbn(board, ('green', 'yellow'), 4, 2)",
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bn(board, ('green', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bn. place a green bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bn. Place a green bridge horizontally in the 5th row, 3rd column. Place a yellow nut in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'green', x=4, y=2)\n    put(board, 'nut', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nbn(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "function": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'green', x=4, y=2)\n    put(board, 'nut', 'yellow', x=4, y=2)",
                                            "usage": "bn(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green horizontal bridge in the 5th row, 3rd column. Stack a yellow nut on top of its left side.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbn(board, ('green', 'yellow'), 4, 2)",
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bn(board, ('green', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green horizontal bridge in the 5th row, 3rd column. Stack a yellow nut on top of its left side.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'green', x=4, y=2)\n    put(board, 'nut', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nbn(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "function": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'green', x=4, y=2)\n    put(board, 'nut', 'yellow', x=4, y=2)",
                                            "usage": "bn(board, ['green', 'yellow'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            4
                        ],
                        "y": [
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 2)\nput(board, 'nut', 'blue', 4, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 2)",
                                    "put(board, 'nut', 'blue', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbn(board, ('red', 'blue'), 4, 2)",
                                "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bn(board, ('red', 'blue'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nbn(board, ['red', 'blue'], [4, 4], [2, 2])",
                                "function": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)",
                                "usage": "bn(board, ['red', 'blue'], [4, 4], [2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bn. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue nut in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbn(board, ('red', 'blue'), 4, 2)",
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bn(board, ('red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bn. place a red bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bn. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue nut in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nbn(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "function": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)",
                                            "usage": "bn(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 3rd column. Stack a blue nut on top of its left side.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbn(board, ('red', 'blue'), 4, 2)",
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bn(board, ('red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 3rd column. Stack a blue nut on top of its left side.",
                                        "<Editor>": {
                                            "total_code": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nbn(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "function": "def bn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)",
                                            "usage": "bn(board, ['red', 'blue'], [4, 4], [2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bs": [
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "x": [
                            6,
                            6
                        ],
                        "y": [
                            3,
                            3
                        ],
                        "orientations": [
                            "vertical",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 3)\nput(board, 'screw', 'blue', 6, 3)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 3)",
                                    "put(board, 'screw', 'blue', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbs(board, ('red', 'blue'), 6, 3)",
                                "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bs(board, ('red', 'blue'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbs(board, ['red', 'blue'], [6, 6], [3, 3])",
                                "function": "def bs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                "usage": "bs(board, ['red', 'blue'], [6, 6], [3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/twoshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/twoshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bs. Place a red bridge vertically in the 7th row, 4th column. Place a blue screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbs(board, ('red', 'blue'), 6, 3)",
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bs(board, ('red', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bs. place a red bridge vertically in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'blue', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bs. Place a red bridge vertically in the 7th row, 4th column. Place a blue screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbs(board, ['red', 'blue'], [6, 6], [3, 3])",
                                            "function": "def bs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                            "usage": "bs(board, ['red', 'blue'], [6, 6], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Stack a blue screw on top of the upper half of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbs(board, ('red', 'blue'), 6, 3)",
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bs(board, ('red', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Stack a blue screw on top of the upper half of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def bs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbs(board, ['red', 'blue'], [6, 6], [3, 3])",
                                            "function": "def bs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                            "usage": "bs(board, ['red', 'blue'], [6, 6], [3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "3": {
                "wwb": [
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            3,
                            4,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 3)\nput(board, 'washer', 'blue', 4, 4)\nput(board, 'bridge-h', 'green', 4, 3)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 3)",
                                    "put(board, 'washer', 'blue', 4, 4)",
                                    "put(board, 'bridge-h', 'green', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwb(board, ('red', 'blue', 'green'), 4, 3)",
                                "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwb(board, ('red', 'blue', 'green'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\nboard = init_board(8, 8)\nwwb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                "function": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)",
                                "usage": "wwb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwb. Place a red washer in the 5th row, 4th column. Place a blue washer in the 5th row, 5th column. Place a green bridge horizontally in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwb. place a red washer in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwb. Place a red washer in the 5th row, 4th column. Place a blue washer in the 5th row, 5th column. Place a green bridge horizontally in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\nboard = init_board(8, 8)\nwwb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "function": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)",
                                            "usage": "wwb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 5th row, 4th column. Place another washer in color blue next to it in column 5. Stack a green horizontal bridge on top of the two washers.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 5th row, 4th column. Place another washer in color blue next to it in column 5. Stack a green horizontal bridge on top of the two washers.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\nboard = init_board(8, 8)\nwwb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "function": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)",
                                            "usage": "wwb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "x": [
                            7,
                            7,
                            7
                        ],
                        "y": [
                            0,
                            1,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'green', 7, 0)\nput(board, 'washer', 'yellow', 7, 1)\nput(board, 'bridge-h', 'red', 7, 0)",
                                "output": [
                                    "put(board, 'washer', 'green', 7, 0)",
                                    "put(board, 'washer', 'yellow', 7, 1)",
                                    "put(board, 'bridge-h', 'red', 7, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwb(board, ('green', 'yellow', 'red'), 7, 0)",
                                "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwb(board, ('green', 'yellow', 'red'), 7, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=1)\n    put(board, 'bridge-h', 'red', x=7, y=0)\nboard = init_board(8, 8)\nwwb(board, ['green', 'yellow', 'red'], [7, 7, 7], [0, 1, 0])",
                                "function": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=1)\n    put(board, 'bridge-h', 'red', x=7, y=0)",
                                "usage": "wwb(board, ['green', 'yellow', 'red'], [7, 7, 7], [0, 1, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwb. Place a green washer in the 8th row, 1st column. Place a yellow washer in the 8th row, 2nd column. Place a red bridge horizontally in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwb(board, ('green', 'yellow', 'red'), 7, 0)",
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwb(board, ('green', 'yellow', 'red'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwb. place a green washer in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'green', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red bridge horizontally in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 7, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwb. Place a green washer in the 8th row, 1st column. Place a yellow washer in the 8th row, 2nd column. Place a red bridge horizontally in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=1)\n    put(board, 'bridge-h', 'red', x=7, y=0)\nboard = init_board(8, 8)\nwwb(board, ['green', 'yellow', 'red'], [7, 7, 7], [0, 1, 0])",
                                            "function": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=1)\n    put(board, 'bridge-h', 'red', x=7, y=0)",
                                            "usage": "wwb(board, ['green', 'yellow', 'red'], [7, 7, 7], [0, 1, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green washer in the bottom left corner. Add a yellow washer next to it to the right. Stack a red horizontal bridge on top of the two washers.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwb(board, ('green', 'yellow', 'red'), 7, 0)",
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwb(board, ('green', 'yellow', 'red'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green washer in the bottom left corner. Add a yellow washer next to it to the right. Stack a red horizontal bridge on top of the two washers.",
                                        "<Editor>": {
                                            "total_code": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=1)\n    put(board, 'bridge-h', 'red', x=7, y=0)\nboard = init_board(8, 8)\nwwb(board, ['green', 'yellow', 'red'], [7, 7, 7], [0, 1, 0])",
                                            "function": "def wwb(board, colors, x, y):\n    put(board, 'washer', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=1)\n    put(board, 'bridge-h', 'red', x=7, y=0)",
                                            "usage": "wwb(board, ['green', 'yellow', 'red'], [7, 7, 7], [0, 1, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wns": [
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 3)\nput(board, 'nut', 'blue', 5, 3)\nput(board, 'screw', 'yellow', 5, 3)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 3)",
                                    "put(board, 'nut', 'blue', 5, 3)",
                                    "put(board, 'screw', 'yellow', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nwns(board, ('red', 'blue', 'yellow'), 5, 3)",
                                "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "wns(board, ('red', 'blue', 'yellow'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nwns(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                "function": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                "usage": "wns(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wns. Place a red washer in the 6th row, 4th column. Place a blue nut in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nwns(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "wns(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wns. place a red washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wns. Place a red washer in the 6th row, 4th column. Place a blue nut in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nwns(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "function": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "wns(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 6th row, 4th column. Place a blue nut on top of it. Put a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nwns(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "wns(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 6th row, 4th column. Place a blue nut on top of it. Put a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nwns(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "function": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "wns(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 2)\nput(board, 'nut', 'blue', 4, 2)\nput(board, 'screw', 'green', 4, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 2)",
                                    "put(board, 'nut', 'blue', 4, 2)",
                                    "put(board, 'screw', 'green', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nwns(board, ('red', 'blue', 'green'), 4, 2)",
                                "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "wns(board, ('red', 'blue', 'green'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'screw', 'green', x=4, y=2)\nboard = init_board(8, 8)\nwns(board, ['red', 'blue', 'green'], [4, 4, 4], [2, 2, 2])",
                                "function": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'screw', 'green', x=4, y=2)",
                                "usage": "wns(board, ['red', 'blue', 'green'], [4, 4, 4], [2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wns. Place a red washer in the 5th row, 3rd column. Place a blue nut in the 5th row, 3rd column. Place a green screw in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nwns(board, ('red', 'blue', 'green'), 4, 2)",
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "wns(board, ('red', 'blue', 'green'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wns. place a red washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'green', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wns. Place a red washer in the 5th row, 3rd column. Place a blue nut in the 5th row, 3rd column. Place a green screw in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'screw', 'green', x=4, y=2)\nboard = init_board(8, 8)\nwns(board, ['red', 'blue', 'green'], [4, 4, 4], [2, 2, 2])",
                                            "function": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'screw', 'green', x=4, y=2)",
                                            "usage": "wns(board, ['red', 'blue', 'green'], [4, 4, 4], [2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 5th row, 3rd column. Add a blue nut on top of the washer. Put a green screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nwns(board, ('red', 'blue', 'green'), 4, 2)",
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "wns(board, ('red', 'blue', 'green'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 5th row, 3rd column. Add a blue nut on top of the washer. Put a green screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'screw', 'green', x=4, y=2)\nboard = init_board(8, 8)\nwns(board, ['red', 'blue', 'green'], [4, 4, 4], [2, 2, 2])",
                                            "function": "def wns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'screw', 'green', x=4, y=2)",
                                            "usage": "wns(board, ['red', 'blue', 'green'], [4, 4, 4], [2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnb": [
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            4,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 3)\nput(board, 'nut', 'blue', 5, 4)\nput(board, 'bridge-h', 'green', 5, 3)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 3)",
                                    "put(board, 'nut', 'blue', 5, 4)",
                                    "put(board, 'bridge-h', 'green', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnb(board, ('red', 'blue', 'green'), 5, 3)",
                                "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnb(board, ('red', 'blue', 'green'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\nboard = init_board(8, 8)\nwnb(board, ['red', 'blue', 'green'], [5, 5, 5], [3, 4, 3])",
                                "function": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)",
                                "usage": "wnb(board, ['red', 'blue', 'green'], [5, 5, 5], [3, 4, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnb. Place a red washer in the 6th row, 4th column. Place a blue nut in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnb(board, ('red', 'blue', 'green'), 5, 3)",
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnb(board, ('red', 'blue', 'green'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnb. place a red washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnb. Place a red washer in the 6th row, 4th column. Place a blue nut in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\nboard = init_board(8, 8)\nwnb(board, ['red', 'blue', 'green'], [5, 5, 5], [3, 4, 3])",
                                            "function": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)",
                                            "usage": "wnb(board, ['red', 'blue', 'green'], [5, 5, 5], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 6th row, 4th column. Put a blue nut next to the washer on the right side. Stack a green horizontal bridge on top of the other two objects.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnb(board, ('red', 'blue', 'green'), 5, 3)",
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnb(board, ('red', 'blue', 'green'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 6th row, 4th column. Put a blue nut next to the washer on the right side. Stack a green horizontal bridge on top of the other two objects.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\nboard = init_board(8, 8)\nwnb(board, ['red', 'blue', 'green'], [5, 5, 5], [3, 4, 3])",
                                            "function": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)",
                                            "usage": "wnb(board, ['red', 'blue', 'green'], [5, 5, 5], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            6,
                            6,
                            6
                        ],
                        "y": [
                            1,
                            2,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 1)\nput(board, 'nut', 'blue', 6, 2)\nput(board, 'bridge-h', 'yellow', 6, 1)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 1)",
                                    "put(board, 'nut', 'blue', 6, 2)",
                                    "put(board, 'bridge-h', 'yellow', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnb(board, ('red', 'blue', 'yellow'), 6, 1)",
                                "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnb(board, ('red', 'blue', 'yellow'), 6, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nwnb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [1, 2, 1])",
                                "function": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'yellow', x=6, y=1)",
                                "usage": "wnb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [1, 2, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnb. Place a red washer in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a yellow bridge horizontally in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnb(board, ('red', 'blue', 'yellow'), 6, 1)",
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnb(board, ('red', 'blue', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnb. place a red washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'yellow', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnb. Place a red washer in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a yellow bridge horizontally in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nwnb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [1, 2, 1])",
                                            "function": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'yellow', x=6, y=1)",
                                            "usage": "wnb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 2nd column. Put a blue nut in the same row, 3rd column. Stack a yellow horizontal bridge on top of the washer and the nut.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnb(board, ('red', 'blue', 'yellow'), 6, 1)",
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnb(board, ('red', 'blue', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 2nd column. Put a blue nut in the same row, 3rd column. Stack a yellow horizontal bridge on top of the washer and the nut.",
                                        "<Editor>": {
                                            "total_code": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nwnb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [1, 2, 1])",
                                            "function": "def wnb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'yellow', x=6, y=1)",
                                            "usage": "wnb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbb": [
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            1
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 1)\nput(board, 'bridge-h', 'blue', 5, 2)\nput(board, 'bridge-h', 'yellow', 5, 1)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 1)",
                                    "put(board, 'bridge-h', 'blue', 5, 2)",
                                    "put(board, 'bridge-h', 'yellow', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'bridge-h', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nwbb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                "function": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'bridge-h', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)",
                                "usage": "wbb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbb. Place a red washer in the 6th row, 2nd column. Place a blue bridge horizontally in the 6th row, 3rd column. Place a yellow bridge horizontally in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbb. place a red washer in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'yellow', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbb. Place a red washer in the 6th row, 2nd column. Place a blue bridge horizontally in the 6th row, 3rd column. Place a yellow bridge horizontally in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'bridge-h', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nwbb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "function": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'bridge-h', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)",
                                            "usage": "wbb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 6th row, 2nd column. Add a blue horizontal bridge in the 6th row as well, 3rd column. Stack a yellow horizontal bridge on top of the washer and the left side of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 6th row, 2nd column. Add a blue horizontal bridge in the 6th row as well, 3rd column. Stack a yellow horizontal bridge on top of the washer and the left side of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'bridge-h', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nwbb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "function": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'bridge-h', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)",
                                            "usage": "wbb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            6,
                            6,
                            6
                        ],
                        "y": [
                            0,
                            1,
                            0
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 0)\nput(board, 'bridge-h', 'blue', 6, 1)\nput(board, 'bridge-h', 'green', 6, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 0)",
                                    "put(board, 'bridge-h', 'blue', 6, 1)",
                                    "put(board, 'bridge-h', 'green', 6, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbb(board, ('red', 'blue', 'green'), 6, 0)",
                                "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbb(board, ('red', 'blue', 'green'), 6, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\nboard = init_board(8, 8)\nwbb(board, ['red', 'blue', 'green'], [6, 6, 6], [0, 1, 0])",
                                "function": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)",
                                "usage": "wbb(board, ['red', 'blue', 'green'], [6, 6, 6], [0, 1, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbb. Place a red washer in the 7th row, 1st column. Place a blue bridge horizontally in the 7th row, 2nd column. Place a green bridge horizontally in the 7th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbb(board, ('red', 'blue', 'green'), 6, 0)",
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbb(board, ('red', 'blue', 'green'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbb. place a red washer in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbb. Place a red washer in the 7th row, 1st column. Place a blue bridge horizontally in the 7th row, 2nd column. Place a green bridge horizontally in the 7th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\nboard = init_board(8, 8)\nwbb(board, ['red', 'blue', 'green'], [6, 6, 6], [0, 1, 0])",
                                            "function": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)",
                                            "usage": "wbb(board, ['red', 'blue', 'green'], [6, 6, 6], [0, 1, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 1st column. Add a blue horizontal bridge next to it in column 2. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbb(board, ('red', 'blue', 'green'), 6, 0)",
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbb(board, ('red', 'blue', 'green'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 1st column. Add a blue horizontal bridge next to it in column 2. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\nboard = init_board(8, 8)\nwbb(board, ['red', 'blue', 'green'], [6, 6, 6], [0, 1, 0])",
                                            "function": "def wbb(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)",
                                            "usage": "wbb(board, ['red', 'blue', 'green'], [6, 6, 6], [0, 1, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nws": [
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 4, 0)\nput(board, 'washer', 'blue', 4, 0)\nput(board, 'screw', 'green', 4, 0)",
                                "output": [
                                    "put(board, 'nut', 'red', 4, 0)",
                                    "put(board, 'washer', 'blue', 4, 0)",
                                    "put(board, 'screw', 'green', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nnws(board, ('red', 'blue', 'green'), 4, 0)",
                                "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "nws(board, ('red', 'blue', 'green'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)\nboard = init_board(8, 8)\nnws(board, ['red', 'blue', 'green'], [4, 4, 4], [0, 0, 0])",
                                "function": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)",
                                "usage": "nws(board, ['red', 'blue', 'green'], [4, 4, 4], [0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nws. Place a red nut in the 5th row, 1st column. Place a blue washer in the 5th row, 1st column. Place a green screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nnws(board, ('red', 'blue', 'green'), 4, 0)",
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "nws(board, ('red', 'blue', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nws. place a red nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'green', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nws. Place a red nut in the 5th row, 1st column. Place a blue washer in the 5th row, 1st column. Place a green screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)\nboard = init_board(8, 8)\nnws(board, ['red', 'blue', 'green'], [4, 4, 4], [0, 0, 0])",
                                            "function": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)",
                                            "usage": "nws(board, ['red', 'blue', 'green'], [4, 4, 4], [0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the 5th row, 1st column. Add a blue washer on top of it. Stack a green screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nnws(board, ('red', 'blue', 'green'), 4, 0)",
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "nws(board, ('red', 'blue', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the 5th row, 1st column. Add a blue washer on top of it. Stack a green screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)\nboard = init_board(8, 8)\nnws(board, ['red', 'blue', 'green'], [4, 4, 4], [0, 0, 0])",
                                            "function": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)",
                                            "usage": "nws(board, ['red', 'blue', 'green'], [4, 4, 4], [0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 4, 0)\nput(board, 'washer', 'blue', 4, 0)\nput(board, 'screw', 'red', 4, 0)",
                                "output": [
                                    "put(board, 'nut', 'red', 4, 0)",
                                    "put(board, 'washer', 'blue', 4, 0)",
                                    "put(board, 'screw', 'red', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nnws(board, ('red', 'blue', 'red'), 4, 0)",
                                "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "nws(board, ('red', 'blue', 'red'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'red', x=4, y=0)\nboard = init_board(8, 8)\nnws(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                "function": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'red', x=4, y=0)",
                                "usage": "nws(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nws. Place a red nut in the 5th row, 1st column. Place a blue washer in the 5th row, 1st column. Place a red screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nnws(board, ('red', 'blue', 'red'), 4, 0)",
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "nws(board, ('red', 'blue', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nws. place a red nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red screw in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'red', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nws. Place a red nut in the 5th row, 1st column. Place a blue washer in the 5th row, 1st column. Place a red screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'red', x=4, y=0)\nboard = init_board(8, 8)\nnws(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "function": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'red', x=4, y=0)",
                                            "usage": "nws(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 5th row, 1st column. Add a blue washer on top of it. Finally, stack a red screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nnws(board, ('red', 'blue', 'red'), 4, 0)",
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "nws(board, ('red', 'blue', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 5th row, 1st column. Add a blue washer on top of it. Finally, stack a red screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'red', x=4, y=0)\nboard = init_board(8, 8)\nnws(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "function": "def nws(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'screw', 'red', x=4, y=0)",
                                            "usage": "nws(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwb": [
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            2,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 4, 1)\nput(board, 'washer', 'blue', 4, 2)\nput(board, 'bridge-h', 'green', 4, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 4, 1)",
                                    "put(board, 'washer', 'blue', 4, 2)",
                                    "put(board, 'bridge-h', 'green', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwb(board, ('red', 'blue', 'green'), 4, 1)",
                                "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwb(board, ('red', 'blue', 'green'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\nboard = init_board(8, 8)\nnwb(board, ['red', 'blue', 'green'], [4, 4, 4], [1, 2, 1])",
                                "function": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)",
                                "usage": "nwb(board, ['red', 'blue', 'green'], [4, 4, 4], [1, 2, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwb. Place a red nut in the 5th row, 2nd column. Place a blue washer in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwb(board, ('red', 'blue', 'green'), 4, 1)",
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwb(board, ('red', 'blue', 'green'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwb. place a red nut in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwb. Place a red nut in the 5th row, 2nd column. Place a blue washer in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\nboard = init_board(8, 8)\nnwb(board, ['red', 'blue', 'green'], [4, 4, 4], [1, 2, 1])",
                                            "function": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)",
                                            "usage": "nwb(board, ['red', 'blue', 'green'], [4, 4, 4], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 5th row, 2nd column. Add a blue washer to the right of it. Stack a green horizontal bridge on top of both objects.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwb(board, ('red', 'blue', 'green'), 4, 1)",
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwb(board, ('red', 'blue', 'green'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 5th row, 2nd column. Add a blue washer to the right of it. Stack a green horizontal bridge on top of both objects.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\nboard = init_board(8, 8)\nnwb(board, ['red', 'blue', 'green'], [4, 4, 4], [1, 2, 1])",
                                            "function": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)",
                                            "usage": "nwb(board, ['red', 'blue', 'green'], [4, 4, 4], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 2)\nput(board, 'washer', 'blue', 5, 3)\nput(board, 'bridge-h', 'yellow', 5, 2)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 2)",
                                    "put(board, 'washer', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'yellow', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwb(board, ('red', 'blue', 'yellow'), 5, 2)",
                                "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwb(board, ('red', 'blue', 'yellow'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nnwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [2, 3, 2])",
                                "function": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'yellow', x=5, y=2)",
                                "usage": "nwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [2, 3, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwb. Place a red nut in the 6th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a yellow bridge horizontally in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwb(board, ('red', 'blue', 'yellow'), 5, 2)",
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwb(board, ('red', 'blue', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwb. place a red nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'yellow', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwb. Place a red nut in the 6th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a yellow bridge horizontally in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nnwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [2, 3, 2])",
                                            "function": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'yellow', x=5, y=2)",
                                            "usage": "nwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [2, 3, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in row 6, column 3. Put a blue washer in the same row, column 4. Stack a yellow horizontal bridge on top of the two other objects.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwb(board, ('red', 'blue', 'yellow'), 5, 2)",
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwb(board, ('red', 'blue', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in row 6, column 3. Put a blue washer in the same row, column 4. Stack a yellow horizontal bridge on top of the two other objects.",
                                        "<Editor>": {
                                            "total_code": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nnwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [2, 3, 2])",
                                            "function": "def nwb(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'yellow', x=5, y=2)",
                                            "usage": "nwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [2, 3, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnb": [
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 6, 3)\nput(board, 'nut', 'blue', 6, 4)\nput(board, 'bridge-h', 'green', 6, 3)",
                                "output": [
                                    "put(board, 'nut', 'red', 6, 3)",
                                    "put(board, 'nut', 'blue', 6, 4)",
                                    "put(board, 'bridge-h', 'green', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnb(board, ('red', 'blue', 'green'), 6, 3)",
                                "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnb(board, ('red', 'blue', 'green'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\nboard = init_board(8, 8)\nnnb(board, ['red', 'blue', 'green'], [6, 6, 6], [3, 4, 3])",
                                "function": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)",
                                "usage": "nnb(board, ['red', 'blue', 'green'], [6, 6, 6], [3, 4, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnb. Place a red nut in the 7th row, 4th column. Place a blue nut in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnb(board, ('red', 'blue', 'green'), 6, 3)",
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnb(board, ('red', 'blue', 'green'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnb. place a red nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnb. Place a red nut in the 7th row, 4th column. Place a blue nut in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\nboard = init_board(8, 8)\nnnb(board, ['red', 'blue', 'green'], [6, 6, 6], [3, 4, 3])",
                                            "function": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)",
                                            "usage": "nnb(board, ['red', 'blue', 'green'], [6, 6, 6], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 7th row, 4th column. Position a blue nut to the right of the red one. Stack a green horizontal bridge on top of both nuts.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnb(board, ('red', 'blue', 'green'), 6, 3)",
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnb(board, ('red', 'blue', 'green'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 7th row, 4th column. Position a blue nut to the right of the red one. Stack a green horizontal bridge on top of both nuts.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\nboard = init_board(8, 8)\nnnb(board, ['red', 'blue', 'green'], [6, 6, 6], [3, 4, 3])",
                                            "function": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)",
                                            "usage": "nnb(board, ['red', 'blue', 'green'], [6, 6, 6], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            2,
                            3,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 4, 2)\nput(board, 'nut', 'blue', 4, 3)\nput(board, 'bridge-h', 'yellow', 4, 2)",
                                "output": [
                                    "put(board, 'nut', 'red', 4, 2)",
                                    "put(board, 'nut', 'blue', 4, 3)",
                                    "put(board, 'bridge-h', 'yellow', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnb(board, ('red', 'blue', 'yellow'), 4, 2)",
                                "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnb(board, ('red', 'blue', 'yellow'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'bridge-h', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nnnb(board, ['red', 'blue', 'yellow'], [4, 4, 4], [2, 3, 2])",
                                "function": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'bridge-h', 'yellow', x=4, y=2)",
                                "usage": "nnb(board, ['red', 'blue', 'yellow'], [4, 4, 4], [2, 3, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnb. Place a red nut in the 5th row, 3rd column. Place a blue nut in the 5th row, 4th column. Place a yellow bridge horizontally in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnb(board, ('red', 'blue', 'yellow'), 4, 2)",
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnb(board, ('red', 'blue', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnb. place a red nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'yellow', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnb. Place a red nut in the 5th row, 3rd column. Place a blue nut in the 5th row, 4th column. Place a yellow bridge horizontally in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'bridge-h', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nnnb(board, ['red', 'blue', 'yellow'], [4, 4, 4], [2, 3, 2])",
                                            "function": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'bridge-h', 'yellow', x=4, y=2)",
                                            "usage": "nnb(board, ['red', 'blue', 'yellow'], [4, 4, 4], [2, 3, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nuts in row 5, column 3 and 4. The left one is red and the right one is blue. Stack a yellow horizontal bridge on top of the two nuts.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnb(board, ('red', 'blue', 'yellow'), 4, 2)",
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnb(board, ('red', 'blue', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nuts in row 5, column 3 and 4. The left one is red and the right one is blue. Stack a yellow horizontal bridge on top of the two nuts.",
                                        "<Editor>": {
                                            "total_code": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'bridge-h', 'yellow', x=4, y=2)\nboard = init_board(8, 8)\nnnb(board, ['red', 'blue', 'yellow'], [4, 4, 4], [2, 3, 2])",
                                            "function": "def nnb(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=2)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'bridge-h', 'yellow', x=4, y=2)",
                                            "usage": "nnb(board, ['red', 'blue', 'yellow'], [4, 4, 4], [2, 3, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbb": [
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'green', 4, 0)\nput(board, 'bridge-h', 'yellow', 4, 1)\nput(board, 'bridge-h', 'red', 4, 0)",
                                "output": [
                                    "put(board, 'nut', 'green', 4, 0)",
                                    "put(board, 'bridge-h', 'yellow', 4, 1)",
                                    "put(board, 'bridge-h', 'red', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbb(board, ('green', 'yellow', 'red'), 4, 0)",
                                "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbb(board, ('green', 'yellow', 'red'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=0)\n    put(board, 'bridge-h', 'yellow', x=4, y=1)\n    put(board, 'bridge-h', 'red', x=4, y=0)\nboard = init_board(8, 8)\nnbb(board, ['green', 'yellow', 'red'], [4, 4, 4], [0, 1, 0])",
                                "function": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=0)\n    put(board, 'bridge-h', 'yellow', x=4, y=1)\n    put(board, 'bridge-h', 'red', x=4, y=0)",
                                "usage": "nbb(board, ['green', 'yellow', 'red'], [4, 4, 4], [0, 1, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbb. Place a green nut in the 5th row, 1st column. Place a yellow bridge horizontally in the 5th row, 2nd column. Place a red bridge horizontally in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbb(board, ('green', 'yellow', 'red'), 4, 0)",
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbb(board, ('green', 'yellow', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbb. place a green nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'yellow', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbb. Place a green nut in the 5th row, 1st column. Place a yellow bridge horizontally in the 5th row, 2nd column. Place a red bridge horizontally in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=0)\n    put(board, 'bridge-h', 'yellow', x=4, y=1)\n    put(board, 'bridge-h', 'red', x=4, y=0)\nboard = init_board(8, 8)\nnbb(board, ['green', 'yellow', 'red'], [4, 4, 4], [0, 1, 0])",
                                            "function": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=0)\n    put(board, 'bridge-h', 'yellow', x=4, y=1)\n    put(board, 'bridge-h', 'red', x=4, y=0)",
                                            "usage": "nbb(board, ['green', 'yellow', 'red'], [4, 4, 4], [0, 1, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green nut in the 5th row, 1st column. Put a yellow horizontal bridge in the same row, 2nd column. Stack a red horizontal bridge on top of the nut and the left side of the yellow bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbb(board, ('green', 'yellow', 'red'), 4, 0)",
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbb(board, ('green', 'yellow', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green nut in the 5th row, 1st column. Put a yellow horizontal bridge in the same row, 2nd column. Stack a red horizontal bridge on top of the nut and the left side of the yellow bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=0)\n    put(board, 'bridge-h', 'yellow', x=4, y=1)\n    put(board, 'bridge-h', 'red', x=4, y=0)\nboard = init_board(8, 8)\nnbb(board, ['green', 'yellow', 'red'], [4, 4, 4], [0, 1, 0])",
                                            "function": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'green', x=4, y=0)\n    put(board, 'bridge-h', 'yellow', x=4, y=1)\n    put(board, 'bridge-h', 'red', x=4, y=0)",
                                            "usage": "nbb(board, ['green', 'yellow', 'red'], [4, 4, 4], [0, 1, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            7,
                            7,
                            7
                        ],
                        "y": [
                            1,
                            2,
                            1
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 7, 1)\nput(board, 'bridge-h', 'blue', 7, 2)\nput(board, 'bridge-h', 'green', 7, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 7, 1)",
                                    "put(board, 'bridge-h', 'blue', 7, 2)",
                                    "put(board, 'bridge-h', 'green', 7, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbb(board, ('red', 'blue', 'green'), 7, 1)",
                                "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbb(board, ('red', 'blue', 'green'), 7, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'bridge-h', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\nboard = init_board(8, 8)\nnbb(board, ['red', 'blue', 'green'], [7, 7, 7], [1, 2, 1])",
                                "function": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'bridge-h', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)",
                                "usage": "nbb(board, ['red', 'blue', 'green'], [7, 7, 7], [1, 2, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbb. Place a red nut in the 8th row, 2nd column. Place a blue bridge horizontally in the 8th row, 3rd column. Place a green bridge horizontally in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbb(board, ('red', 'blue', 'green'), 7, 1)",
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbb(board, ('red', 'blue', 'green'), 7, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbb. place a red nut in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbb. Place a red nut in the 8th row, 2nd column. Place a blue bridge horizontally in the 8th row, 3rd column. Place a green bridge horizontally in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'bridge-h', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\nboard = init_board(8, 8)\nnbb(board, ['red', 'blue', 'green'], [7, 7, 7], [1, 2, 1])",
                                            "function": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'bridge-h', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)",
                                            "usage": "nbb(board, ['red', 'blue', 'green'], [7, 7, 7], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 2nd column. Position a blue horizontal bridge to the right of it in the 3rd column. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbb(board, ('red', 'blue', 'green'), 7, 1)",
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbb(board, ('red', 'blue', 'green'), 7, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 2nd column. Position a blue horizontal bridge to the right of it in the 3rd column. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'bridge-h', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\nboard = init_board(8, 8)\nnbb(board, ['red', 'blue', 'green'], [7, 7, 7], [1, 2, 1])",
                                            "function": "def nbb(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'bridge-h', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)",
                                            "usage": "nbb(board, ['red', 'blue', 'green'], [7, 7, 7], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwn": [
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 0)\nput(board, 'washer', 'blue', 4, 0)\nput(board, 'nut', 'red', 4, 0)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 0)",
                                    "put(board, 'washer', 'blue', 4, 0)",
                                    "put(board, 'nut', 'red', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwn(board, ('red', 'blue', 'red'), 4, 0)",
                                "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bwn(board, ('red', 'blue', 'red'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\nboard = init_board(8, 8)\nbwn(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                "function": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)",
                                "usage": "bwn(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwn. Place a red bridge horizontally in the 5th row, 1st column. Place a blue washer in the 5th row, 1st column. Place a red nut in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwn(board, ('red', 'blue', 'red'), 4, 0)",
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwn(board, ('red', 'blue', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwn. place a red bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwn. Place a red bridge horizontally in the 5th row, 1st column. Place a blue washer in the 5th row, 1st column. Place a red nut in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\nboard = init_board(8, 8)\nbwn(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "function": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)",
                                            "usage": "bwn(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 5th row, 1st column. Add a blue washer on top of the left side of the bridge. Stack a red nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwn(board, ('red', 'blue', 'red'), 4, 0)",
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwn(board, ('red', 'blue', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 5th row, 1st column. Add a blue washer on top of the left side of the bridge. Stack a red nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\nboard = init_board(8, 8)\nbwn(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "function": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)",
                                            "usage": "bwn(board, ['red', 'blue', 'red'], [4, 4, 4], [0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 3)\nput(board, 'washer', 'blue', 5, 3)\nput(board, 'nut', 'yellow', 5, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 3)",
                                    "put(board, 'washer', 'blue', 5, 3)",
                                    "put(board, 'nut', 'yellow', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwn(board, ('red', 'blue', 'yellow'), 5, 3)",
                                "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bwn(board, ('red', 'blue', 'yellow'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'nut', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nbwn(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                "function": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'nut', 'yellow', x=5, y=3)",
                                "usage": "bwn(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwn. Place a red bridge horizontally in the 6th row, 4th column. Place a blue washer in the 6th row, 4th column. Place a yellow nut in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwn(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwn(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwn. place a red bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwn. Place a red bridge horizontally in the 6th row, 4th column. Place a blue washer in the 6th row, 4th column. Place a yellow nut in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'nut', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nbwn(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "function": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'nut', 'yellow', x=5, y=3)",
                                            "usage": "bwn(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 4th column. Stack a blue washer on top of its left side. Put a yellow nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwn(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwn(board, ('red', 'blue', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 4th column. Stack a blue washer on top of its left side. Put a yellow nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'nut', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nbwn(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "function": "def bwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'nut', 'yellow', x=5, y=3)",
                                            "usage": "bwn(board, ['red', 'blue', 'yellow'], [5, 5, 5], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bws": [
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 1)\nput(board, 'washer', 'blue', 4, 1)\nput(board, 'screw', 'yellow', 4, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 1)",
                                    "put(board, 'washer', 'blue', 4, 1)",
                                    "put(board, 'screw', 'yellow', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbws(board, ('red', 'blue', 'yellow'), 4, 1)",
                                "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bws(board, ('red', 'blue', 'yellow'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)\nboard = init_board(8, 8)\nbws(board, ['red', 'blue', 'yellow'], [4, 4, 4], [1, 1, 1])",
                                "function": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)",
                                "usage": "bws(board, ['red', 'blue', 'yellow'], [4, 4, 4], [1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bws. Place a red bridge horizontally in the 5th row, 2nd column. Place a blue washer in the 5th row, 2nd column. Place a yellow screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbws(board, ('red', 'blue', 'yellow'), 4, 1)",
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bws(board, ('red', 'blue', 'yellow'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bws. place a red bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bws. Place a red bridge horizontally in the 5th row, 2nd column. Place a blue washer in the 5th row, 2nd column. Place a yellow screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)\nboard = init_board(8, 8)\nbws(board, ['red', 'blue', 'yellow'], [4, 4, 4], [1, 1, 1])",
                                            "function": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)",
                                            "usage": "bws(board, ['red', 'blue', 'yellow'], [4, 4, 4], [1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 2nd column. Stack a blue washer on top of the left side of the bridge. Place a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbws(board, ('red', 'blue', 'yellow'), 4, 1)",
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bws(board, ('red', 'blue', 'yellow'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 2nd column. Stack a blue washer on top of the left side of the bridge. Place a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)\nboard = init_board(8, 8)\nbws(board, ['red', 'blue', 'yellow'], [4, 4, 4], [1, 1, 1])",
                                            "function": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)",
                                            "usage": "bws(board, ['red', 'blue', 'yellow'], [4, 4, 4], [1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 2)\nput(board, 'washer', 'blue', 4, 2)\nput(board, 'screw', 'red', 4, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 2)",
                                    "put(board, 'washer', 'blue', 4, 2)",
                                    "put(board, 'screw', 'red', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbws(board, ('red', 'blue', 'red'), 4, 2)",
                                "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bws(board, ('red', 'blue', 'red'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'screw', 'red', x=4, y=2)\nboard = init_board(8, 8)\nbws(board, ['red', 'blue', 'red'], [4, 4, 4], [2, 2, 2])",
                                "function": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'screw', 'red', x=4, y=2)",
                                "usage": "bws(board, ['red', 'blue', 'red'], [4, 4, 4], [2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bws. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue washer in the 5th row, 3rd column. Place a red screw in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbws(board, ('red', 'blue', 'red'), 4, 2)",
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bws(board, ('red', 'blue', 'red'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bws. place a red bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red screw in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'red', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bws. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue washer in the 5th row, 3rd column. Place a red screw in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'screw', 'red', x=4, y=2)\nboard = init_board(8, 8)\nbws(board, ['red', 'blue', 'red'], [4, 4, 4], [2, 2, 2])",
                                            "function": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'screw', 'red', x=4, y=2)",
                                            "usage": "bws(board, ['red', 'blue', 'red'], [4, 4, 4], [2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 5th row, 3rd column. Add a blue washer on top of its left side. Stack a red screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbws(board, ('red', 'blue', 'red'), 4, 2)",
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bws(board, ('red', 'blue', 'red'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 5th row, 3rd column. Add a blue washer on top of its left side. Stack a red screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'screw', 'red', x=4, y=2)\nboard = init_board(8, 8)\nbws(board, ['red', 'blue', 'red'], [4, 4, 4], [2, 2, 2])",
                                            "function": "def bws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'screw', 'red', x=4, y=2)",
                                            "usage": "bws(board, ['red', 'blue', 'red'], [4, 4, 4], [2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwb": [
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "x": [
                            6,
                            6,
                            6
                        ],
                        "y": [
                            2,
                            3,
                            2
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'green', 6, 2)\nput(board, 'washer', 'yellow', 6, 3)\nput(board, 'bridge-h', 'red', 6, 2)",
                                "output": [
                                    "put(board, 'bridge-v', 'green', 6, 2)",
                                    "put(board, 'washer', 'yellow', 6, 3)",
                                    "put(board, 'bridge-h', 'red', 6, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwb(board, ('green', 'yellow', 'red'), 6, 2)",
                                "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwb(board, ('green', 'yellow', 'red'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=6, y=2)\n    put(board, 'washer', 'yellow', x=6, y=3)\n    put(board, 'bridge-h', 'red', x=6, y=2)\nboard = init_board(8, 8)\nbwb(board, ['green', 'yellow', 'red'], [6, 6, 6], [2, 3, 2])",
                                "function": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=6, y=2)\n    put(board, 'washer', 'yellow', x=6, y=3)\n    put(board, 'bridge-h', 'red', x=6, y=2)",
                                "usage": "bwb(board, ['green', 'yellow', 'red'], [6, 6, 6], [2, 3, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwb. Place a green bridge vertically in the 7th row, 3rd column. Place a yellow washer in the 7th row, 4th column. Place a red bridge horizontally in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwb(board, ('green', 'yellow', 'red'), 6, 2)",
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwb(board, ('green', 'yellow', 'red'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwb. place a green bridge vertically in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red bridge horizontally in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwb. Place a green bridge vertically in the 7th row, 3rd column. Place a yellow washer in the 7th row, 4th column. Place a red bridge horizontally in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=6, y=2)\n    put(board, 'washer', 'yellow', x=6, y=3)\n    put(board, 'bridge-h', 'red', x=6, y=2)\nboard = init_board(8, 8)\nbwb(board, ['green', 'yellow', 'red'], [6, 6, 6], [2, 3, 2])",
                                            "function": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=6, y=2)\n    put(board, 'washer', 'yellow', x=6, y=3)\n    put(board, 'bridge-h', 'red', x=6, y=2)",
                                            "usage": "bwb(board, ['green', 'yellow', 'red'], [6, 6, 6], [2, 3, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green vertical bridge in the 7th row, 3rd column. Put a yellow washer in the 7th row, 4th column. Now stack a red horizontal bridge on top of the upper half of the green bridge and the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwb(board, ('green', 'yellow', 'red'), 6, 2)",
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwb(board, ('green', 'yellow', 'red'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a green vertical bridge in the 7th row, 3rd column. Put a yellow washer in the 7th row, 4th column. Now stack a red horizontal bridge on top of the upper half of the green bridge and the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=6, y=2)\n    put(board, 'washer', 'yellow', x=6, y=3)\n    put(board, 'bridge-h', 'red', x=6, y=2)\nboard = init_board(8, 8)\nbwb(board, ['green', 'yellow', 'red'], [6, 6, 6], [2, 3, 2])",
                                            "function": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=6, y=2)\n    put(board, 'washer', 'yellow', x=6, y=3)\n    put(board, 'bridge-h', 'red', x=6, y=2)",
                                            "usage": "bwb(board, ['green', 'yellow', 'red'], [6, 6, 6], [2, 3, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            1
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 5, 1)\nput(board, 'washer', 'blue', 5, 2)\nput(board, 'bridge-h', 'yellow', 5, 1)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 5, 1)",
                                    "put(board, 'washer', 'blue', 5, 2)",
                                    "put(board, 'bridge-h', 'yellow', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                "function": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)",
                                "usage": "bwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwb. Place a red bridge vertically in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a yellow bridge horizontally in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwb. place a red bridge vertically in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'yellow', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwb. Place a red bridge vertically in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a yellow bridge horizontally in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "function": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)",
                                            "usage": "bwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red vertical bridge in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Stack a yellow horizontal bridge on top of the upper part of the bridge and the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwb(board, ('red', 'blue', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red vertical bridge in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Stack a yellow horizontal bridge on top of the upper part of the bridge and the washer.",
                                        "<Editor>": {
                                            "total_code": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "function": "def bwb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'yellow', x=5, y=1)",
                                            "usage": "bwb(board, ['red', 'blue', 'yellow'], [5, 5, 5], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnw": [
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            7,
                            7,
                            7
                        ],
                        "y": [
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 7, 2)\nput(board, 'nut', 'blue', 7, 2)\nput(board, 'washer', 'green', 7, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 7, 2)",
                                    "put(board, 'nut', 'blue', 7, 2)",
                                    "put(board, 'washer', 'green', 7, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnw(board, ('red', 'blue', 'green'), 7, 2)",
                                "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bnw(board, ('red', 'blue', 'green'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'green', x=7, y=2)\nboard = init_board(8, 8)\nbnw(board, ['red', 'blue', 'green'], [7, 7, 7], [2, 2, 2])",
                                "function": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'green', x=7, y=2)",
                                "usage": "bnw(board, ['red', 'blue', 'green'], [7, 7, 7], [2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnw. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue nut in the 8th row, 3rd column. Place a green washer in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnw(board, ('red', 'blue', 'green'), 7, 2)",
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnw(board, ('red', 'blue', 'green'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnw. place a red bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'green', 7, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnw. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue nut in the 8th row, 3rd column. Place a green washer in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'green', x=7, y=2)\nboard = init_board(8, 8)\nbnw(board, ['red', 'blue', 'green'], [7, 7, 7], [2, 2, 2])",
                                            "function": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'green', x=7, y=2)",
                                            "usage": "bnw(board, ['red', 'blue', 'green'], [7, 7, 7], [2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the last row, 3rd column. Position a blue nut on top of the left side of the bridge. Stack a green washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnw(board, ('red', 'blue', 'green'), 7, 2)",
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnw(board, ('red', 'blue', 'green'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the last row, 3rd column. Position a blue nut on top of the left side of the bridge. Stack a green washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'green', x=7, y=2)\nboard = init_board(8, 8)\nbnw(board, ['red', 'blue', 'green'], [7, 7, 7], [2, 2, 2])",
                                            "function": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'green', x=7, y=2)",
                                            "usage": "bnw(board, ['red', 'blue', 'green'], [7, 7, 7], [2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 3)\nput(board, 'nut', 'blue', 4, 3)\nput(board, 'washer', 'yellow', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 3)",
                                    "put(board, 'nut', 'blue', 4, 3)",
                                    "put(board, 'washer', 'yellow', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnw(board, ('red', 'blue', 'yellow'), 4, 3)",
                                "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bnw(board, ('red', 'blue', 'yellow'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'washer', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbnw(board, ['red', 'blue', 'yellow'], [4, 4, 4], [3, 3, 3])",
                                "function": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'washer', 'yellow', x=4, y=3)",
                                "usage": "bnw(board, ['red', 'blue', 'yellow'], [4, 4, 4], [3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnw. Place a red bridge horizontally in the 5th row, 4th column. Place a blue nut in the 5th row, 4th column. Place a yellow washer in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnw(board, ('red', 'blue', 'yellow'), 4, 3)",
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnw(board, ('red', 'blue', 'yellow'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnw. place a red bridge horizontally in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnw. Place a red bridge horizontally in the 5th row, 4th column. Place a blue nut in the 5th row, 4th column. Place a yellow washer in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'washer', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbnw(board, ['red', 'blue', 'yellow'], [4, 4, 4], [3, 3, 3])",
                                            "function": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'washer', 'yellow', x=4, y=3)",
                                            "usage": "bnw(board, ['red', 'blue', 'yellow'], [4, 4, 4], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 5th row, 4th column. Add a blue nut with a yellow washer stacked on top on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnw(board, ('red', 'blue', 'yellow'), 4, 3)",
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnw(board, ('red', 'blue', 'yellow'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 5th row, 4th column. Add a blue nut with a yellow washer stacked on top on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'washer', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbnw(board, ['red', 'blue', 'yellow'], [4, 4, 4], [3, 3, 3])",
                                            "function": "def bnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'washer', 'yellow', x=4, y=3)",
                                            "usage": "bnw(board, ['red', 'blue', 'yellow'], [4, 4, 4], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bns": [
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 3)\nput(board, 'nut', 'blue', 4, 3)\nput(board, 'screw', 'green', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 3)",
                                    "put(board, 'nut', 'blue', 4, 3)",
                                    "put(board, 'screw', 'green', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbns(board, ('red', 'blue', 'green'), 4, 3)",
                                "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bns(board, ('red', 'blue', 'green'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'screw', 'green', x=4, y=3)\nboard = init_board(8, 8)\nbns(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 3, 3])",
                                "function": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'screw', 'green', x=4, y=3)",
                                "usage": "bns(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bns. Place a red bridge horizontally in the 5th row, 4th column. Place a blue nut in the 5th row, 4th column. Place a green screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbns(board, ('red', 'blue', 'green'), 4, 3)",
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bns(board, ('red', 'blue', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bns. place a red bridge horizontally in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'green', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bns. Place a red bridge horizontally in the 5th row, 4th column. Place a blue nut in the 5th row, 4th column. Place a green screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'screw', 'green', x=4, y=3)\nboard = init_board(8, 8)\nbns(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 3, 3])",
                                            "function": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'screw', 'green', x=4, y=3)",
                                            "usage": "bns(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 5th row, 4th column. Place a blue nut on top of the left side of the bridge. Position a green screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbns(board, ('red', 'blue', 'green'), 4, 3)",
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bns(board, ('red', 'blue', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 5th row, 4th column. Place a blue nut on top of the left side of the bridge. Position a green screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'screw', 'green', x=4, y=3)\nboard = init_board(8, 8)\nbns(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 3, 3])",
                                            "function": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\n    put(board, 'screw', 'green', x=4, y=3)",
                                            "usage": "bns(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "x": [
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 6, 3)\nput(board, 'nut', 'blue', 6, 3)\nput(board, 'screw', 'red', 6, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 6, 3)",
                                    "put(board, 'nut', 'blue', 6, 3)",
                                    "put(board, 'screw', 'red', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbns(board, ('red', 'blue', 'red'), 6, 3)",
                                "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bns(board, ('red', 'blue', 'red'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)\nboard = init_board(8, 8)\nbns(board, ['red', 'blue', 'red'], [6, 6, 6], [3, 3, 3])",
                                "function": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)",
                                "usage": "bns(board, ['red', 'blue', 'red'], [6, 6, 6], [3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bns. Place a red bridge horizontally in the 7th row, 4th column. Place a blue nut in the 7th row, 4th column. Place a red screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbns(board, ('red', 'blue', 'red'), 6, 3)",
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bns(board, ('red', 'blue', 'red'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bns. place a red bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red screw in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'red', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bns. Place a red bridge horizontally in the 7th row, 4th column. Place a blue nut in the 7th row, 4th column. Place a red screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)\nboard = init_board(8, 8)\nbns(board, ['red', 'blue', 'red'], [6, 6, 6], [3, 3, 3])",
                                            "function": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)",
                                            "usage": "bns(board, ['red', 'blue', 'red'], [6, 6, 6], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 7th row, 4th column. Add a blue nut on top of its left side. Stack a red screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbns(board, ('red', 'blue', 'red'), 6, 3)",
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bns(board, ('red', 'blue', 'red'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 7th row, 4th column. Add a blue nut on top of its left side. Stack a red screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)\nboard = init_board(8, 8)\nbns(board, ['red', 'blue', 'red'], [6, 6, 6], [3, 3, 3])",
                                            "function": "def bns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)",
                                            "usage": "bns(board, ['red', 'blue', 'red'], [6, 6, 6], [3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnb": [
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            3,
                            4,
                            3
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 4, 3)\nput(board, 'nut', 'blue', 4, 4)\nput(board, 'bridge-h', 'green', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 4, 3)",
                                    "put(board, 'nut', 'blue', 4, 4)",
                                    "put(board, 'bridge-h', 'green', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnb(board, ('red', 'blue', 'green'), 4, 3)",
                                "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnb(board, ('red', 'blue', 'green'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\nboard = init_board(8, 8)\nbnb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                "function": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)",
                                "usage": "bnb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnb. Place a red bridge vertically in the 5th row, 4th column. Place a blue nut in the 5th row, 5th column. Place a green bridge horizontally in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnb. place a red bridge vertically in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnb. Place a red bridge vertically in the 5th row, 4th column. Place a blue nut in the 5th row, 5th column. Place a green bridge horizontally in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\nboard = init_board(8, 8)\nbnb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "function": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)",
                                            "usage": "bnb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 4th column. Put a blue nut in the 5th row, 5th column. Stack a green horizontal bridge on top of the upper half of the red bridge and the nut.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnb(board, ('red', 'blue', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 4th column. Put a blue nut in the 5th row, 5th column. Stack a green horizontal bridge on top of the upper half of the red bridge and the nut.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\nboard = init_board(8, 8)\nbnb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "function": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)",
                                            "usage": "bnb(board, ['red', 'blue', 'green'], [4, 4, 4], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "x": [
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            2,
                            1
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'green', 4, 1)\nput(board, 'nut', 'yellow', 4, 2)\nput(board, 'bridge-h', 'red', 4, 1)",
                                "output": [
                                    "put(board, 'bridge-v', 'green', 4, 1)",
                                    "put(board, 'nut', 'yellow', 4, 2)",
                                    "put(board, 'bridge-h', 'red', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnb(board, ('green', 'yellow', 'red'), 4, 1)",
                                "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnb(board, ('green', 'yellow', 'red'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'yellow', x=4, y=2)\n    put(board, 'bridge-h', 'red', x=4, y=1)\nboard = init_board(8, 8)\nbnb(board, ['green', 'yellow', 'red'], [4, 4, 4], [1, 2, 1])",
                                "function": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'yellow', x=4, y=2)\n    put(board, 'bridge-h', 'red', x=4, y=1)",
                                "usage": "bnb(board, ['green', 'yellow', 'red'], [4, 4, 4], [1, 2, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnb. Place a green bridge vertically in the 5th row, 2nd column. Place a yellow nut in the 5th row, 3rd column. Place a red bridge horizontally in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnb(board, ('green', 'yellow', 'red'), 4, 1)",
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnb(board, ('green', 'yellow', 'red'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnb. place a green bridge vertically in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnb. Place a green bridge vertically in the 5th row, 2nd column. Place a yellow nut in the 5th row, 3rd column. Place a red bridge horizontally in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'yellow', x=4, y=2)\n    put(board, 'bridge-h', 'red', x=4, y=1)\nboard = init_board(8, 8)\nbnb(board, ['green', 'yellow', 'red'], [4, 4, 4], [1, 2, 1])",
                                            "function": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'yellow', x=4, y=2)\n    put(board, 'bridge-h', 'red', x=4, y=1)",
                                            "usage": "bnb(board, ['green', 'yellow', 'red'], [4, 4, 4], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a yellow nut in the 5th row, 3rd column. Place a green vertical bridge on the left side of the nut. Stack a red horizontal bridge on top of the upper part of the green bridge and on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnb(board, ('green', 'yellow', 'red'), 4, 1)",
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnb(board, ('green', 'yellow', 'red'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a yellow nut in the 5th row, 3rd column. Place a green vertical bridge on the left side of the nut. Stack a red horizontal bridge on top of the upper part of the green bridge and on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'yellow', x=4, y=2)\n    put(board, 'bridge-h', 'red', x=4, y=1)\nboard = init_board(8, 8)\nbnb(board, ['green', 'yellow', 'red'], [4, 4, 4], [1, 2, 1])",
                                            "function": "def bnb(board, colors, x, y):\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'yellow', x=4, y=2)\n    put(board, 'bridge-h', 'red', x=4, y=1)",
                                            "usage": "bnb(board, ['green', 'yellow', 'red'], [4, 4, 4], [1, 2, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbb": [
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "x": [
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            3
                        ],
                        "orientations": [
                            "vertical",
                            "horizontal",
                            "horizontal"
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 3)\nput(board, 'bridge-h', 'blue', 6, 4)\nput(board, 'bridge-h', 'yellow', 6, 3)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 3)",
                                    "put(board, 'bridge-h', 'blue', 6, 4)",
                                    "put(board, 'bridge-h', 'yellow', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbb(board, ('red', 'blue', 'yellow'), 6, 3)",
                                "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbb(board, ('red', 'blue', 'yellow'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'yellow', x=6, y=3)\nboard = init_board(8, 8)\nbbb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [3, 4, 3])",
                                "function": "def bbb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'yellow', x=6, y=3)",
                                "usage": "bbb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [3, 4, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/threeshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/threeshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbb. Place a red bridge vertically in the 7th row, 4th column. Place a blue bridge horizontally in the 7th row, 5th column. Place a yellow bridge horizontally in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbb(board, ('red', 'blue', 'yellow'), 6, 3)",
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbb(board, ('red', 'blue', 'yellow'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbb. place a red bridge vertically in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'yellow', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbb. Place a red bridge vertically in the 7th row, 4th column. Place a blue bridge horizontally in the 7th row, 5th column. Place a yellow bridge horizontally in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'yellow', x=6, y=3)\nboard = init_board(8, 8)\nbbb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [3, 4, 3])",
                                            "function": "def bbb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'yellow', x=6, y=3)",
                                            "usage": "bbb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Put a blue horizontal bridge in the 7th row, 5th column. Stack a yellow horizontal bridge on top of the upper part of the red bridge and the left part of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbb(board, ('red', 'blue', 'yellow'), 6, 3)",
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbb(board, ('red', 'blue', 'yellow'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Put a blue horizontal bridge in the 7th row, 5th column. Stack a yellow horizontal bridge on top of the upper part of the red bridge and the left part of the blue bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'yellow', x=6, y=3)\nboard = init_board(8, 8)\nbbb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [3, 4, 3])",
                                            "function": "def bbb(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'yellow', x=6, y=3)",
                                            "usage": "bbb(board, ['red', 'blue', 'yellow'], [6, 6, 6], [3, 4, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "4": {
                "wwbn": [
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 2)\nput(board, 'washer', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'nut', 'blue', 5, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 2)",
                                    "put(board, 'washer', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'nut', 'blue', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbn(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwbn(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\nboard = init_board(8, 8)\nwwbn(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)",
                                "usage": "wwbn(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbn. Place a red washer in the 6th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a blue nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbn(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbn(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwbn. place a red washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbn. Place a red washer in the 6th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a blue nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\nboard = init_board(8, 8)\nwwbn(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)",
                                            "usage": "wwbn(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put two washers in the 6th row, 3rd and 4th column. The left one is red, and the right one is blue. Stack a green horizontal bridge on top of the two washers. Place a blue nut on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbn(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbn(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put two washers in the 6th row, 3rd and 4th column. The left one is red, and the right one is blue. Stack a green horizontal bridge on top of the two washers. Place a blue nut on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\nboard = init_board(8, 8)\nwwbn(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)",
                                            "usage": "wwbn(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 1)\nput(board, 'washer', 'blue', 6, 2)\nput(board, 'bridge-h', 'green', 6, 1)\nput(board, 'nut', 'red', 6, 1)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 1)",
                                    "put(board, 'washer', 'blue', 6, 2)",
                                    "put(board, 'bridge-h', 'green', 6, 1)",
                                    "put(board, 'nut', 'red', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\nboard = init_board(8, 8)\nwwbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "function": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)",
                                "usage": "wwbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbn. Place a red washer in the 7th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a red nut in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwbn. place a red washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbn. Place a red washer in the 7th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a red nut in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\nboard = init_board(8, 8)\nwwbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)",
                                            "usage": "wwbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 2nd column. Position a blue washer next to it on the right. Stack a green horizontal bridge on top of the two washers. Stack a red nut on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 7th row, 2nd column. Position a blue washer next to it on the right. Stack a green horizontal bridge on top of the two washers. Stack a red nut on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\nboard = init_board(8, 8)\nwwbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def wwbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)",
                                            "usage": "wwbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbs": [
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 7, 0)\nput(board, 'washer', 'blue', 7, 1)\nput(board, 'bridge-h', 'green', 7, 0)\nput(board, 'screw', 'yellow', 7, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 7, 0)",
                                    "put(board, 'washer', 'blue', 7, 1)",
                                    "put(board, 'bridge-h', 'green', 7, 0)",
                                    "put(board, 'screw', 'yellow', 7, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                "function": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                "usage": "wwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbs. Place a red washer in the 8th row, 1st column. Place a blue washer in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwbs. place a red washer in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 7, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbs. Place a red washer in the 8th row, 1st column. Place a blue washer in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "function": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                            "usage": "wwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the bottom left corner. Put a blue washer next to it on the right side. Stack a green horizontal bridge on top of the two washers. Place a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the bottom left corner. Put a blue washer next to it on the right side. Stack a green horizontal bridge on top of the two washers. Place a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "function": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                            "usage": "wwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 2)\nput(board, 'washer', 'blue', 6, 3)\nput(board, 'bridge-h', 'green', 6, 2)\nput(board, 'screw', 'blue', 6, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 2)",
                                    "put(board, 'washer', 'blue', 6, 3)",
                                    "put(board, 'bridge-h', 'green', 6, 2)",
                                    "put(board, 'screw', 'blue', 6, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbs(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwbs(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nwwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                "function": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                "usage": "wwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbs. Place a red washer in the 7th row, 3rd column. Place a blue washer in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a blue screw in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbs(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbs(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwbs. place a red washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 6, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbs. Place a red washer in the 7th row, 3rd column. Place a blue washer in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a blue screw in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nwwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "function": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                            "usage": "wwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 7th row, 3rd column. Place a blue washer to the right of it. Stack a green bridge horizontally on top of the two washers. Place a blue screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbs(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbs(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 7th row, 3rd column. Place a blue washer to the right of it. Stack a green bridge horizontally on top of the two washers. Place a blue screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nwwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "function": "def wwbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                            "usage": "wwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbw": [
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 2)\nput(board, 'nut', 'blue', 6, 3)\nput(board, 'bridge-h', 'green', 6, 2)\nput(board, 'washer', 'blue', 6, 3)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 2)",
                                    "put(board, 'nut', 'blue', 6, 3)",
                                    "put(board, 'bridge-h', 'green', 6, 2)",
                                    "put(board, 'washer', 'blue', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbw(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbw(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nwnbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 3])",
                                "function": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)",
                                "usage": "wnbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbw. Place a red washer in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a blue washer in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbw(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbw(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbw. place a red washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbw. Place a red washer in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a blue washer in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nwnbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 3])",
                                            "function": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)",
                                            "usage": "wnbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 7th row, 3rd column. Place a blue nut to the right of the washer in column 4. Stack a green horizontal bridge on top of the two other objects. Place a blue washer on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbw(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbw(board, ('red', 'blue', 'green', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 7th row, 3rd column. Place a blue nut to the right of the washer in column 4. Stack a green horizontal bridge on top of the two other objects. Place a blue washer on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nwnbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 3])",
                                            "function": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)",
                                            "usage": "wnbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [2, 3, 2, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 0)\nput(board, 'nut', 'blue', 4, 1)\nput(board, 'bridge-h', 'green', 4, 0)\nput(board, 'washer', 'red', 4, 1)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 0)",
                                    "put(board, 'nut', 'blue', 4, 1)",
                                    "put(board, 'bridge-h', 'green', 4, 0)",
                                    "put(board, 'washer', 'red', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbw(board, ('red', 'blue', 'green', 'red'), 4, 0)",
                                "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbw(board, ('red', 'blue', 'green', 'red'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'red', x=4, y=1)\nboard = init_board(8, 8)\nwnbw(board, ['red', 'blue', 'green', 'red'], [4, 4, 4, 4], [0, 1, 0, 1])",
                                "function": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'red', x=4, y=1)",
                                "usage": "wnbw(board, ['red', 'blue', 'green', 'red'], [4, 4, 4, 4], [0, 1, 0, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbw. Place a red washer in the 5th row, 1st column. Place a blue nut in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red washer in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbw(board, ('red', 'blue', 'green', 'red'), 4, 0)",
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbw(board, ('red', 'blue', 'green', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbw. place a red washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbw. Place a red washer in the 5th row, 1st column. Place a blue nut in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red washer in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'red', x=4, y=1)\nboard = init_board(8, 8)\nwnbw(board, ['red', 'blue', 'green', 'red'], [4, 4, 4, 4], [0, 1, 0, 1])",
                                            "function": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'red', x=4, y=1)",
                                            "usage": "wnbw(board, ['red', 'blue', 'green', 'red'], [4, 4, 4, 4], [0, 1, 0, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 5th row, first column. Add a blue nut next to it on the right. Stack a green horizontal bridge on top of the washer and the nut. Stack a red washer on top of the right side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbw(board, ('red', 'blue', 'green', 'red'), 4, 0)",
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbw(board, ('red', 'blue', 'green', 'red'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 5th row, first column. Add a blue nut next to it on the right. Stack a green horizontal bridge on top of the washer and the nut. Stack a red washer on top of the right side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'red', x=4, y=1)\nboard = init_board(8, 8)\nwnbw(board, ['red', 'blue', 'green', 'red'], [4, 4, 4, 4], [0, 1, 0, 1])",
                                            "function": "def wnbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'red', x=4, y=1)",
                                            "usage": "wnbw(board, ['red', 'blue', 'green', 'red'], [4, 4, 4, 4], [0, 1, 0, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbn": [
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 2)\nput(board, 'nut', 'blue', 6, 3)\nput(board, 'bridge-h', 'green', 6, 2)\nput(board, 'nut', 'yellow', 6, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 2)",
                                    "put(board, 'nut', 'blue', 6, 3)",
                                    "put(board, 'bridge-h', 'green', 6, 2)",
                                    "put(board, 'nut', 'yellow', 6, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbn(board, ('red', 'blue', 'green', 'yellow'), 6, 2)",
                                "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbn(board, ('red', 'blue', 'green', 'yellow'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'yellow', x=6, y=2)\nboard = init_board(8, 8)\nwnbn(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                "function": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'yellow', x=6, y=2)",
                                "usage": "wnbn(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbn. Place a red washer in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a yellow nut in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbn(board, ('red', 'blue', 'green', 'yellow'), 6, 2)",
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbn(board, ('red', 'blue', 'green', 'yellow'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbn. place a red washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 6, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbn. Place a red washer in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a yellow nut in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'yellow', x=6, y=2)\nboard = init_board(8, 8)\nwnbn(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "function": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'yellow', x=6, y=2)",
                                            "usage": "wnbn(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 7th row, 3rd column. Add a blue nut to the right of it. Stack a green horizontal bridge on top of the two other objects. Place a yellow nut on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbn(board, ('red', 'blue', 'green', 'yellow'), 6, 2)",
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbn(board, ('red', 'blue', 'green', 'yellow'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 7th row, 3rd column. Add a blue nut to the right of it. Stack a green horizontal bridge on top of the two other objects. Place a yellow nut on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'yellow', x=6, y=2)\nboard = init_board(8, 8)\nwnbn(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "function": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'yellow', x=6, y=2)",
                                            "usage": "wnbn(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 7, 1)\nput(board, 'nut', 'blue', 7, 2)\nput(board, 'bridge-h', 'green', 7, 1)\nput(board, 'nut', 'blue', 7, 1)",
                                "output": [
                                    "put(board, 'washer', 'red', 7, 1)",
                                    "put(board, 'nut', 'blue', 7, 2)",
                                    "put(board, 'bridge-h', 'green', 7, 1)",
                                    "put(board, 'nut', 'blue', 7, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbn(board, ('red', 'blue', 'green', 'blue'), 7, 1)",
                                "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbn(board, ('red', 'blue', 'green', 'blue'), 7, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=1)\nboard = init_board(8, 8)\nwnbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                "function": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=1)",
                                "usage": "wnbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbn. Place a red washer in the 8th row, 2nd column. Place a blue nut in the 8th row, 3rd column. Place a green bridge horizontally in the 8th row, 2nd column. Place a blue nut in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbn(board, ('red', 'blue', 'green', 'blue'), 7, 1)",
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbn(board, ('red', 'blue', 'green', 'blue'), 7, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbn. place a red washer in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbn. Place a red washer in the 8th row, 2nd column. Place a blue nut in the 8th row, 3rd column. Place a green bridge horizontally in the 8th row, 2nd column. Place a blue nut in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=1)\nboard = init_board(8, 8)\nwnbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "function": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=1)",
                                            "usage": "wnbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the last row, 2nd column. Position a blue nut in the same row, 3rd column. Stack a green horizontal bridge on top of the two objects. Place another blue nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbn(board, ('red', 'blue', 'green', 'blue'), 7, 1)",
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbn(board, ('red', 'blue', 'green', 'blue'), 7, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the last row, 2nd column. Position a blue nut in the same row, 3rd column. Stack a green horizontal bridge on top of the two objects. Place another blue nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=1)\nboard = init_board(8, 8)\nwnbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "function": "def wnbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'nut', 'blue', x=7, y=1)",
                                            "usage": "wnbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbs": [
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 1)\nput(board, 'nut', 'blue', 4, 2)\nput(board, 'bridge-h', 'green', 4, 1)\nput(board, 'screw', 'blue', 4, 1)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 1)",
                                    "put(board, 'nut', 'blue', 4, 2)",
                                    "put(board, 'bridge-h', 'green', 4, 1)",
                                    "put(board, 'screw', 'blue', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbs(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbs(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nwnbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                "function": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)",
                                "usage": "wnbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbs. Place a red washer in the 5th row, 2nd column. Place a blue nut in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a blue screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbs(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbs(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbs. place a red washer in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbs. Place a red washer in the 5th row, 2nd column. Place a blue nut in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a blue screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nwnbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "function": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)",
                                            "usage": "wnbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 5th row, 2nd column. Place a blue nut next to it in column 3. Stack a green horizontal bridge on top of the washer and the nut. Put a blue screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbs(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbs(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in the 5th row, 2nd column. Place a blue nut next to it in column 3. Stack a green horizontal bridge on top of the washer and the nut. Put a blue screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nwnbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "function": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)",
                                            "usage": "wnbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 7, 0)\nput(board, 'nut', 'blue', 7, 1)\nput(board, 'bridge-h', 'green', 7, 0)\nput(board, 'screw', 'yellow', 7, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 7, 0)",
                                    "put(board, 'nut', 'blue', 7, 1)",
                                    "put(board, 'bridge-h', 'green', 7, 0)",
                                    "put(board, 'screw', 'yellow', 7, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwnbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                "function": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                "usage": "wnbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbs. Place a red washer in the 8th row, 1st column. Place a blue nut in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbs. place a red washer in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 7, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbs. Place a red washer in the 8th row, 1st column. Place a blue nut in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwnbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "function": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                            "usage": "wnbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the bottom left corner. Put a blue nut next to it in column 2. Stack a green horizontal bridge on top of the washer and the nut. Place a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbs(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the bottom left corner. Put a blue nut next to it in column 2. Stack a green horizontal bridge on top of the washer and the nut. Place a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwnbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "function": "def wnbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                            "usage": "wnbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbw": [
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            3
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 7, 2)\nput(board, 'bridge-h', 'blue', 7, 3)\nput(board, 'bridge-h', 'green', 7, 2)\nput(board, 'washer', 'yellow', 7, 3)",
                                "output": [
                                    "put(board, 'washer', 'red', 7, 2)",
                                    "put(board, 'bridge-h', 'blue', 7, 3)",
                                    "put(board, 'bridge-h', 'green', 7, 2)",
                                    "put(board, 'washer', 'yellow', 7, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbw(board, ('red', 'blue', 'green', 'yellow'), 7, 2)",
                                "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbw(board, ('red', 'blue', 'green', 'yellow'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'yellow', x=7, y=3)\nboard = init_board(8, 8)\nwbbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                "function": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'yellow', x=7, y=3)",
                                "usage": "wbbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbw. Place a red washer in the 8th row, 3rd column. Place a blue bridge horizontally in the 8th row, 4th column. Place a green bridge horizontally in the 8th row, 3rd column. Place a yellow washer in the 8th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbw(board, ('red', 'blue', 'green', 'yellow'), 7, 2)",
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbw(board, ('red', 'blue', 'green', 'yellow'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbw. place a red washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 7, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 7, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbw. Place a red washer in the 8th row, 3rd column. Place a blue bridge horizontally in the 8th row, 4th column. Place a green bridge horizontally in the 8th row, 3rd column. Place a yellow washer in the 8th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'yellow', x=7, y=3)\nboard = init_board(8, 8)\nwbbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "function": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'yellow', x=7, y=3)",
                                            "usage": "wbbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the last row, 3rd column. Add a blue horizontal bridge to the right of the washer. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge. Place a yellow washer on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbw(board, ('red', 'blue', 'green', 'yellow'), 7, 2)",
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbw(board, ('red', 'blue', 'green', 'yellow'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the last row, 3rd column. Add a blue horizontal bridge to the right of the washer. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge. Place a yellow washer on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'yellow', x=7, y=3)\nboard = init_board(8, 8)\nwbbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "function": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'yellow', x=7, y=3)",
                                            "usage": "wbbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            2
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 1)\nput(board, 'bridge-h', 'blue', 4, 2)\nput(board, 'bridge-h', 'green', 4, 1)\nput(board, 'washer', 'blue', 4, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 1)",
                                    "put(board, 'bridge-h', 'blue', 4, 2)",
                                    "put(board, 'bridge-h', 'green', 4, 1)",
                                    "put(board, 'washer', 'blue', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbw(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbw(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nwbbw(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 2])",
                                "function": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)",
                                "usage": "wbbw(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbw. Place a red washer in the 5th row, 2nd column. Place a blue bridge horizontally in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a blue washer in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbw(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbw(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbw. place a red washer in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbw. Place a red washer in the 5th row, 2nd column. Place a blue bridge horizontally in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a blue washer in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nwbbw(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 2])",
                                            "function": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)",
                                            "usage": "wbbw(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in row 5, column 2. Position a blue horizontal bridge in the same row, 3rd column. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge. Stack a blue washer on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbw(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbw(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in row 5, column 2. Position a blue horizontal bridge in the same row, 3rd column. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge. Stack a blue washer on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\nboard = init_board(8, 8)\nwbbw(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 2])",
                                            "function": "def wbbw(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)",
                                            "usage": "wbbw(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbn": [
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 2)\nput(board, 'bridge-h', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'nut', 'yellow', 5, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 2)",
                                    "put(board, 'bridge-h', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'nut', 'yellow', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nwbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)",
                                "usage": "wbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbn. Place a red washer in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbn. place a red washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbn. Place a red washer in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nwbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)",
                                            "usage": "wbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 6th row, 3rd column. Now position a blue horizontal bridge next to it in row 6, column 4. Stack a green horizontal bridge on top of the washer and the left side of the bridge. Place a yellow nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 6th row, 3rd column. Now position a blue horizontal bridge next to it in row 6, column 4. Stack a green horizontal bridge on top of the washer and the left side of the bridge. Place a yellow nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nwbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)",
                                            "usage": "wbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 2)\nput(board, 'bridge-h', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'nut', 'red', 5, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 2)",
                                    "put(board, 'bridge-h', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'nut', 'red', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbn(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbn(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\nboard = init_board(8, 8)\nwbbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)",
                                "usage": "wbbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbn. Place a red washer in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbn(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbn(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbn. place a red washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbn. Place a red washer in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\nboard = init_board(8, 8)\nwbbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)",
                                            "usage": "wbbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in row 6, column 3. Add a blue horizontal bridge in the same row, column 4. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge. Now stack a red nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbn(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbn(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red washer in row 6, column 3. Add a blue horizontal bridge in the same row, column 4. Stack a green horizontal bridge on top of the washer and the left side of the blue bridge. Now stack a red nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\nboard = init_board(8, 8)\nwbbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def wbbn(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)",
                                            "usage": "wbbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbs": [
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 3)\nput(board, 'bridge-h', 'blue', 5, 4)\nput(board, 'bridge-h', 'green', 5, 3)\nput(board, 'screw', 'yellow', 5, 3)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 3)",
                                    "put(board, 'bridge-h', 'blue', 5, 4)",
                                    "put(board, 'bridge-h', 'green', 5, 3)",
                                    "put(board, 'screw', 'yellow', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nwbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "function": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                "usage": "wbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbs. Place a red washer in the 6th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbs. place a red washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbs. Place a red washer in the 6th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nwbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "wbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 6th row, 4th column. Place a blue horizontal bridge in the same row, 5th column. Place a green horizontal bridge on top of the washer and the left side of the blue bridge. Stack a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 6th row, 4th column. Place a blue horizontal bridge in the same row, 5th column. Place a green horizontal bridge on top of the washer and the left side of the blue bridge. Stack a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nwbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "wbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 0)\nput(board, 'bridge-h', 'blue', 4, 1)\nput(board, 'bridge-h', 'green', 4, 0)\nput(board, 'screw', 'blue', 4, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 0)",
                                    "put(board, 'bridge-h', 'blue', 4, 1)",
                                    "put(board, 'bridge-h', 'green', 4, 0)",
                                    "put(board, 'screw', 'blue', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbs(board, ('red', 'blue', 'green', 'blue'), 4, 0)",
                                "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbs(board, ('red', 'blue', 'green', 'blue'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)\nboard = init_board(8, 8)\nwbbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                "function": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)",
                                "usage": "wbbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbs. Place a red washer in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a blue screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbs(board, ('red', 'blue', 'green', 'blue'), 4, 0)",
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbs(board, ('red', 'blue', 'green', 'blue'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbs. place a red washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'blue', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbs. Place a red washer in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a blue screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)\nboard = init_board(8, 8)\nwbbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "function": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)",
                                            "usage": "wbbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 5th row, 1st column. Place a blue horizontal bridge in the 5th row, 2nd column. Position a green horizontal bridge on top of the washer and the left side of the blue bridge. Stack a blue screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbs(board, ('red', 'blue', 'green', 'blue'), 4, 0)",
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbs(board, ('red', 'blue', 'green', 'blue'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 5th row, 1st column. Place a blue horizontal bridge in the 5th row, 2nd column. Position a green horizontal bridge on top of the washer and the left side of the blue bridge. Stack a blue screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)\nboard = init_board(8, 8)\nwbbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "function": "def wbbs(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)",
                                            "usage": "wbbs(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbw": [
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 6, 1)\nput(board, 'washer', 'blue', 6, 2)\nput(board, 'bridge-h', 'green', 6, 1)\nput(board, 'washer', 'yellow', 6, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 6, 1)",
                                    "put(board, 'washer', 'blue', 6, 2)",
                                    "put(board, 'bridge-h', 'green', 6, 1)",
                                    "put(board, 'washer', 'yellow', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbw(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbw(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nnwbw(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "function": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'yellow', x=6, y=1)",
                                "usage": "nwbw(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbw. Place a red nut in the 7th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a yellow washer in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbw(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbw(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbw. place a red nut in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbw. Place a red nut in the 7th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a yellow washer in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nnwbw(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'yellow', x=6, y=1)",
                                            "usage": "nwbw(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red nut in the 7th row, 2nd column. Place a blue washer to the right of it. Stack a green bridge horizontally on top of the nut and the washer. Now place another washer on top of the left side of the bridge. Its color is yellow.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbw(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbw(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red nut in the 7th row, 2nd column. Place a blue washer to the right of it. Stack a green bridge horizontally on top of the nut and the washer. Now place another washer on top of the left side of the bridge. Its color is yellow.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nnwbw(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'yellow', x=6, y=1)",
                                            "usage": "nwbw(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 1)\nput(board, 'washer', 'blue', 5, 2)\nput(board, 'bridge-h', 'green', 5, 1)\nput(board, 'washer', 'red', 5, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 1)",
                                    "put(board, 'washer', 'blue', 5, 2)",
                                    "put(board, 'bridge-h', 'green', 5, 1)",
                                    "put(board, 'washer', 'red', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbw(board, ('red', 'blue', 'green', 'red'), 5, 1)",
                                "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbw(board, ('red', 'blue', 'green', 'red'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\nboard = init_board(8, 8)\nnwbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                "function": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)",
                                "usage": "nwbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbw. Place a red nut in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a green bridge horizontally in the 6th row, 2nd column. Place a red washer in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbw(board, ('red', 'blue', 'green', 'red'), 5, 1)",
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbw(board, ('red', 'blue', 'green', 'red'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbw. place a red nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbw. Place a red nut in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a green bridge horizontally in the 6th row, 2nd column. Place a red washer in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\nboard = init_board(8, 8)\nnwbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "function": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)",
                                            "usage": "nwbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 2nd column. Position a blue washer to the right of the nut. Stack a green horizontal bridge on top of the nut and washer. Place a red washer on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbw(board, ('red', 'blue', 'green', 'red'), 5, 1)",
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbw(board, ('red', 'blue', 'green', 'red'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 2nd column. Position a blue washer to the right of the nut. Stack a green horizontal bridge on top of the nut and washer. Place a red washer on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\nboard = init_board(8, 8)\nnwbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "function": "def nwbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)",
                                            "usage": "nwbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbn": [
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            4
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 6, 3)\nput(board, 'washer', 'blue', 6, 4)\nput(board, 'bridge-h', 'green', 6, 3)\nput(board, 'nut', 'blue', 6, 4)",
                                "output": [
                                    "put(board, 'nut', 'red', 6, 3)",
                                    "put(board, 'washer', 'blue', 6, 4)",
                                    "put(board, 'bridge-h', 'green', 6, 3)",
                                    "put(board, 'nut', 'blue', 6, 4)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbn(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbn(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\nboard = init_board(8, 8)\nnwbn(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 4])",
                                "function": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)",
                                "usage": "nwbn(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 4])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbn. Place a red nut in the 7th row, 4th column. Place a blue washer in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue nut in the 7th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbn(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbn(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbn. place a red nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 4)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbn. Place a red nut in the 7th row, 4th column. Place a blue washer in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue nut in the 7th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\nboard = init_board(8, 8)\nnwbn(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 4])",
                                            "function": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)",
                                            "usage": "nwbn(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the 7th row, 4th column. Place a blue washer in the same row, 5th column. Stack a green horizontal bridge on top of the nut and the washer. Finally, stack a blue nut on top of the right side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbn(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbn(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the 7th row, 4th column. Place a blue washer in the same row, 5th column. Stack a green horizontal bridge on top of the nut and the washer. Finally, stack a blue nut on top of the right side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\nboard = init_board(8, 8)\nnwbn(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 4])",
                                            "function": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)",
                                            "usage": "nwbn(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 7, 0)\nput(board, 'washer', 'blue', 7, 1)\nput(board, 'bridge-h', 'green', 7, 0)\nput(board, 'nut', 'yellow', 7, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 7, 0)",
                                    "put(board, 'washer', 'blue', 7, 1)",
                                    "put(board, 'bridge-h', 'green', 7, 0)",
                                    "put(board, 'nut', 'yellow', 7, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbn(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbn(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'yellow', x=7, y=1)\nboard = init_board(8, 8)\nnwbn(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 1])",
                                "function": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'yellow', x=7, y=1)",
                                "usage": "nwbn(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbn. Place a red nut in the 8th row, 1st column. Place a blue washer in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow nut in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbn(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbn(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbn. place a red nut in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 7, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbn. Place a red nut in the 8th row, 1st column. Place a blue washer in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow nut in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'yellow', x=7, y=1)\nboard = init_board(8, 8)\nnwbn(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 1])",
                                            "function": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'yellow', x=7, y=1)",
                                            "usage": "nwbn(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the bottom left corner. Place a blue washer next to it in column 2. Stack a green horizontal bridge on top of the two other objects. Put a yellow nut on top of the right side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbn(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbn(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red nut in the bottom left corner. Place a blue washer next to it in column 2. Stack a green horizontal bridge on top of the two other objects. Put a yellow nut on top of the right side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'yellow', x=7, y=1)\nboard = init_board(8, 8)\nnwbn(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 1])",
                                            "function": "def nwbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'yellow', x=7, y=1)",
                                            "usage": "nwbn(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbs": [
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 7, 1)\nput(board, 'washer', 'blue', 7, 2)\nput(board, 'bridge-h', 'green', 7, 1)\nput(board, 'screw', 'yellow', 7, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 7, 1)",
                                    "put(board, 'washer', 'blue', 7, 2)",
                                    "put(board, 'bridge-h', 'green', 7, 1)",
                                    "put(board, 'screw', 'yellow', 7, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 1)",
                                "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'screw', 'yellow', x=7, y=1)\nboard = init_board(8, 8)\nnwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                "function": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'screw', 'yellow', x=7, y=1)",
                                "usage": "nwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbs. Place a red nut in the 8th row, 2nd column. Place a blue washer in the 8th row, 3rd column. Place a green bridge horizontally in the 8th row, 2nd column. Place a yellow screw in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 1)",
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbs. place a red nut in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 7, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbs. Place a red nut in the 8th row, 2nd column. Place a blue washer in the 8th row, 3rd column. Place a green bridge horizontally in the 8th row, 2nd column. Place a yellow screw in the 8th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'screw', 'yellow', x=7, y=1)\nboard = init_board(8, 8)\nnwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "function": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'screw', 'yellow', x=7, y=1)",
                                            "usage": "nwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the last row, 3rd column. Add a red nut to the left of the washer. Stack a green horizontal bridge on top of the two other objects. Place a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 1)",
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbs(board, ('red', 'blue', 'green', 'yellow'), 7, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the last row, 3rd column. Add a red nut to the left of the washer. Stack a green horizontal bridge on top of the two other objects. Place a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'screw', 'yellow', x=7, y=1)\nboard = init_board(8, 8)\nnwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "function": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=1)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'bridge-h', 'green', x=7, y=1)\n    put(board, 'screw', 'yellow', x=7, y=1)",
                                            "usage": "nwbs(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 6, 3)\nput(board, 'washer', 'blue', 6, 4)\nput(board, 'bridge-h', 'green', 6, 3)\nput(board, 'screw', 'blue', 6, 3)",
                                "output": [
                                    "put(board, 'nut', 'red', 6, 3)",
                                    "put(board, 'washer', 'blue', 6, 4)",
                                    "put(board, 'bridge-h', 'green', 6, 3)",
                                    "put(board, 'screw', 'blue', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nnwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "function": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                "usage": "nwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbs. Place a red nut in the 7th row, 4th column. Place a blue washer in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbs. place a red nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'blue', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbs. Place a red nut in the 7th row, 4th column. Place a blue washer in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nnwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                            "usage": "nwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 7th row, 4th column. Add a blue washer to the right of the nut. Stack a green horizontal bridge on top of the two other objects. Stack a blue screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 7th row, 4th column. Add a blue washer to the right of the nut. Stack a green horizontal bridge on top of the two other objects. Stack a blue screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nnwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def nwbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                            "usage": "nwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbw": [
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 3)\nput(board, 'nut', 'blue', 5, 4)\nput(board, 'bridge-h', 'green', 5, 3)\nput(board, 'washer', 'red', 5, 3)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 3)",
                                    "put(board, 'nut', 'blue', 5, 4)",
                                    "put(board, 'bridge-h', 'green', 5, 3)",
                                    "put(board, 'washer', 'red', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbw(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnbw(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\nboard = init_board(8, 8)\nnnbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "function": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)",
                                "usage": "nnbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbw. Place a red nut in the 6th row, 4th column. Place a blue nut in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a red washer in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbw(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbw(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnbw. place a red nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbw. Place a red nut in the 6th row, 4th column. Place a blue nut in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a red washer in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\nboard = init_board(8, 8)\nnnbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)",
                                            "usage": "nnbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Add a blue nut next to it in column 5. Stack a green horizontal bridge on top of the two nuts. Put a red washer on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbw(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbw(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Add a blue nut next to it in column 5. Stack a green horizontal bridge on top of the two nuts. Put a red washer on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\nboard = init_board(8, 8)\nnnbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)",
                                            "usage": "nnbw(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 7, 0)\nput(board, 'nut', 'blue', 7, 1)\nput(board, 'bridge-h', 'green', 7, 0)\nput(board, 'washer', 'yellow', 7, 0)",
                                "output": [
                                    "put(board, 'nut', 'red', 7, 0)",
                                    "put(board, 'nut', 'blue', 7, 1)",
                                    "put(board, 'bridge-h', 'green', 7, 0)",
                                    "put(board, 'washer', 'yellow', 7, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbw(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnbw(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nnnbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                "function": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=0)",
                                "usage": "nnbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbw. Place a red nut in the 8th row, 1st column. Place a blue nut in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow washer in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbw(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbw(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnbw. place a red nut in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 7, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbw. Place a red nut in the 8th row, 1st column. Place a blue nut in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a yellow washer in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nnnbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "function": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=0)",
                                            "usage": "nnbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the bottom left corner. Position a blue nut next to the red one in column 2. Stack a green horizontal bridge on top of the two nuts. Add a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbw(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbw(board, ('red', 'blue', 'green', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the bottom left corner. Position a blue nut next to the red one in column 2. Stack a green horizontal bridge on top of the two nuts. Add a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nnnbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "function": "def nnbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'nut', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'washer', 'yellow', x=7, y=0)",
                                            "usage": "nnbw(board, ['red', 'blue', 'green', 'yellow'], [7, 7, 7, 7], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbs": [
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 2)\nput(board, 'nut', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'screw', 'red', 5, 2)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 2)",
                                    "put(board, 'nut', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'screw', 'red', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbs(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnbs(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'screw', 'red', x=5, y=2)\nboard = init_board(8, 8)\nnnbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'screw', 'red', x=5, y=2)",
                                "usage": "nnbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbs. Place a red nut in the 6th row, 3rd column. Place a blue nut in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a red screw in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbs(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbs(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnbs. place a red nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red screw in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'red', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbs. Place a red nut in the 6th row, 3rd column. Place a blue nut in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a red screw in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'screw', 'red', x=5, y=2)\nboard = init_board(8, 8)\nnnbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'screw', 'red', x=5, y=2)",
                                            "usage": "nnbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nuts in the 6th row, in column 3 and 4. The left one is red and the right one is blue. Stack a green horizontal bridge on top of the two nuts. Place a red screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbs(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbs(board, ('red', 'blue', 'green', 'red'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two nuts in the 6th row, in column 3 and 4. The left one is red and the right one is blue. Stack a green horizontal bridge on top of the two nuts. Place a red screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'screw', 'red', x=5, y=2)\nboard = init_board(8, 8)\nnnbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'screw', 'red', x=5, y=2)",
                                            "usage": "nnbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 6, 1)\nput(board, 'nut', 'blue', 6, 2)\nput(board, 'bridge-h', 'green', 6, 1)\nput(board, 'screw', 'yellow', 6, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 6, 1)",
                                    "put(board, 'nut', 'blue', 6, 2)",
                                    "put(board, 'bridge-h', 'green', 6, 1)",
                                    "put(board, 'screw', 'yellow', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nnnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "function": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)",
                                "usage": "nnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbs. Place a red nut in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a yellow screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnbs. place a red nut in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbs. Place a red nut in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a yellow screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nnnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)",
                                            "usage": "nnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red and a blue nut in the 7th row, column 2 and 3. Stack a green horizontal bridge on top of them. Position a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red and a blue nut in the 7th row, column 2 and 3. Stack a green horizontal bridge on top of them. Position a yellow screw on top of the left side of the bridge.",
                                        "<Editor>": {
                                            "total_code": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nnnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def nnbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)",
                                            "usage": "nnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbw": [
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 2)\nput(board, 'bridge-h', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'washer', 'blue', 5, 2)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 2)",
                                    "put(board, 'bridge-h', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'washer', 'blue', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbw(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbbw(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=2)\nboard = init_board(8, 8)\nnbbw(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=2)",
                                "usage": "nbbw(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbw. Place a red nut in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a blue washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbw(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbw(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbbw. place a red nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbw. Place a red nut in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a blue washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=2)\nboard = init_board(8, 8)\nnbbw(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=2)",
                                            "usage": "nbbw(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 3rd column. Put a blue horizontal bridge in the 6th row, 4th column. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a blue washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbw(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbw(board, ('red', 'blue', 'green', 'blue'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 3rd column. Put a blue horizontal bridge in the 6th row, 4th column. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a blue washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=2)\nboard = init_board(8, 8)\nnbbw(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=2)",
                                            "usage": "nbbw(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 4, 0)\nput(board, 'bridge-h', 'blue', 4, 1)\nput(board, 'bridge-h', 'green', 4, 0)\nput(board, 'washer', 'yellow', 4, 0)",
                                "output": [
                                    "put(board, 'nut', 'red', 4, 0)",
                                    "put(board, 'bridge-h', 'blue', 4, 1)",
                                    "put(board, 'bridge-h', 'green', 4, 0)",
                                    "put(board, 'washer', 'yellow', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nnbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                "function": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)",
                                "usage": "nbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbw. Place a red nut in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a yellow washer in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbbw. place a red nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbw. Place a red nut in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a yellow washer in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nnbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "function": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)",
                                            "usage": "nbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a blue horizontal bridge in the 5th row, 2nd column. Add a red nut to the left of the bridge in column 1. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Place a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a blue horizontal bridge in the 5th row, 2nd column. Add a red nut to the left of the bridge in column 1. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Place a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nnbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "function": "def nbbw(board, colors, x, y):\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)",
                                            "usage": "nbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbn": [
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            1
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 0)\nput(board, 'bridge-h', 'blue', 5, 1)\nput(board, 'bridge-h', 'green', 5, 0)\nput(board, 'nut', 'yellow', 5, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 0)",
                                    "put(board, 'bridge-h', 'blue', 5, 1)",
                                    "put(board, 'bridge-h', 'green', 5, 0)",
                                    "put(board, 'nut', 'yellow', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 0)",
                                "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nnbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [0, 1, 0, 1])",
                                "function": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'yellow', x=5, y=1)",
                                "usage": "nbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [0, 1, 0, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbn. Place a red nut in the 6th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a yellow nut in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 0)",
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbbn. place a red nut in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbn. Place a red nut in the 6th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a yellow nut in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nnbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [0, 1, 0, 1])",
                                            "function": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'yellow', x=5, y=1)",
                                            "usage": "nbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [0, 1, 0, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 1st column. Add a blue horizontal bridge next to the nut in the 6th row, 2nd column. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a yellow nut on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 0)",
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 1st column. Add a blue horizontal bridge next to the nut in the 6th row, 2nd column. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a yellow nut on top of the right side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nnbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [0, 1, 0, 1])",
                                            "function": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'yellow', x=5, y=1)",
                                            "usage": "nbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [0, 1, 0, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            3
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 7, 2)\nput(board, 'bridge-h', 'blue', 7, 3)\nput(board, 'bridge-h', 'green', 7, 2)\nput(board, 'nut', 'blue', 7, 3)",
                                "output": [
                                    "put(board, 'nut', 'red', 7, 2)",
                                    "put(board, 'bridge-h', 'blue', 7, 3)",
                                    "put(board, 'bridge-h', 'green', 7, 2)",
                                    "put(board, 'nut', 'blue', 7, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbn(board, ('red', 'blue', 'green', 'blue'), 7, 2)",
                                "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbbn(board, ('red', 'blue', 'green', 'blue'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\nboard = init_board(8, 8)\nnbbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                "function": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)",
                                "usage": "nbbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed3_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed3.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbn. Place a red nut in the 8th row, 3rd column. Place a blue bridge horizontally in the 8th row, 4th column. Place a green bridge horizontally in the 8th row, 3rd column. Place a blue nut in the 8th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbn(board, ('red', 'blue', 'green', 'blue'), 7, 2)",
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbn(board, ('red', 'blue', 'green', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbbn. place a red nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 7, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbn. Place a red nut in the 8th row, 3rd column. Place a blue bridge horizontally in the 8th row, 4th column. Place a green bridge horizontally in the 8th row, 3rd column. Place a blue nut in the 8th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\nboard = init_board(8, 8)\nnbbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "function": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)",
                                            "usage": "nbbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 3rd column. Add a blue horizontal bridge to the right of the nut. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a blue nut on top of the right side of the green bridge",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbn(board, ('red', 'blue', 'green', 'blue'), 7, 2)",
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbn(board, ('red', 'blue', 'green', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 3rd column. Add a blue horizontal bridge to the right of the nut. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a blue nut on top of the right side of the green bridge",
                                        "<Editor>": {
                                            "total_code": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\nboard = init_board(8, 8)\nnbbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "function": "def nbbn(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'bridge-h', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)",
                                            "usage": "nbbn(board, ['red', 'blue', 'green', 'blue'], [7, 7, 7, 7], [2, 3, 2, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbs": [
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 3)\nput(board, 'bridge-h', 'blue', 5, 4)\nput(board, 'bridge-h', 'green', 5, 3)\nput(board, 'screw', 'red', 5, 3)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 3)",
                                    "put(board, 'bridge-h', 'blue', 5, 4)",
                                    "put(board, 'bridge-h', 'green', 5, 3)",
                                    "put(board, 'screw', 'red', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbs(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbbs(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'red', x=5, y=3)\nboard = init_board(8, 8)\nnbbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "function": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'red', x=5, y=3)",
                                "usage": "nbbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbs. Place a red nut in the 6th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a red screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbs(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbs(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbbs. place a red nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red screw in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'red', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbs. Place a red nut in the 6th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a red screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'red', x=5, y=3)\nboard = init_board(8, 8)\nnbbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'red', x=5, y=3)",
                                            "usage": "nbbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Add a blue horizontal bridge next to it on the right side. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a red screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbs(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbs(board, ('red', 'blue', 'green', 'red'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Add a blue horizontal bridge next to it on the right side. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a red screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'red', x=5, y=3)\nboard = init_board(8, 8)\nnbbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'red', x=5, y=3)",
                                            "usage": "nbbs(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 3)\nput(board, 'bridge-h', 'blue', 5, 4)\nput(board, 'bridge-h', 'green', 5, 3)\nput(board, 'screw', 'yellow', 5, 3)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 3)",
                                    "put(board, 'bridge-h', 'blue', 5, 4)",
                                    "put(board, 'bridge-h', 'green', 5, 3)",
                                    "put(board, 'screw', 'yellow', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nnbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "function": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                "usage": "nbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbs. Place a red nut in the 6th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbbs. place a red nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbs. Place a red nut in the 6th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nnbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "nbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Put a blue horizontal bridge in the 6th row, 5th column. Add a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbs(board, ('red', 'blue', 'green', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Put a blue horizontal bridge in the 6th row, 5th column. Add a green horizontal bridge on top of the nut and the left side of the blue bridge. Stack a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nnbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "function": "def nbbs(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "nbbs(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwns": [
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            0,
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 7, 0)\nput(board, 'washer', 'blue', 7, 0)\nput(board, 'nut', 'red', 7, 0)\nput(board, 'screw', 'blue', 7, 0)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 7, 0)",
                                    "put(board, 'washer', 'blue', 7, 0)",
                                    "put(board, 'nut', 'red', 7, 0)",
                                    "put(board, 'screw', 'blue', 7, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwns(board, ('red', 'blue', 'red', 'blue'), 7, 0)",
                                "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bwns(board, ('red', 'blue', 'red', 'blue'), 7, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'blue', x=7, y=0)\nboard = init_board(8, 8)\nbwns(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [0, 0, 0, 0])",
                                "function": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'blue', x=7, y=0)",
                                "usage": "bwns(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [0, 0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwns. Place a red bridge horizontally in the 8th row, 1st column. Place a blue washer in the 8th row, 1st column. Place a red nut in the 8th row, 1st column. Place a blue screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwns(board, ('red', 'blue', 'red', 'blue'), 7, 0)",
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwns(board, ('red', 'blue', 'red', 'blue'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwns. place a red bridge horizontally in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'blue', 7, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwns. Place a red bridge horizontally in the 8th row, 1st column. Place a blue washer in the 8th row, 1st column. Place a red nut in the 8th row, 1st column. Place a blue screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'blue', x=7, y=0)\nboard = init_board(8, 8)\nbwns(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [0, 0, 0, 0])",
                                            "function": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'blue', x=7, y=0)",
                                            "usage": "bwns(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [0, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the bottom left corner. Stack a blue washer on top in the bottom left corner. Put a red nut on top of the washer. Finally, add a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwns(board, ('red', 'blue', 'red', 'blue'), 7, 0)",
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwns(board, ('red', 'blue', 'red', 'blue'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the bottom left corner. Stack a blue washer on top in the bottom left corner. Put a red nut on top of the washer. Finally, add a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'blue', x=7, y=0)\nboard = init_board(8, 8)\nbwns(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [0, 0, 0, 0])",
                                            "function": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=0)\n    put(board, 'washer', 'blue', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'blue', x=7, y=0)",
                                            "usage": "bwns(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [0, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            2,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 7, 2)\nput(board, 'washer', 'blue', 7, 2)\nput(board, 'nut', 'red', 7, 2)\nput(board, 'screw', 'green', 7, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 7, 2)",
                                    "put(board, 'washer', 'blue', 7, 2)",
                                    "put(board, 'nut', 'red', 7, 2)",
                                    "put(board, 'screw', 'green', 7, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwns(board, ('red', 'blue', 'red', 'green'), 7, 2)",
                                "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bwns(board, ('red', 'blue', 'red', 'green'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)\nboard = init_board(8, 8)\nbwns(board, ['red', 'blue', 'red', 'green'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                "function": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)",
                                "usage": "bwns(board, ['red', 'blue', 'red', 'green'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwns. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue washer in the 8th row, 3rd column. Place a red nut in the 8th row, 3rd column. Place a green screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwns(board, ('red', 'blue', 'red', 'green'), 7, 2)",
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwns(board, ('red', 'blue', 'red', 'green'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwns. place a red bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'green', 7, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwns. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue washer in the 8th row, 3rd column. Place a red nut in the 8th row, 3rd column. Place a green screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)\nboard = init_board(8, 8)\nbwns(board, ['red', 'blue', 'red', 'green'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "function": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)",
                                            "usage": "bwns(board, ['red', 'blue', 'red', 'green'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the last row, 3rd column. Put a blue washer on top of the left side of the bridge. Stack a red nut on top of the washer. Finally, place a green screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbwns(board, ('red', 'blue', 'red', 'green'), 7, 2)",
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bwns(board, ('red', 'blue', 'red', 'green'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the last row, 3rd column. Put a blue washer on top of the left side of the bridge. Stack a red nut on top of the washer. Finally, place a green screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)\nboard = init_board(8, 8)\nbwns(board, ['red', 'blue', 'red', 'green'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "function": "def bwns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'washer', 'blue', x=7, y=2)\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)",
                                            "usage": "bwns(board, ['red', 'blue', 'red', 'green'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbw": [
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 0)\nput(board, 'washer', 'blue', 6, 1)\nput(board, 'bridge-h', 'green', 6, 0)\nput(board, 'washer', 'blue', 6, 0)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 0)",
                                    "put(board, 'washer', 'blue', 6, 1)",
                                    "put(board, 'bridge-h', 'green', 6, 0)",
                                    "put(board, 'washer', 'blue', 6, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbw(board, ('red', 'blue', 'green', 'blue'), 6, 0)",
                                "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbw(board, ('red', 'blue', 'green', 'blue'), 6, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=0)\nboard = init_board(8, 8)\nbwbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [0, 1, 0, 0])",
                                "function": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=0)",
                                "usage": "bwbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbw. Place a red bridge vertically in the 7th row, 1st column. Place a blue washer in the 7th row, 2nd column. Place a green bridge horizontally in the 7th row, 1st column. Place a blue washer in the 7th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbw(board, ('red', 'blue', 'green', 'blue'), 6, 0)",
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbw(board, ('red', 'blue', 'green', 'blue'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbw. place a red bridge vertically in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbw. Place a red bridge vertically in the 7th row, 1st column. Place a blue washer in the 7th row, 2nd column. Place a green bridge horizontally in the 7th row, 1st column. Place a blue washer in the 7th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=0)\nboard = init_board(8, 8)\nbwbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [0, 1, 0, 0])",
                                            "function": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=0)",
                                            "usage": "bwbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 1st column. Add a blue washer in the 7th row, 2nd column. Stack a green horizontal bridge on top of the upper part of the red bridge and the washer. Stack another blue washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbw(board, ('red', 'blue', 'green', 'blue'), 6, 0)",
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbw(board, ('red', 'blue', 'green', 'blue'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 1st column. Add a blue washer in the 7th row, 2nd column. Stack a green horizontal bridge on top of the upper part of the red bridge and the washer. Stack another blue washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=0)\nboard = init_board(8, 8)\nbwbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [0, 1, 0, 0])",
                                            "function": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-h', 'green', x=6, y=0)\n    put(board, 'washer', 'blue', x=6, y=0)",
                                            "usage": "bwbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 5, 2)\nput(board, 'washer', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'washer', 'yellow', 5, 2)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 5, 2)",
                                    "put(board, 'washer', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'washer', 'yellow', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbwbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)",
                                "usage": "bwbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbw. Place a red bridge vertically in the 6th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbw. place a red bridge vertically in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbw. Place a red bridge vertically in the 6th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbwbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)",
                                            "usage": "bwbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red vertical bridge in the 6th row, 3rd column. Place a blue washer next to it in row 6, column 4. Stack a green horizontal bridge on top of the upper half of the red bridge and on top of the washer. Now place another washer on top of the left side of the green bridge. Its color is yellow.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red vertical bridge in the 6th row, 3rd column. Place a blue washer next to it in row 6, column 4. Stack a green horizontal bridge on top of the upper half of the red bridge and on top of the washer. Now place another washer on top of the left side of the green bridge. Its color is yellow.",
                                        "<Editor>": {
                                            "total_code": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbwbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def bwbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)",
                                            "usage": "bwbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbn": [
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 4, 3)\nput(board, 'washer', 'blue', 4, 4)\nput(board, 'bridge-h', 'green', 4, 3)\nput(board, 'nut', 'yellow', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 4, 3)",
                                    "put(board, 'washer', 'blue', 4, 4)",
                                    "put(board, 'bridge-h', 'green', 4, 3)",
                                    "put(board, 'nut', 'yellow', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbn(board, ('red', 'blue', 'green', 'yellow'), 4, 3)",
                                "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbn(board, ('red', 'blue', 'green', 'yellow'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\n    put(board, 'nut', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbwbn(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [3, 4, 3, 3])",
                                "function": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\n    put(board, 'nut', 'yellow', x=4, y=3)",
                                "usage": "bwbn(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbn. Place a red bridge vertically in the 5th row, 4th column. Place a blue washer in the 5th row, 5th column. Place a green bridge horizontally in the 5th row, 4th column. Place a yellow nut in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbn(board, ('red', 'blue', 'green', 'yellow'), 4, 3)",
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbn(board, ('red', 'blue', 'green', 'yellow'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbn. place a red bridge vertically in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbn. Place a red bridge vertically in the 5th row, 4th column. Place a blue washer in the 5th row, 5th column. Place a green bridge horizontally in the 5th row, 4th column. Place a yellow nut in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\n    put(board, 'nut', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbwbn(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [3, 4, 3, 3])",
                                            "function": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\n    put(board, 'nut', 'yellow', x=4, y=3)",
                                            "usage": "bwbn(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 4th column. Put a blue washer in the 5th row, 5th column. Stack a green horizontal bridge on top of the upper half of the red bridge and the washer. Stack a yellow nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbn(board, ('red', 'blue', 'green', 'yellow'), 4, 3)",
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbn(board, ('red', 'blue', 'green', 'yellow'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 4th column. Put a blue washer in the 5th row, 5th column. Stack a green horizontal bridge on top of the upper half of the red bridge and the washer. Stack a yellow nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\n    put(board, 'nut', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbwbn(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [3, 4, 3, 3])",
                                            "function": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=4)\n    put(board, 'bridge-h', 'green', x=4, y=3)\n    put(board, 'nut', 'yellow', x=4, y=3)",
                                            "usage": "bwbn(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 5, 0)\nput(board, 'washer', 'blue', 5, 1)\nput(board, 'bridge-h', 'green', 5, 0)\nput(board, 'nut', 'red', 5, 0)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 5, 0)",
                                    "put(board, 'washer', 'blue', 5, 1)",
                                    "put(board, 'bridge-h', 'green', 5, 0)",
                                    "put(board, 'nut', 'red', 5, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbn(board, ('red', 'blue', 'green', 'red'), 5, 0)",
                                "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbn(board, ('red', 'blue', 'green', 'red'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'red', x=5, y=0)\nboard = init_board(8, 8)\nbwbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                "function": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'red', x=5, y=0)",
                                "usage": "bwbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbn. Place a red bridge vertically in the 6th row, 1st column. Place a blue washer in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a red nut in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbn(board, ('red', 'blue', 'green', 'red'), 5, 0)",
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbn(board, ('red', 'blue', 'green', 'red'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbn. place a red bridge vertically in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbn. Place a red bridge vertically in the 6th row, 1st column. Place a blue washer in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a red nut in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'red', x=5, y=0)\nboard = init_board(8, 8)\nbwbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "function": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'red', x=5, y=0)",
                                            "usage": "bwbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 1st column. Put a blue washer in the 6th row, 2nd column. Stack a green horizontal bridge on top of the upper side of the red bridge and the blue washer. Stack a red nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbn(board, ('red', 'blue', 'green', 'red'), 5, 0)",
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbn(board, ('red', 'blue', 'green', 'red'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 1st column. Put a blue washer in the 6th row, 2nd column. Stack a green horizontal bridge on top of the upper side of the red bridge and the blue washer. Stack a red nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'red', x=5, y=0)\nboard = init_board(8, 8)\nbwbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "function": "def bwbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'nut', 'red', x=5, y=0)",
                                            "usage": "bwbn(board, ['red', 'blue', 'green', 'red'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbs": [
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 4, 1)\nput(board, 'washer', 'blue', 4, 2)\nput(board, 'bridge-h', 'green', 4, 1)\nput(board, 'screw', 'yellow', 4, 1)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 4, 1)",
                                    "put(board, 'washer', 'blue', 4, 2)",
                                    "put(board, 'bridge-h', 'green', 4, 1)",
                                    "put(board, 'screw', 'yellow', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbs(board, ('red', 'blue', 'green', 'yellow'), 4, 1)",
                                "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbs(board, ('red', 'blue', 'green', 'yellow'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)\nboard = init_board(8, 8)\nbwbs(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                "function": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)",
                                "usage": "bwbs(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbs. Place a red bridge vertically in the 5th row, 2nd column. Place a blue washer in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a yellow screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbs(board, ('red', 'blue', 'green', 'yellow'), 4, 1)",
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbs(board, ('red', 'blue', 'green', 'yellow'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbs. place a red bridge vertically in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbs. Place a red bridge vertically in the 5th row, 2nd column. Place a blue washer in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a yellow screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)\nboard = init_board(8, 8)\nbwbs(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "function": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)",
                                            "usage": "bwbs(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red vertical bridge in the 5th row, 2nd column. Place a blue washer next to the upper part of the bridge on the right. Stack a green horizontal bridge on top of the upper part of the red bridge and the washer. Place a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbs(board, ('red', 'blue', 'green', 'yellow'), 4, 1)",
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbs(board, ('red', 'blue', 'green', 'yellow'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red vertical bridge in the 5th row, 2nd column. Place a blue washer next to the upper part of the bridge on the right. Stack a green horizontal bridge on top of the upper part of the red bridge and the washer. Place a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)\nboard = init_board(8, 8)\nbwbs(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "function": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'screw', 'yellow', x=4, y=1)",
                                            "usage": "bwbs(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 3)\nput(board, 'washer', 'blue', 6, 4)\nput(board, 'bridge-h', 'green', 6, 3)\nput(board, 'screw', 'blue', 6, 3)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 3)",
                                    "put(board, 'washer', 'blue', 6, 4)",
                                    "put(board, 'bridge-h', 'green', 6, 3)",
                                    "put(board, 'screw', 'blue', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "function": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                "usage": "bwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbs. Place a red bridge vertically in the 7th row, 4th column. Place a blue washer in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbs. place a red bridge vertically in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'blue', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbs. Place a red bridge vertically in the 7th row, 4th column. Place a blue washer in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                            "usage": "bwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the 7th row, 5th column. Add a red vertical bridge in the 7th row, 4th column. Stack a green horizontal bridge on top of the upper half of the red bridge and the washer. Put a blue screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbs(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the 7th row, 5th column. Add a red vertical bridge in the 7th row, 4th column. Stack a green horizontal bridge on top of the upper half of the red bridge and the washer. Put a blue screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def bwbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'blue', x=6, y=3)",
                                            "usage": "bwbs(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnws": [
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            2,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 7, 2)\nput(board, 'nut', 'blue', 7, 2)\nput(board, 'washer', 'red', 7, 2)\nput(board, 'screw', 'blue', 7, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 7, 2)",
                                    "put(board, 'nut', 'blue', 7, 2)",
                                    "put(board, 'washer', 'red', 7, 2)",
                                    "put(board, 'screw', 'blue', 7, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnws(board, ('red', 'blue', 'red', 'blue'), 7, 2)",
                                "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bnws(board, ('red', 'blue', 'red', 'blue'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nbnws(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                "function": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)",
                                "usage": "bnws(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnws. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue nut in the 8th row, 3rd column. Place a red washer in the 8th row, 3rd column. Place a blue screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnws(board, ('red', 'blue', 'red', 'blue'), 7, 2)",
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnws(board, ('red', 'blue', 'red', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnws. place a red bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 7, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnws. Place a red bridge horizontally in the 8th row, 3rd column. Place a blue nut in the 8th row, 3rd column. Place a red washer in the 8th row, 3rd column. Place a blue screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nbnws(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "function": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)",
                                            "usage": "bnws(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the last row, 3rd column. Place a blue nut on top of its right side. Stack a red washer on top of the nut. Finally, stack a blue screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnws(board, ('red', 'blue', 'red', 'blue'), 7, 2)",
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnws(board, ('red', 'blue', 'red', 'blue'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the last row, 3rd column. Place a blue nut on top of its right side. Stack a red washer on top of the nut. Finally, stack a blue screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)\nboard = init_board(8, 8)\nbnws(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "function": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'blue', x=7, y=2)",
                                            "usage": "bnws(board, ['red', 'blue', 'red', 'blue'], [7, 7, 7, 7], [2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 2,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 2)\nput(board, 'nut', 'blue', 5, 2)\nput(board, 'washer', 'red', 5, 2)\nput(board, 'screw', 'yellow', 5, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 2)",
                                    "put(board, 'nut', 'blue', 5, 2)",
                                    "put(board, 'washer', 'red', 5, 2)",
                                    "put(board, 'screw', 'yellow', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnws(board, ('red', 'blue', 'red', 'yellow'), 5, 2)",
                                "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                "usage": "bnws(board, ('red', 'blue', 'red', 'yellow'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnws(board, ['red', 'blue', 'red', 'yellow'], [5, 5, 5, 5], [2, 2, 2, 2])",
                                "function": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)",
                                "usage": "bnws(board, ['red', 'blue', 'red', 'yellow'], [5, 5, 5, 5], [2, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnws. Place a red bridge horizontally in the 6th row, 3rd column. Place a blue nut in the 6th row, 3rd column. Place a red washer in the 6th row, 3rd column. Place a yellow screw in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnws(board, ('red', 'blue', 'red', 'yellow'), 5, 2)",
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnws(board, ('red', 'blue', 'red', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnws. place a red bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnws. Place a red bridge horizontally in the 6th row, 3rd column. Place a blue nut in the 6th row, 3rd column. Place a red washer in the 6th row, 3rd column. Place a yellow screw in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnws(board, ['red', 'blue', 'red', 'yellow'], [5, 5, 5, 5], [2, 2, 2, 2])",
                                            "function": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)",
                                            "usage": "bnws(board, ['red', 'blue', 'red', 'yellow'], [5, 5, 5, 5], [2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 3rd column. Stack a blue nut on top of its left side. Now put a red washer on top of the nut. Place a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nbnws(board, ('red', 'blue', 'red', 'yellow'), 5, 2)",
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "usage": "bnws(board, ('red', 'blue', 'red', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 3rd column. Stack a blue nut on top of its left side. Now put a red washer on top of the nut. Place a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnws(board, ['red', 'blue', 'red', 'yellow'], [5, 5, 5, 5], [2, 2, 2, 2])",
                                            "function": "def bnws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'washer', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)",
                                            "usage": "bnws(board, ['red', 'blue', 'red', 'yellow'], [5, 5, 5, 5], [2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbw": [
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 2)\nput(board, 'nut', 'blue', 6, 3)\nput(board, 'bridge-h', 'green', 6, 2)\nput(board, 'washer', 'red', 6, 2)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 2)",
                                    "put(board, 'nut', 'blue', 6, 3)",
                                    "put(board, 'bridge-h', 'green', 6, 2)",
                                    "put(board, 'washer', 'red', 6, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbw(board, ('red', 'blue', 'green', 'red'), 6, 2)",
                                "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbw(board, ('red', 'blue', 'green', 'red'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'red', x=6, y=2)\nboard = init_board(8, 8)\nbnbw(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                "function": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'red', x=6, y=2)",
                                "usage": "bnbw(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbw. Place a red bridge vertically in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a red washer in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbw(board, ('red', 'blue', 'green', 'red'), 6, 2)",
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbw(board, ('red', 'blue', 'green', 'red'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbw. place a red bridge vertically in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbw. Place a red bridge vertically in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a red washer in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'red', x=6, y=2)\nboard = init_board(8, 8)\nbnbw(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "function": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'red', x=6, y=2)",
                                            "usage": "bnbw(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 3rd column. Put a blue nut next to the upper part of the bridge in column 4. Stack a green horizontal bridge on top of the upper part of the red bridge and on top of the nut. Finally, stack a red washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbw(board, ('red', 'blue', 'green', 'red'), 6, 2)",
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbw(board, ('red', 'blue', 'green', 'red'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 3rd column. Put a blue nut next to the upper part of the bridge in column 4. Stack a green horizontal bridge on top of the upper part of the red bridge and on top of the nut. Finally, stack a red washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'red', x=6, y=2)\nboard = init_board(8, 8)\nbnbw(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "function": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'washer', 'red', x=6, y=2)",
                                            "usage": "bnbw(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 5, 2)\nput(board, 'nut', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'washer', 'yellow', 5, 2)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 5, 2)",
                                    "put(board, 'nut', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'washer', 'yellow', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)",
                                "usage": "bnbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbw. Place a red bridge vertically in the 6th row, 3rd column. Place a blue nut in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbw. place a red bridge vertically in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbw. Place a red bridge vertically in the 6th row, 3rd column. Place a blue nut in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)",
                                            "usage": "bnbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 3rd column. Put a blue nut in row 6 as well, in column 4. Stack a green horizontal bridge on top of the upper part of the red bridge and the nut. Place a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbw(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 3rd column. Put a blue nut in row 6 as well, in column 4. Stack a green horizontal bridge on top of the upper part of the red bridge and the nut. Place a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def bnbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'washer', 'yellow', x=5, y=2)",
                                            "usage": "bnbw(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbn": [
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 1)\nput(board, 'nut', 'blue', 6, 2)\nput(board, 'bridge-h', 'green', 6, 1)\nput(board, 'nut', 'red', 6, 1)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 1)",
                                    "put(board, 'nut', 'blue', 6, 2)",
                                    "put(board, 'bridge-h', 'green', 6, 1)",
                                    "put(board, 'nut', 'red', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\nboard = init_board(8, 8)\nbnbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "function": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)",
                                "usage": "bnbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbn. Place a red bridge vertically in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a red nut in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbn. place a red bridge vertically in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbn. Place a red bridge vertically in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a red nut in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\nboard = init_board(8, 8)\nbnbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)",
                                            "usage": "bnbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 2nd column. Place a blue nut next to the upper side of the bridge on the right. Stack a green horizontal bridge on top of the upper part of the red bridge and the nut. Put another nut on top of the left side of the green bridge. It is red.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbn(board, ('red', 'blue', 'green', 'red'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 2nd column. Place a blue nut next to the upper side of the bridge on the right. Stack a green horizontal bridge on top of the upper part of the red bridge and the nut. Put another nut on top of the left side of the green bridge. It is red.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\nboard = init_board(8, 8)\nbnbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)",
                                            "usage": "bnbn(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 5, 1)\nput(board, 'nut', 'blue', 5, 2)\nput(board, 'bridge-h', 'green', 5, 1)\nput(board, 'nut', 'yellow', 5, 1)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 5, 1)",
                                    "put(board, 'nut', 'blue', 5, 2)",
                                    "put(board, 'bridge-h', 'green', 5, 1)",
                                    "put(board, 'nut', 'yellow', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbn(board, ('red', 'blue', 'green', 'yellow'), 5, 1)",
                                "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbn(board, ('red', 'blue', 'green', 'yellow'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbnbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                "function": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'yellow', x=5, y=1)",
                                "usage": "bnbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbn. Place a red bridge vertically in the 6th row, 2nd column. Place a blue nut in the 6th row, 3rd column. Place a green bridge horizontally in the 6th row, 2nd column. Place a yellow nut in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbn(board, ('red', 'blue', 'green', 'yellow'), 5, 1)",
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbn(board, ('red', 'blue', 'green', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbn. place a red bridge vertically in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbn. Place a red bridge vertically in the 6th row, 2nd column. Place a blue nut in the 6th row, 3rd column. Place a green bridge horizontally in the 6th row, 2nd column. Place a yellow nut in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbnbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "function": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'yellow', x=5, y=1)",
                                            "usage": "bnbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 2nd column. Put a blue nut next to the upper part of the bridge in column 3. Stack a green horizontal bridge on top of the upper part of the red bridge and the nut. Stack a yellow nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbn(board, ('red', 'blue', 'green', 'yellow'), 5, 1)",
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbn(board, ('red', 'blue', 'green', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 2nd column. Put a blue nut next to the upper part of the bridge in column 3. Stack a green horizontal bridge on top of the upper part of the red bridge and the nut. Stack a yellow nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbnbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "function": "def bnbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'yellow', x=5, y=1)",
                                            "usage": "bnbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbs": [
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 3)\nput(board, 'nut', 'blue', 6, 4)\nput(board, 'bridge-h', 'green', 6, 3)\nput(board, 'screw', 'red', 6, 3)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 3)",
                                    "put(board, 'nut', 'blue', 6, 4)",
                                    "put(board, 'bridge-h', 'green', 6, 3)",
                                    "put(board, 'screw', 'red', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbs(board, ('red', 'blue', 'green', 'red'), 6, 3)",
                                "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbs(board, ('red', 'blue', 'green', 'red'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)\nboard = init_board(8, 8)\nbnbs(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "function": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)",
                                "usage": "bnbs(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbs. Place a red bridge vertically in the 7th row, 4th column. Place a blue nut in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a red screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbs(board, ('red', 'blue', 'green', 'red'), 6, 3)",
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbs(board, ('red', 'blue', 'green', 'red'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbs. place a red bridge vertically in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red screw in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'red', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbs. Place a red bridge vertically in the 7th row, 4th column. Place a blue nut in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a red screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)\nboard = init_board(8, 8)\nbnbs(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)",
                                            "usage": "bnbs(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Add a blue nut to the right of the upper half of the bridge. Stack a green horizontal bridge on top of the upper half of the red bridge and the blue nut. Now stack a red screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbs(board, ('red', 'blue', 'green', 'red'), 6, 3)",
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbs(board, ('red', 'blue', 'green', 'red'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Add a blue nut to the right of the upper half of the bridge. Stack a green horizontal bridge on top of the upper half of the red bridge and the blue nut. Now stack a red screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)\nboard = init_board(8, 8)\nbnbs(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'screw', 'red', x=6, y=3)",
                                            "usage": "bnbs(board, ['red', 'blue', 'green', 'red'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            "vertical",
                            null,
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 1)\nput(board, 'nut', 'blue', 6, 2)\nput(board, 'bridge-h', 'green', 6, 1)\nput(board, 'screw', 'yellow', 6, 1)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 1)",
                                    "put(board, 'nut', 'blue', 6, 2)",
                                    "put(board, 'bridge-h', 'green', 6, 1)",
                                    "put(board, 'screw', 'yellow', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nbnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "function": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)",
                                "usage": "bnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbs. Place a red bridge vertically in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a yellow screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbs. place a red bridge vertically in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbs. Place a red bridge vertically in the 7th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a yellow screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nbnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)",
                                            "usage": "bnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 2nd column. Position a blue nut in the 7th row, 2rd column. Put a green horizontal bridge on top of the upper half of the red bridge and the nut. Stack a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbs(board, ('red', 'blue', 'green', 'yellow'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 2nd column. Position a blue nut in the 7th row, 2rd column. Put a green horizontal bridge on top of the upper half of the red bridge and the nut. Stack a yellow screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)\nboard = init_board(8, 8)\nbnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "function": "def bnbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'screw', 'yellow', x=6, y=1)",
                                            "usage": "bnbs(board, ['red', 'blue', 'green', 'yellow'], [6, 6, 6, 6], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbw": [
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3
                        ],
                        "orientations": [
                            "vertical",
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 6, 3)\nput(board, 'bridge-h', 'blue', 6, 4)\nput(board, 'bridge-h', 'green', 6, 3)\nput(board, 'washer', 'blue', 6, 3)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 6, 3)",
                                    "put(board, 'bridge-h', 'blue', 6, 4)",
                                    "put(board, 'bridge-h', 'green', 6, 3)",
                                    "put(board, 'washer', 'blue', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbw(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbw(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbbbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "function": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=3)",
                                "usage": "bbbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbw. Place a red bridge vertically in the 7th row, 4th column. Place a blue bridge horizontally in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue washer in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbw(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbw(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbw. place a red bridge vertically in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbw. Place a red bridge vertically in the 7th row, 4th column. Place a blue bridge horizontally in the 7th row, 5th column. Place a green bridge horizontally in the 7th row, 4th column. Place a blue washer in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbbbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=3)",
                                            "usage": "bbbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Put a blue horizontal bridge in the 7th row, 5h column. Stack a green horizontal bridge on top of the upper side of the red bridge and the left side of the blue bridge. Finally, stack a blue washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbw(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbw(board, ('red', 'blue', 'green', 'blue'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 7th row, 4th column. Put a blue horizontal bridge in the 7th row, 5h column. Stack a green horizontal bridge on top of the upper side of the red bridge and the left side of the blue bridge. Finally, stack a blue washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=3)\nboard = init_board(8, 8)\nbbbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "function": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=6, y=3)\n    put(board, 'bridge-h', 'blue', x=6, y=4)\n    put(board, 'bridge-h', 'green', x=6, y=3)\n    put(board, 'washer', 'blue', x=6, y=3)",
                                            "usage": "bbbw(board, ['red', 'blue', 'green', 'blue'], [6, 6, 6, 6], [3, 4, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            "vertical",
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 4, 0)\nput(board, 'bridge-h', 'blue', 4, 1)\nput(board, 'bridge-h', 'green', 4, 0)\nput(board, 'washer', 'yellow', 4, 0)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 4, 0)",
                                    "put(board, 'bridge-h', 'blue', 4, 1)",
                                    "put(board, 'bridge-h', 'green', 4, 0)",
                                    "put(board, 'washer', 'yellow', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nbbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                "function": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)",
                                "usage": "bbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbw. Place a red bridge vertically in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a yellow washer in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbw. place a red bridge vertically in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbw. Place a red bridge vertically in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a yellow washer in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nbbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "function": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)",
                                            "usage": "bbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 1st column. Add a blue horizontal bridge in the 5th row, 2nd column. Stack a green horizontal bridge on top of the upper part of the red bridge and the left side of the blue bridge. Place a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbw(board, ('red', 'blue', 'green', 'yellow'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 1st column. Add a blue horizontal bridge in the 5th row, 2nd column. Stack a green horizontal bridge on top of the upper part of the red bridge and the left side of the blue bridge. Place a yellow washer on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nbbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "function": "def bbbw(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'washer', 'yellow', x=4, y=0)",
                                            "usage": "bbbw(board, ['red', 'blue', 'green', 'yellow'], [4, 4, 4, 4], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbn": [
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1
                        ],
                        "orientations": [
                            "vertical",
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 4, 1)\nput(board, 'bridge-h', 'blue', 4, 2)\nput(board, 'bridge-h', 'green', 4, 1)\nput(board, 'nut', 'blue', 4, 1)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 4, 1)",
                                    "put(board, 'bridge-h', 'blue', 4, 2)",
                                    "put(board, 'bridge-h', 'green', 4, 1)",
                                    "put(board, 'nut', 'blue', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbn(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbn(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nbbbn(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                "function": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=1)",
                                "usage": "bbbn(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbn. Place a red bridge vertically in the 5th row, 2nd column. Place a blue bridge horizontally in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a blue nut in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbn(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbn(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbn. place a red bridge vertically in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbn. Place a red bridge vertically in the 5th row, 2nd column. Place a blue bridge horizontally in the 5th row, 3rd column. Place a green bridge horizontally in the 5th row, 2nd column. Place a blue nut in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nbbbn(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "function": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=1)",
                                            "usage": "bbbn(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 2nd column. Position a blue horizontal bridge in the same row, 3rd column. Stack a green horizontal bridge on top of the other two bridges in the 5th row, 2nd column. Place a blue nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbn(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbn(board, ('red', 'blue', 'green', 'blue'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 5th row, 2nd column. Position a blue horizontal bridge in the same row, 3rd column. Stack a green horizontal bridge on top of the other two bridges in the 5th row, 2nd column. Place a blue nut on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nbbbn(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "function": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=4, y=1)\n    put(board, 'bridge-h', 'blue', x=4, y=2)\n    put(board, 'bridge-h', 'green', x=4, y=1)\n    put(board, 'nut', 'blue', x=4, y=1)",
                                            "usage": "bbbn(board, ['red', 'blue', 'green', 'blue'], [4, 4, 4, 4], [1, 2, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2
                        ],
                        "orientations": [
                            "vertical",
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 5, 2)\nput(board, 'bridge-h', 'blue', 5, 3)\nput(board, 'bridge-h', 'green', 5, 2)\nput(board, 'nut', 'yellow', 5, 2)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 5, 2)",
                                    "put(board, 'bridge-h', 'blue', 5, 3)",
                                    "put(board, 'bridge-h', 'green', 5, 2)",
                                    "put(board, 'nut', 'yellow', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "function": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)",
                                "usage": "bbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbn. Place a red bridge vertically in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbn. place a red bridge vertically in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'yellow', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbn. Place a red bridge vertically in the 6th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge horizontally in the 6th row, 3rd column. Place a yellow nut in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)",
                                            "usage": "bbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue horizontal bridge in the 6th row, 4th column. Add a vertical bridge in color red in the same row, 3rd column. Stack a green horizontal bridge on top of the upper part of the red bridge and the left side of the blue bridge. Put a yellow nut on top of the green bridge in row 6, column 3.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbn(board, ('red', 'blue', 'green', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue horizontal bridge in the 6th row, 4th column. Add a vertical bridge in color red in the same row, 3rd column. Stack a green horizontal bridge on top of the upper part of the red bridge and the left side of the blue bridge. Put a yellow nut on top of the green bridge in row 6, column 3.",
                                        "<Editor>": {
                                            "total_code": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "function": "def bbbn(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-h', 'green', x=5, y=2)\n    put(board, 'nut', 'yellow', x=5, y=2)",
                                            "usage": "bbbn(board, ['red', 'blue', 'green', 'yellow'], [5, 5, 5, 5], [2, 3, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbs": [
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0
                        ],
                        "orientations": [
                            "vertical",
                            "horizontal",
                            "horizontal",
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-v', 'red', 5, 0)\nput(board, 'bridge-h', 'blue', 5, 1)\nput(board, 'bridge-h', 'green', 5, 0)\nput(board, 'screw', 'blue', 5, 0)",
                                "output": [
                                    "put(board, 'bridge-v', 'red', 5, 0)",
                                    "put(board, 'bridge-h', 'blue', 5, 1)",
                                    "put(board, 'bridge-h', 'green', 5, 0)",
                                    "put(board, 'screw', 'blue', 5, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbs(board, ('red', 'blue', 'green', 'blue'), 5, 0)",
                                "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbs(board, ('red', 'blue', 'green', 'blue'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)\nboard = init_board(8, 8)\nbbbs(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                "function": "def bbbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)",
                                "usage": "bbbs(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fourshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fourshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbs. Place a red bridge vertically in the 6th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a blue screw in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbs(board, ('red', 'blue', 'green', 'blue'), 5, 0)",
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbs(board, ('red', 'blue', 'green', 'blue'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbs. place a red bridge vertically in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-v', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'blue', 5, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbs. Place a red bridge vertically in the 6th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a blue screw in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def bbbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)\nboard = init_board(8, 8)\nbbbs(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "function": "def bbbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)",
                                            "usage": "bbbs(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 1st column. Put a blue horizontal bridge in the same row, 2nd column. Stack a green horizontal bridge on top of the top half of the red bridge and the left side of the blue bridge. Place a blue screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbs(board, ('red', 'blue', 'green', 'blue'), 5, 0)",
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbs(board, ('red', 'blue', 'green', 'blue'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red vertical bridge in the 6th row, 1st column. Put a blue horizontal bridge in the same row, 2nd column. Stack a green horizontal bridge on top of the top half of the red bridge and the left side of the blue bridge. Place a blue screw on top of the left side of the green bridge.",
                                        "<Editor>": {
                                            "total_code": "def bbbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)\nboard = init_board(8, 8)\nbbbs(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "function": "def bbbs(board, colors, x, y):\n    put(board, 'bridge-v', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)",
                                            "usage": "bbbs(board, ['red', 'blue', 'green', 'blue'], [5, 5, 5, 5], [0, 1, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "5": {
                "bwbwn": [
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            1,
                            2,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 1)\nput(board, 'washer', 'blue', 5, 2)\nput(board, 'bridge-v', 'green', 4, 2)\nput(board, 'washer', 'red', 4, 2)\nput(board, 'nut', 'green', 4, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 1)",
                                    "put(board, 'washer', 'blue', 5, 2)",
                                    "put(board, 'bridge-v', 'green', 4, 2)",
                                    "put(board, 'washer', 'red', 4, 2)",
                                    "put(board, 'nut', 'green', 4, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 1)",
                                "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-v', 'green', x=4, y=2)\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'green', x=4, y=2)\nboard = init_board(8, 8)\nbwbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [1, 2, 2, 2, 2])",
                                "function": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-v', 'green', x=4, y=2)\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'green', x=4, y=2)",
                                "usage": "bwbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [1, 2, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbwn. Place a red bridge horizontally in the 5th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a green bridge vertically in the 5th row, 3rd column. Place a red washer in the 5th row, 3rd column. Place a green nut in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 1)",
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbwn. place a red bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green nut in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'green', 4, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbwn. Place a red bridge horizontally in the 5th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a green bridge vertically in the 5th row, 3rd column. Place a red washer in the 5th row, 3rd column. Place a green nut in the 5th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-v', 'green', x=4, y=2)\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'green', x=4, y=2)\nboard = init_board(8, 8)\nbwbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [1, 2, 2, 2, 2])",
                                            "function": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-v', 'green', x=4, y=2)\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'green', x=4, y=2)",
                                            "usage": "bwbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the 6th row, 3rd column. Add a red horizontal bridge above in column 2. Stack a green vertical bridge on top of the objects in row 5, column 3. Place a red washer on top of the upper part of the green bridge. Stack a green nut on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 1)",
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the 6th row, 3rd column. Add a red horizontal bridge above in column 2. Stack a green vertical bridge on top of the objects in row 5, column 3. Place a red washer on top of the upper part of the green bridge. Stack a green nut on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-v', 'green', x=4, y=2)\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'green', x=4, y=2)\nboard = init_board(8, 8)\nbwbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [1, 2, 2, 2, 2])",
                                            "function": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-v', 'green', x=4, y=2)\n    put(board, 'washer', 'red', x=4, y=2)\n    put(board, 'nut', 'green', x=4, y=2)",
                                            "usage": "bwbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            2,
                            3,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 2)\nput(board, 'washer', 'blue', 5, 3)\nput(board, 'bridge-v', 'green', 4, 3)\nput(board, 'washer', 'red', 4, 3)\nput(board, 'nut', 'blue', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 2)",
                                    "put(board, 'washer', 'blue', 5, 3)",
                                    "put(board, 'bridge-v', 'green', 4, 3)",
                                    "put(board, 'washer', 'red', 4, 3)",
                                    "put(board, 'nut', 'blue', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbwbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "function": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)",
                                "usage": "bwbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbwn. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red washer in the 5th row, 4th column. Place a blue nut in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbwn. place a red bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbwn. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red washer in the 5th row, 4th column. Place a blue nut in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbwbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)",
                                            "usage": "bwbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 3rd column. Position a blue washer below the right side of the bridge. Stack a green vertical bridge on top of the right side of the bridge and the washer. Stack a red washer on top of the upper part of the green bridge. Place a blue nut on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 3rd column. Position a blue washer below the right side of the bridge. Stack a green vertical bridge on top of the right side of the bridge and the washer. Stack a red washer on top of the upper part of the green bridge. Place a blue nut on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbwbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bwbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'washer', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=4, y=3)",
                                            "usage": "bwbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbws": [
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            6,
                            7,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 6, 0)\nput(board, 'washer', 'blue', 7, 1)\nput(board, 'bridge-v', 'green', 6, 1)\nput(board, 'washer', 'red', 6, 1)\nput(board, 'screw', 'green', 6, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 6, 0)",
                                    "put(board, 'washer', 'blue', 7, 1)",
                                    "put(board, 'bridge-v', 'green', 6, 1)",
                                    "put(board, 'washer', 'red', 6, 1)",
                                    "put(board, 'screw', 'green', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbws(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbws(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'green', x=6, y=1)\nboard = init_board(8, 8)\nbwbws(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                "function": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'green', x=6, y=1)",
                                "usage": "bwbws(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbws. Place a red bridge horizontally in the 7th row, 1st column. Place a blue washer in the 8th row, 2nd column. Place a green bridge vertically in the 7th row, 2nd column. Place a red washer in the 7th row, 2nd column. Place a green screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbws(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbws(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbws. place a red bridge horizontally in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'green', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbws. Place a red bridge horizontally in the 7th row, 1st column. Place a blue washer in the 8th row, 2nd column. Place a green bridge vertically in the 7th row, 2nd column. Place a red washer in the 7th row, 2nd column. Place a green screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'green', x=6, y=1)\nboard = init_board(8, 8)\nbwbws(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "function": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'green', x=6, y=1)",
                                            "usage": "bwbws(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a blue washer in the last row, 2nd column. Place a red horizontal bridge in the row above, 1st column. Position a green vertical bridge on top of the right side of the red bridge and the washer. Stack a red washer on top of the upper part of the green bridge. Add a green screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbws(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbws(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a blue washer in the last row, 2nd column. Place a red horizontal bridge in the row above, 1st column. Position a green vertical bridge on top of the right side of the red bridge and the washer. Stack a red washer on top of the upper part of the green bridge. Add a green screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'green', x=6, y=1)\nboard = init_board(8, 8)\nbwbws(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "function": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'washer', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'green', x=6, y=1)",
                                            "usage": "bwbws(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            6,
                            7,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            2,
                            3,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 6, 2)\nput(board, 'washer', 'blue', 7, 3)\nput(board, 'bridge-v', 'green', 6, 3)\nput(board, 'washer', 'red', 6, 3)\nput(board, 'screw', 'yellow', 6, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 6, 2)",
                                    "put(board, 'washer', 'blue', 7, 3)",
                                    "put(board, 'bridge-v', 'green', 6, 3)",
                                    "put(board, 'washer', 'red', 6, 3)",
                                    "put(board, 'screw', 'yellow', 6, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 2)",
                                "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=7, y=3)\n    put(board, 'bridge-v', 'green', x=6, y=3)\n    put(board, 'washer', 'red', x=6, y=3)\n    put(board, 'screw', 'yellow', x=6, y=3)\nboard = init_board(8, 8)\nbwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [2, 3, 3, 3, 3])",
                                "function": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=7, y=3)\n    put(board, 'bridge-v', 'green', x=6, y=3)\n    put(board, 'washer', 'red', x=6, y=3)\n    put(board, 'screw', 'yellow', x=6, y=3)",
                                "usage": "bwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [2, 3, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbws. Place a red bridge horizontally in the 7th row, 3rd column. Place a blue washer in the 8th row, 4th column. Place a green bridge vertically in the 7th row, 4th column. Place a red washer in the 7th row, 4th column. Place a yellow screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 2)",
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbws. place a red bridge horizontally in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 7, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 6, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbws. Place a red bridge horizontally in the 7th row, 3rd column. Place a blue washer in the 8th row, 4th column. Place a green bridge vertically in the 7th row, 4th column. Place a red washer in the 7th row, 4th column. Place a yellow screw in the 7th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=7, y=3)\n    put(board, 'bridge-v', 'green', x=6, y=3)\n    put(board, 'washer', 'red', x=6, y=3)\n    put(board, 'screw', 'yellow', x=6, y=3)\nboard = init_board(8, 8)\nbwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [2, 3, 3, 3, 3])",
                                            "function": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=7, y=3)\n    put(board, 'bridge-v', 'green', x=6, y=3)\n    put(board, 'washer', 'red', x=6, y=3)\n    put(board, 'screw', 'yellow', x=6, y=3)",
                                            "usage": "bwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a blue washer in the last row, 4th column. Add a red horizontal bridge in the row above, 3rd column. Place a green vertical bridge on top of the right side of the red bridge and the washer. Stack a red washer on top of the upper part of the green bridge. Finally, place a yellow screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 2)",
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a blue washer in the last row, 4th column. Add a red horizontal bridge in the row above, 3rd column. Place a green vertical bridge on top of the right side of the red bridge and the washer. Stack a red washer on top of the upper part of the green bridge. Finally, place a yellow screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=7, y=3)\n    put(board, 'bridge-v', 'green', x=6, y=3)\n    put(board, 'washer', 'red', x=6, y=3)\n    put(board, 'screw', 'yellow', x=6, y=3)\nboard = init_board(8, 8)\nbwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [2, 3, 3, 3, 3])",
                                            "function": "def bwbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=2)\n    put(board, 'washer', 'blue', x=7, y=3)\n    put(board, 'bridge-v', 'green', x=6, y=3)\n    put(board, 'washer', 'red', x=6, y=3)\n    put(board, 'screw', 'yellow', x=6, y=3)",
                                            "usage": "bwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbnw": [
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 2)\nput(board, 'washer', 'blue', 6, 3)\nput(board, 'bridge-v', 'green', 5, 3)\nput(board, 'nut', 'red', 5, 3)\nput(board, 'washer', 'yellow', 5, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 2)",
                                    "put(board, 'washer', 'blue', 6, 3)",
                                    "put(board, 'bridge-v', 'green', 5, 3)",
                                    "put(board, 'nut', 'red', 5, 3)",
                                    "put(board, 'washer', 'yellow', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 2)",
                                "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nbwbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                "function": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'yellow', x=5, y=3)",
                                "usage": "bwbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbnw. Place a red bridge horizontally in the 6th row, 3rd column. Place a blue washer in the 7th row, 4th column. Place a green bridge vertically in the 6th row, 4th column. Place a red nut in the 6th row, 4th column. Place a yellow washer in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 2)",
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbnw. place a red bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbnw. Place a red bridge horizontally in the 6th row, 3rd column. Place a blue washer in the 7th row, 4th column. Place a green bridge vertically in the 6th row, 4th column. Place a red nut in the 6th row, 4th column. Place a yellow washer in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nbwbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "function": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'yellow', x=5, y=3)",
                                            "usage": "bwbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 6th row, 3rd column. Place a blue washer in the 7th row, 4th column. Stack a green vertical bridge on top of the right side of the red bridge and the washer. Place a red nut on top of the upper half of the green bridge. Stack a yellow washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 2)",
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 6th row, 3rd column. Place a blue washer in the 7th row, 4th column. Stack a green vertical bridge on top of the right side of the red bridge and the washer. Place a red nut on top of the upper half of the green bridge. Stack a yellow washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nbwbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "function": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'washer', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'yellow', x=5, y=3)",
                                            "usage": "bwbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 1)\nput(board, 'washer', 'blue', 6, 2)\nput(board, 'bridge-v', 'green', 5, 2)\nput(board, 'nut', 'red', 5, 2)\nput(board, 'washer', 'green', 5, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 1)",
                                    "put(board, 'washer', 'blue', 6, 2)",
                                    "put(board, 'bridge-v', 'green', 5, 2)",
                                    "put(board, 'nut', 'red', 5, 2)",
                                    "put(board, 'washer', 'green', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)\nboard = init_board(8, 8)\nbwbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                "function": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)",
                                "usage": "bwbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbnw. Place a red bridge horizontally in the 6th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge vertically in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column. Place a green washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbnw. place a red bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'green', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbnw. Place a red bridge horizontally in the 6th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge vertically in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column. Place a green washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)\nboard = init_board(8, 8)\nbwbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "function": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)",
                                            "usage": "bwbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 2nd column. Position a blue washer below the right part of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and the blue washer. Place a red nut on top of the upper part of the green bridge. Stack a green washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 2nd column. Position a blue washer below the right part of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and the blue washer. Place a red nut on top of the upper part of the green bridge. Stack a green washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)\nboard = init_board(8, 8)\nbwbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "function": "def bwbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)",
                                            "usage": "bwbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbns": [
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 0)\nput(board, 'washer', 'blue', 6, 1)\nput(board, 'bridge-v', 'green', 5, 1)\nput(board, 'nut', 'red', 5, 1)\nput(board, 'screw', 'blue', 5, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 0)",
                                    "put(board, 'washer', 'blue', 6, 1)",
                                    "put(board, 'bridge-v', 'green', 5, 1)",
                                    "put(board, 'nut', 'red', 5, 1)",
                                    "put(board, 'screw', 'blue', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)\nboard = init_board(8, 8)\nbwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                "function": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)",
                                "usage": "bwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbns. Place a red bridge horizontally in the 6th row, 1st column. Place a blue washer in the 7th row, 2nd column. Place a green bridge vertically in the 6th row, 2nd column. Place a red nut in the 6th row, 2nd column. Place a blue screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbns. place a red bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbns. Place a red bridge horizontally in the 6th row, 1st column. Place a blue washer in the 7th row, 2nd column. Place a green bridge vertically in the 6th row, 2nd column. Place a red nut in the 6th row, 2nd column. Place a blue screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)\nboard = init_board(8, 8)\nbwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "function": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)",
                                            "usage": "bwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 6th row, 1st column. Place a blue washer below the right side of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and on top of the washer. Now stack a red nut on top of the upper part of the green bridge. Place a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 6th row, 1st column. Place a blue washer below the right side of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and on top of the washer. Now stack a red nut on top of the upper part of the green bridge. Place a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)\nboard = init_board(8, 8)\nbwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "function": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'washer', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)",
                                            "usage": "bwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            2,
                            3,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 2)\nput(board, 'washer', 'blue', 5, 3)\nput(board, 'bridge-v', 'green', 4, 3)\nput(board, 'nut', 'red', 4, 3)\nput(board, 'screw', 'yellow', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 2)",
                                    "put(board, 'washer', 'blue', 5, 3)",
                                    "put(board, 'bridge-v', 'green', 4, 3)",
                                    "put(board, 'nut', 'red', 4, 3)",
                                    "put(board, 'screw', 'yellow', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 2)",
                                "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "function": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)",
                                "usage": "bwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbns. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red nut in the 5th row, 4th column. Place a yellow screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 2)",
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bwbns. place a red bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bwbns. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue washer in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red nut in the 5th row, 4th column. Place a yellow screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)",
                                            "usage": "bwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the 6th row, 4th column. Position a red horizontal bridge one row above, in column 3. Stack a green vertical bridge on top of the right side of the red bridge and the washer. Place a red nut on top of the bridges in row 5, column 4. Now stack a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 2)",
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue washer in the 6th row, 4th column. Position a red horizontal bridge one row above, in column 3. Stack a green vertical bridge on top of the right side of the red bridge and the washer. Place a red nut on top of the bridges in row 5, column 4. Now stack a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)\nboard = init_board(8, 8)\nbwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bwbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'washer', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'yellow', x=4, y=3)",
                                            "usage": "bwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbwn": [
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 0)\nput(board, 'nut', 'blue', 5, 1)\nput(board, 'bridge-v', 'green', 4, 1)\nput(board, 'washer', 'red', 4, 1)\nput(board, 'nut', 'green', 4, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 0)",
                                    "put(board, 'nut', 'blue', 5, 1)",
                                    "put(board, 'bridge-v', 'green', 4, 1)",
                                    "put(board, 'washer', 'red', 4, 1)",
                                    "put(board, 'nut', 'green', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)\nboard = init_board(8, 8)\nbnbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                "function": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)",
                                "usage": "bnbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbwn. Place a red bridge horizontally in the 5th row, 1st column. Place a blue nut in the 6th row, 2nd column. Place a green bridge vertically in the 5th row, 2nd column. Place a red washer in the 5th row, 2nd column. Place a green nut in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbwn. place a red bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green nut in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'green', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbwn. Place a red bridge horizontally in the 5th row, 1st column. Place a blue nut in the 6th row, 2nd column. Place a green bridge vertically in the 5th row, 2nd column. Place a red washer in the 5th row, 2nd column. Place a green nut in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)\nboard = init_board(8, 8)\nbnbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "function": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)",
                                            "usage": "bnbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in 5th row, 1st column. Place a blue nut below the right side of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and the blue nut. Stack a red washer on top of the upper side of the green bridge. Finally, stack a green nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in 5th row, 1st column. Place a blue nut below the right side of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and the blue nut. Stack a red washer on top of the upper side of the green bridge. Finally, stack a green nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)\nboard = init_board(8, 8)\nbnbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "function": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)",
                                            "usage": "bnbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            2,
                            3,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 2)\nput(board, 'nut', 'blue', 6, 3)\nput(board, 'bridge-v', 'green', 5, 3)\nput(board, 'washer', 'red', 5, 3)\nput(board, 'nut', 'blue', 5, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 2)",
                                    "put(board, 'nut', 'blue', 6, 3)",
                                    "put(board, 'bridge-v', 'green', 5, 3)",
                                    "put(board, 'washer', 'red', 5, 3)",
                                    "put(board, 'nut', 'blue', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 2)",
                                "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\nboard = init_board(8, 8)\nbnbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                "function": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)",
                                "usage": "bnbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbwn. Place a red bridge horizontally in the 6th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge vertically in the 6th row, 4th column. Place a red washer in the 6th row, 4th column. Place a blue nut in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 2)",
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbwn. place a red bridge horizontally in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbwn. Place a red bridge horizontally in the 6th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge vertically in the 6th row, 4th column. Place a red washer in the 6th row, 4th column. Place a blue nut in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\nboard = init_board(8, 8)\nbnbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "function": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)",
                                            "usage": "bnbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 6th row, 3rd column. Place a blue nut below the right part of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and on top of the nut. Put a red washer on top of the upper half of the green bridge and add a blue nut on top.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 2)",
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 6th row, 3rd column. Place a blue nut below the right part of the bridge. Stack a green vertical bridge on top of the right side of the red bridge and on top of the nut. Put a red washer on top of the upper half of the green bridge and add a blue nut on top.",
                                        "<Editor>": {
                                            "total_code": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)\nboard = init_board(8, 8)\nbnbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "function": "def bnbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-v', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'nut', 'blue', x=5, y=3)",
                                            "usage": "bnbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 6, 5, 5, 5], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbws": [
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            6,
                            7,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            4,
                            4,
                            4
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 6, 3)\nput(board, 'nut', 'blue', 7, 4)\nput(board, 'bridge-v', 'green', 6, 4)\nput(board, 'washer', 'red', 6, 4)\nput(board, 'screw', 'yellow', 6, 4)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 6, 3)",
                                    "put(board, 'nut', 'blue', 7, 4)",
                                    "put(board, 'bridge-v', 'green', 6, 4)",
                                    "put(board, 'washer', 'red', 6, 4)",
                                    "put(board, 'screw', 'yellow', 6, 4)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'washer', 'red', x=6, y=4)\n    put(board, 'screw', 'yellow', x=6, y=4)\nboard = init_board(8, 8)\nbnbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                "function": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'washer', 'red', x=6, y=4)\n    put(board, 'screw', 'yellow', x=6, y=4)",
                                "usage": "bnbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbws. Place a red bridge horizontally in the 7th row, 4th column. Place a blue nut in the 8th row, 5th column. Place a green bridge vertically in the 7th row, 5th column. Place a red washer in the 7th row, 5th column. Place a yellow screw in the 7th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbws. place a red bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 6, 4)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbws. Place a red bridge horizontally in the 7th row, 4th column. Place a blue nut in the 8th row, 5th column. Place a green bridge vertically in the 7th row, 5th column. Place a red washer in the 7th row, 5th column. Place a yellow screw in the 7th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'washer', 'red', x=6, y=4)\n    put(board, 'screw', 'yellow', x=6, y=4)\nboard = init_board(8, 8)\nbnbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "function": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'washer', 'red', x=6, y=4)\n    put(board, 'screw', 'yellow', x=6, y=4)",
                                            "usage": "bnbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 7th row, 4th column. Put a blue nut in the last row, 5th column. Stack a green vertical bridge on top of the right side of the red bridge and the blue nut. Place a red washer on top of the upper half of the green bridge. Put a yellow screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 7th row, 4th column. Put a blue nut in the last row, 5th column. Stack a green vertical bridge on top of the right side of the red bridge and the blue nut. Place a red washer on top of the upper half of the green bridge. Put a yellow screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'washer', 'red', x=6, y=4)\n    put(board, 'screw', 'yellow', x=6, y=4)\nboard = init_board(8, 8)\nbnbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "function": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'washer', 'red', x=6, y=4)\n    put(board, 'screw', 'yellow', x=6, y=4)",
                                            "usage": "bnbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            3,
                            4,
                            4,
                            4,
                            4
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 3)\nput(board, 'nut', 'blue', 5, 4)\nput(board, 'bridge-v', 'green', 4, 4)\nput(board, 'washer', 'red', 4, 4)\nput(board, 'screw', 'blue', 4, 4)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 3)",
                                    "put(board, 'nut', 'blue', 5, 4)",
                                    "put(board, 'bridge-v', 'green', 4, 4)",
                                    "put(board, 'washer', 'red', 4, 4)",
                                    "put(board, 'screw', 'blue', 4, 4)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 3)",
                                "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'blue', x=4, y=4)\nboard = init_board(8, 8)\nbnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                "function": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'blue', x=4, y=4)",
                                "usage": "bnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbws. Place a red bridge horizontally in the 5th row, 4th column. Place a blue nut in the 6th row, 5th column. Place a green bridge vertically in the 5th row, 5th column. Place a red washer in the 5th row, 5th column. Place a blue screw in the 5th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 3)",
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbws. place a red bridge horizontally in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'screw', 'blue', 4, 4)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbws. Place a red bridge horizontally in the 5th row, 4th column. Place a blue nut in the 6th row, 5th column. Place a green bridge vertically in the 5th row, 5th column. Place a red washer in the 5th row, 5th column. Place a blue screw in the 5th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'blue', x=4, y=4)\nboard = init_board(8, 8)\nbnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "function": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'blue', x=4, y=4)",
                                            "usage": "bnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 4th column. Add a blue nut below the right side of the bridge. Stack a green vertical bridge on top of the right side of the birdge and the nut. Put a red washer on top of the upper part of the green bridge. Stack a blue screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 3)",
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 4th column. Add a blue nut below the right side of the bridge. Stack a green vertical bridge on top of the right side of the birdge and the nut. Put a red washer on top of the upper part of the green bridge. Stack a blue screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'blue', x=4, y=4)\nboard = init_board(8, 8)\nbnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "function": "def bnbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'nut', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'blue', x=4, y=4)",
                                            "usage": "bnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbnw": [
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            6,
                            7,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            3,
                            4,
                            4,
                            4,
                            4
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 6, 3)\nput(board, 'nut', 'blue', 7, 4)\nput(board, 'bridge-v', 'green', 6, 4)\nput(board, 'nut', 'red', 6, 4)\nput(board, 'washer', 'yellow', 6, 4)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 6, 3)",
                                    "put(board, 'nut', 'blue', 7, 4)",
                                    "put(board, 'bridge-v', 'green', 6, 4)",
                                    "put(board, 'nut', 'red', 6, 4)",
                                    "put(board, 'washer', 'yellow', 6, 4)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'nut', 'red', x=6, y=4)\n    put(board, 'washer', 'yellow', x=6, y=4)\nboard = init_board(8, 8)\nbnbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                "function": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'nut', 'red', x=6, y=4)\n    put(board, 'washer', 'yellow', x=6, y=4)",
                                "usage": "bnbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbnw. Place a red bridge horizontally in the 7th row, 4th column. Place a blue nut in the 8th row, 5th column. Place a green bridge vertically in the 7th row, 5th column. Place a red nut in the 7th row, 5th column. Place a yellow washer in the 7th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbnw. place a red bridge horizontally in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow washer in the 7th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'yellow', 6, 4)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbnw. Place a red bridge horizontally in the 7th row, 4th column. Place a blue nut in the 8th row, 5th column. Place a green bridge vertically in the 7th row, 5th column. Place a red nut in the 7th row, 5th column. Place a yellow washer in the 7th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'nut', 'red', x=6, y=4)\n    put(board, 'washer', 'yellow', x=6, y=4)\nboard = init_board(8, 8)\nbnbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "function": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'nut', 'red', x=6, y=4)\n    put(board, 'washer', 'yellow', x=6, y=4)",
                                            "usage": "bnbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue nut in the last row, 5th column. Put a red horizontal bridge in the 7th row, 4th column. Stack a green vertical bridge on top of the right side of the red bridge and on top of the blue nut. Now stack a red nut on top of the upper half of the green bridge. Place a yellow washer on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbnw(board, ('red', 'blue', 'green', 'red', 'yellow'), 6, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a blue nut in the last row, 5th column. Put a red horizontal bridge in the 7th row, 4th column. Stack a green vertical bridge on top of the right side of the red bridge and on top of the blue nut. Now stack a red nut on top of the upper half of the green bridge. Place a yellow washer on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'nut', 'red', x=6, y=4)\n    put(board, 'washer', 'yellow', x=6, y=4)\nboard = init_board(8, 8)\nbnbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "function": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=3)\n    put(board, 'nut', 'blue', x=7, y=4)\n    put(board, 'bridge-v', 'green', x=6, y=4)\n    put(board, 'nut', 'red', x=6, y=4)\n    put(board, 'washer', 'yellow', x=6, y=4)",
                                            "usage": "bnbnw(board, ['red', 'blue', 'green', 'red', 'yellow'], [6, 7, 6, 6, 6], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 1)\nput(board, 'nut', 'blue', 6, 2)\nput(board, 'bridge-v', 'green', 5, 2)\nput(board, 'nut', 'red', 5, 2)\nput(board, 'washer', 'green', 5, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 1)",
                                    "put(board, 'nut', 'blue', 6, 2)",
                                    "put(board, 'bridge-v', 'green', 5, 2)",
                                    "put(board, 'nut', 'red', 5, 2)",
                                    "put(board, 'washer', 'green', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)\nboard = init_board(8, 8)\nbnbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                "function": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)",
                                "usage": "bnbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbnw. Place a red bridge horizontally in the 6th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge vertically in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column. Place a green washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbnw. place a red bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'green', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbnw. Place a red bridge horizontally in the 6th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge vertically in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column. Place a green washer in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)\nboard = init_board(8, 8)\nbnbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "function": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)",
                                            "usage": "bnbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in row 6, column 2. Add a blue nut below the right side of the bridge. Now stack a green vertical bridge on top of the nut and the right side of the red bridge. Stack a red nut on top of the upper half of the green bridge. Finally, stack a green washer on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbnw(board, ('red', 'blue', 'green', 'red', 'green'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in row 6, column 2. Add a blue nut below the right side of the bridge. Now stack a green vertical bridge on top of the nut and the right side of the red bridge. Stack a red nut on top of the upper half of the green bridge. Finally, stack a green washer on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)\nboard = init_board(8, 8)\nbnbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "function": "def bnbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'washer', 'green', x=5, y=2)",
                                            "usage": "bnbnw(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbns": [
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 1)\nput(board, 'nut', 'blue', 6, 2)\nput(board, 'bridge-v', 'green', 5, 2)\nput(board, 'nut', 'red', 5, 2)\nput(board, 'screw', 'yellow', 5, 2)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 1)",
                                    "put(board, 'nut', 'blue', 6, 2)",
                                    "put(board, 'bridge-v', 'green', 5, 2)",
                                    "put(board, 'nut', 'red', 5, 2)",
                                    "put(board, 'screw', 'yellow', 5, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 1)",
                                "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                "function": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)",
                                "usage": "bnbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbns. Place a red bridge horizontally in the 6th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge vertically in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column. Place a yellow screw in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 1)",
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbns. place a red bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbns. Place a red bridge horizontally in the 6th row, 2nd column. Place a blue nut in the 7th row, 3rd column. Place a green bridge vertically in the 6th row, 3rd column. Place a red nut in the 6th row, 3rd column. Place a yellow screw in the 6th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "function": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)",
                                            "usage": "bnbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a blue nut in the 7th row, 3rd column. Add a red horizontal bridge on row above, in column 2. Stack a green vertical bridge on top of the right side of the red bridge and on top of the nut. Add another nut in color red on top of the upper half of the green bridge. Finally, stack a yellow screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 1)",
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a blue nut in the 7th row, 3rd column. Add a red horizontal bridge on row above, in column 2. Stack a green vertical bridge on top of the right side of the red bridge and on top of the nut. Add another nut in color red on top of the upper half of the green bridge. Finally, stack a yellow screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)\nboard = init_board(8, 8)\nbnbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "function": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=1)\n    put(board, 'nut', 'blue', x=6, y=2)\n    put(board, 'bridge-v', 'green', x=5, y=2)\n    put(board, 'nut', 'red', x=5, y=2)\n    put(board, 'screw', 'yellow', x=5, y=2)",
                                            "usage": "bnbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [1, 2, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            null,
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 0)\nput(board, 'nut', 'blue', 5, 1)\nput(board, 'bridge-v', 'green', 4, 1)\nput(board, 'nut', 'red', 4, 1)\nput(board, 'screw', 'blue', 4, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 0)",
                                    "put(board, 'nut', 'blue', 5, 1)",
                                    "put(board, 'bridge-v', 'green', 4, 1)",
                                    "put(board, 'nut', 'red', 4, 1)",
                                    "put(board, 'screw', 'blue', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nbnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                "function": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)",
                                "usage": "bnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbns. Place a red bridge horizontally in the 5th row, 1st column. Place a blue nut in the 6th row, 2nd column. Place a green bridge vertically in the 5th row, 2nd column. Place a red nut in the 5th row, 2nd column. Place a blue screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bnbns. place a red bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bnbns. Place a red bridge horizontally in the 5th row, 1st column. Place a blue nut in the 6th row, 2nd column. Place a green bridge vertically in the 5th row, 2nd column. Place a red nut in the 5th row, 2nd column. Place a blue screw in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nbnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "function": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)",
                                            "usage": "bnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 5th row, 1st column. Add a blue nut below the right side of the bridge. Place a green vertical bridge on top of the right side of the red bridge and on top of the nut. Stack a red nut on top of the upper half of the green bridge. Place a blue screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 5th row, 1st column. Add a blue nut below the right side of the bridge. Place a green vertical bridge on top of the right side of the red bridge and on top of the nut. Stack a red nut on top of the upper half of the green bridge. Place a blue screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)\nboard = init_board(8, 8)\nbnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "function": "def bnbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'nut', 'red', x=4, y=1)\n    put(board, 'screw', 'blue', x=4, y=1)",
                                            "usage": "bnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbwn": [
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 0)\nput(board, 'bridge-h', 'blue', 5, 1)\nput(board, 'bridge-v', 'green', 4, 1)\nput(board, 'washer', 'red', 4, 1)\nput(board, 'nut', 'green', 4, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 0)",
                                    "put(board, 'bridge-h', 'blue', 5, 1)",
                                    "put(board, 'bridge-v', 'green', 4, 1)",
                                    "put(board, 'washer', 'red', 4, 1)",
                                    "put(board, 'nut', 'green', 4, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)\nboard = init_board(8, 8)\nbbbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                "function": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)",
                                "usage": "bbbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbwn. Place a red bridge horizontally in the 5th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge vertically in the 5th row, 2nd column. Place a red washer in the 5th row, 2nd column. Place a green nut in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbwn. place a red bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green nut in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'green', 4, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbwn. Place a red bridge horizontally in the 5th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge vertically in the 5th row, 2nd column. Place a red washer in the 5th row, 2nd column. Place a green nut in the 5th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)\nboard = init_board(8, 8)\nbbbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "function": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)",
                                            "usage": "bbbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 1st column. Put another horizontal bridge in the 6th row, 2nd column. Its color is blue. Stack a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Stack a red washer on top of the upper side of the green bridge. Place a green nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbwn(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 1st column. Put another horizontal bridge in the 6th row, 2nd column. Its color is blue. Stack a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Stack a red washer on top of the upper side of the green bridge. Place a green nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)\nboard = init_board(8, 8)\nbbbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "function": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-v', 'green', x=4, y=1)\n    put(board, 'washer', 'red', x=4, y=1)\n    put(board, 'nut', 'green', x=4, y=1)",
                                            "usage": "bbbwn(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            6,
                            7,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 6, 0)\nput(board, 'bridge-h', 'blue', 7, 1)\nput(board, 'bridge-v', 'green', 6, 1)\nput(board, 'washer', 'red', 6, 1)\nput(board, 'nut', 'blue', 6, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 6, 0)",
                                    "put(board, 'bridge-h', 'blue', 7, 1)",
                                    "put(board, 'bridge-v', 'green', 6, 1)",
                                    "put(board, 'washer', 'red', 6, 1)",
                                    "put(board, 'nut', 'blue', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 0)",
                                "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=1)\nboard = init_board(8, 8)\nbbbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                "function": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=1)",
                                "usage": "bbbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbwn. Place a red bridge horizontally in the 7th row, 1st column. Place a blue bridge horizontally in the 8th row, 2nd column. Place a green bridge vertically in the 7th row, 2nd column. Place a red washer in the 7th row, 2nd column. Place a blue nut in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 0)",
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbwn. place a red bridge horizontally in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbwn. Place a red bridge horizontally in the 7th row, 1st column. Place a blue bridge horizontally in the 8th row, 2nd column. Place a green bridge vertically in the 7th row, 2nd column. Place a red washer in the 7th row, 2nd column. Place a blue nut in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=1)\nboard = init_board(8, 8)\nbbbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "function": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=1)",
                                            "usage": "bbbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 7th row, 1st column. Add a blue bridge horizontally one row below, in the 2nd column. Stack a green vertical bridge on top of the bridges in the 7th row, 2nd column. Place a red washer on top of the upper half of the green bridge. Add a blue nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 0)",
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbwn(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 7th row, 1st column. Add a blue bridge horizontally one row below, in the 2nd column. Stack a green vertical bridge on top of the bridges in the 7th row, 2nd column. Place a red washer on top of the upper half of the green bridge. Add a blue nut on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=1)\nboard = init_board(8, 8)\nbbbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "function": "def bbbwn(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'nut', 'blue', x=6, y=1)",
                                            "usage": "bbbwn(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbws": [
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            3,
                            4,
                            4,
                            4,
                            4
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 3)\nput(board, 'bridge-h', 'blue', 5, 4)\nput(board, 'bridge-v', 'green', 4, 4)\nput(board, 'washer', 'red', 4, 4)\nput(board, 'screw', 'green', 4, 4)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 3)",
                                    "put(board, 'bridge-h', 'blue', 5, 4)",
                                    "put(board, 'bridge-v', 'green', 4, 4)",
                                    "put(board, 'washer', 'red', 4, 4)",
                                    "put(board, 'screw', 'green', 4, 4)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbws(board, ('red', 'blue', 'green', 'red', 'green'), 4, 3)",
                                "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbws(board, ('red', 'blue', 'green', 'red', 'green'), 4, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'green', x=4, y=4)\nboard = init_board(8, 8)\nbbbws(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                "function": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'green', x=4, y=4)",
                                "usage": "bbbws(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbws. Place a red bridge horizontally in the 5th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge vertically in the 5th row, 5th column. Place a red washer in the 5th row, 5th column. Place a green screw in the 5th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbws(board, ('red', 'blue', 'green', 'red', 'green'), 4, 3)",
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbws(board, ('red', 'blue', 'green', 'red', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbws. place a red bridge horizontally in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 5th row, 5th column",
                                        "<Editor>": "put(board, 'screw', 'green', 4, 4)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbws. Place a red bridge horizontally in the 5th row, 4th column. Place a blue bridge horizontally in the 6th row, 5th column. Place a green bridge vertically in the 5th row, 5th column. Place a red washer in the 5th row, 5th column. Place a green screw in the 5th row, 5th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'green', x=4, y=4)\nboard = init_board(8, 8)\nbbbws(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "function": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'green', x=4, y=4)",
                                            "usage": "bbbws(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 4th column. Position a blue horizontal bridge below the right side of the red bridge. Stack a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Place a red washer on top of the upper side of the green bridge. Stack a green screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbws(board, ('red', 'blue', 'green', 'red', 'green'), 4, 3)",
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbws(board, ('red', 'blue', 'green', 'red', 'green'), 4, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 4th column. Position a blue horizontal bridge below the right side of the red bridge. Stack a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Place a red washer on top of the upper side of the green bridge. Stack a green screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'green', x=4, y=4)\nboard = init_board(8, 8)\nbbbws(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "function": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=3)\n    put(board, 'bridge-h', 'blue', x=5, y=4)\n    put(board, 'bridge-v', 'green', x=4, y=4)\n    put(board, 'washer', 'red', x=4, y=4)\n    put(board, 'screw', 'green', x=4, y=4)",
                                            "usage": "bbbws(board, ['red', 'blue', 'green', 'red', 'green'], [4, 5, 4, 4, 4], [3, 4, 4, 4, 4])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 0)\nput(board, 'bridge-h', 'blue', 6, 1)\nput(board, 'bridge-v', 'green', 5, 1)\nput(board, 'washer', 'red', 5, 1)\nput(board, 'screw', 'yellow', 5, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 0)",
                                    "put(board, 'bridge-h', 'blue', 6, 1)",
                                    "put(board, 'bridge-v', 'green', 5, 1)",
                                    "put(board, 'washer', 'red', 5, 1)",
                                    "put(board, 'screw', 'yellow', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'screw', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                "function": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'screw', 'yellow', x=5, y=1)",
                                "usage": "bbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbws. Place a red bridge horizontally in the 6th row, 1st column. Place a blue bridge horizontally in the 7th row, 2nd column. Place a green bridge vertically in the 6th row, 2nd column. Place a red washer in the 6th row, 2nd column. Place a yellow screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbws. place a red bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbws. Place a red bridge horizontally in the 6th row, 1st column. Place a blue bridge horizontally in the 7th row, 2nd column. Place a green bridge vertically in the 6th row, 2nd column. Place a red washer in the 6th row, 2nd column. Place a yellow screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'screw', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "function": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'screw', 'yellow', x=5, y=1)",
                                            "usage": "bbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 6th row, 1st column. Place a blue horizontal bridge below the right side of the red bridge. Stack a green bridge vertically on top of the right side of the red bridge and the left side of the blue bridge. Put a red washer on top of the upper half of the green bridge. Stack a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red horizontal bridge in the 6th row, 1st column. Place a blue horizontal bridge below the right side of the red bridge. Stack a green bridge vertically on top of the right side of the red bridge and the left side of the blue bridge. Put a red washer on top of the upper half of the green bridge. Stack a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'screw', 'yellow', x=5, y=1)\nboard = init_board(8, 8)\nbbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "function": "def bbbws(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'screw', 'yellow', x=5, y=1)",
                                            "usage": "bbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbnw": [
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            2,
                            3,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 2)\nput(board, 'bridge-h', 'blue', 5, 3)\nput(board, 'bridge-v', 'green', 4, 3)\nput(board, 'nut', 'red', 4, 3)\nput(board, 'washer', 'blue', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 2)",
                                    "put(board, 'bridge-h', 'blue', 5, 3)",
                                    "put(board, 'bridge-v', 'green', 4, 3)",
                                    "put(board, 'nut', 'red', 4, 3)",
                                    "put(board, 'washer', 'blue', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbnw(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbnw(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbbbnw(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "function": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=3)",
                                "usage": "bbbnw(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbnw. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red nut in the 5th row, 4th column. Place a blue washer in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbnw(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbnw(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbnw. place a red bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbnw. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red nut in the 5th row, 4th column. Place a blue washer in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbbbnw(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=3)",
                                            "usage": "bbbnw(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 3rd column. Position a blue horizontal bridge below the right side of the red bridge. Stack a green vertical bridge on top of the right side of the red bridge and on top of the left side of the blue bridge. Stack a red nut on top of the upper part of the green bridge. Place a blue washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbnw(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbnw(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5th row, 3rd column. Position a blue horizontal bridge below the right side of the red bridge. Stack a green vertical bridge on top of the right side of the red bridge and on top of the left side of the blue bridge. Stack a red nut on top of the upper part of the green bridge. Place a blue washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbbbnw(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'washer', 'blue', x=4, y=3)",
                                            "usage": "bbbnw(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            6,
                            7,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 6, 0)\nput(board, 'bridge-h', 'blue', 7, 1)\nput(board, 'bridge-v', 'green', 6, 1)\nput(board, 'nut', 'red', 6, 1)\nput(board, 'washer', 'green', 6, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 6, 0)",
                                    "put(board, 'bridge-h', 'blue', 7, 1)",
                                    "put(board, 'bridge-v', 'green', 6, 1)",
                                    "put(board, 'nut', 'red', 6, 1)",
                                    "put(board, 'washer', 'green', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbnw(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbnw(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'green', x=6, y=1)\nboard = init_board(8, 8)\nbbbnw(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                "function": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'green', x=6, y=1)",
                                "usage": "bbbnw(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbnw. Place a red bridge horizontally in the 7th row, 1st column. Place a blue bridge horizontally in the 8th row, 2nd column. Place a green bridge vertically in the 7th row, 2nd column. Place a red nut in the 7th row, 2nd column. Place a green washer in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbnw(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbnw(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbnw. place a red bridge horizontally in the 7th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 6, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'green', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbnw. Place a red bridge horizontally in the 7th row, 1st column. Place a blue bridge horizontally in the 8th row, 2nd column. Place a green bridge vertically in the 7th row, 2nd column. Place a red nut in the 7th row, 2nd column. Place a green washer in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'green', x=6, y=1)\nboard = init_board(8, 8)\nbbbnw(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "function": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'green', x=6, y=1)",
                                            "usage": "bbbnw(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 7th row, 1st column. Place a blue horizontal bridge in the last row, 2nd column. Stack a green vertical bridge on top in the 7th row, 2nd column. Place a red nut on top of the upper half of the green bridge. Stack a green washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbnw(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbnw(board, ('red', 'blue', 'green', 'red', 'green'), 6, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a red horizontal bridge in the 7th row, 1st column. Place a blue horizontal bridge in the last row, 2nd column. Stack a green vertical bridge on top in the 7th row, 2nd column. Place a red nut on top of the upper half of the green bridge. Stack a green washer on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'green', x=6, y=1)\nboard = init_board(8, 8)\nbbbnw(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "function": "def bbbnw(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=6, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-v', 'green', x=6, y=1)\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'green', x=6, y=1)",
                                            "usage": "bbbnw(board, ['red', 'blue', 'green', 'red', 'green'], [6, 7, 6, 6, 6], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbns": [
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            5,
                            6,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 5, 0)\nput(board, 'bridge-h', 'blue', 6, 1)\nput(board, 'bridge-v', 'green', 5, 1)\nput(board, 'nut', 'red', 5, 1)\nput(board, 'screw', 'green', 5, 1)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 5, 0)",
                                    "put(board, 'bridge-h', 'blue', 6, 1)",
                                    "put(board, 'bridge-v', 'green', 5, 1)",
                                    "put(board, 'nut', 'red', 5, 1)",
                                    "put(board, 'screw', 'green', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbns(board, ('red', 'blue', 'green', 'red', 'green'), 5, 0)",
                                "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbns(board, ('red', 'blue', 'green', 'red', 'green'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'green', x=5, y=1)\nboard = init_board(8, 8)\nbbbns(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                "function": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'green', x=5, y=1)",
                                "usage": "bbbns(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbns. Place a red bridge horizontally in the 6th row, 1st column. Place a blue bridge horizontally in the 7th row, 2nd column. Place a green bridge vertically in the 6th row, 2nd column. Place a red nut in the 6th row, 2nd column. Place a green screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbns(board, ('red', 'blue', 'green', 'red', 'green'), 5, 0)",
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbns(board, ('red', 'blue', 'green', 'red', 'green'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbns. place a red bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'green', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbns. Place a red bridge horizontally in the 6th row, 1st column. Place a blue bridge horizontally in the 7th row, 2nd column. Place a green bridge vertically in the 6th row, 2nd column. Place a red nut in the 6th row, 2nd column. Place a green screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'green', x=5, y=1)\nboard = init_board(8, 8)\nbbbns(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "function": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'green', x=5, y=1)",
                                            "usage": "bbbns(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 1st column. Put another horizontal bridge in the 7th row, 2nd column. The color is blue. Stack a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Stack a red nut on top of the upper half of the green bridge. Place a green screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbns(board, ('red', 'blue', 'green', 'red', 'green'), 5, 0)",
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbns(board, ('red', 'blue', 'green', 'red', 'green'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 6th row, 1st column. Put another horizontal bridge in the 7th row, 2nd column. The color is blue. Stack a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Stack a red nut on top of the upper half of the green bridge. Place a green screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'green', x=5, y=1)\nboard = init_board(8, 8)\nbbbns(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "function": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=6, y=1)\n    put(board, 'bridge-v', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'green', x=5, y=1)",
                                            "usage": "bbbns(board, ['red', 'blue', 'green', 'red', 'green'], [5, 6, 5, 5, 5], [0, 1, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            5,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            2,
                            3,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            "horizontal",
                            "horizontal",
                            "vertical",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 3,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'bridge-h', 'red', 4, 2)\nput(board, 'bridge-h', 'blue', 5, 3)\nput(board, 'bridge-v', 'green', 4, 3)\nput(board, 'nut', 'red', 4, 3)\nput(board, 'screw', 'blue', 4, 3)",
                                "output": [
                                    "put(board, 'bridge-h', 'red', 4, 2)",
                                    "put(board, 'bridge-h', 'blue', 5, 3)",
                                    "put(board, 'bridge-v', 'green', 4, 3)",
                                    "put(board, 'nut', 'red', 4, 3)",
                                    "put(board, 'screw', 'blue', 4, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "bbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "function": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'blue', x=4, y=3)",
                                "usage": "bbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed1_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed1.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbns. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red nut in the 5th row, 4th column. Place a blue screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build bbbns. place a red bridge horizontally in the 5th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'red', 4, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge vertically in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-v', 'green', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 5th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'blue', 4, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build bbbns. Place a red bridge horizontally in the 5th row, 3rd column. Place a blue bridge horizontally in the 6th row, 4th column. Place a green bridge vertically in the 5th row, 4th column. Place a red nut in the 5th row, 4th column. Place a blue screw in the 5th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'blue', x=4, y=3)",
                                            "usage": "bbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5ht row, 3rd column. Position a blue horizontal bridge below the right side of the red bridge. Place a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Stack a red nut on top of the upper part of the green bridge. Place a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nbbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "bbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red horizontal bridge in the 5ht row, 3rd column. Position a blue horizontal bridge below the right side of the red bridge. Place a green vertical bridge on top of the right side of the red bridge and the left side of the blue bridge. Stack a red nut on top of the upper part of the green bridge. Place a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'blue', x=4, y=3)\nboard = init_board(8, 8)\nbbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "function": "def bbbns(board, colors, x, y):\n    put(board, 'bridge-h', 'red', x=4, y=2)\n    put(board, 'bridge-h', 'blue', x=5, y=3)\n    put(board, 'bridge-v', 'green', x=4, y=3)\n    put(board, 'nut', 'red', x=4, y=3)\n    put(board, 'screw', 'blue', x=4, y=3)",
                                            "usage": "bbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 5, 4, 4, 4], [2, 3, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbns": [
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 0)\nput(board, 'washer', 'blue', 4, 1)\nput(board, 'bridge-h', 'green', 4, 0)\nput(board, 'nut', 'red', 4, 0)\nput(board, 'screw', 'yellow', 4, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 0)",
                                    "put(board, 'washer', 'blue', 4, 1)",
                                    "put(board, 'bridge-h', 'green', 4, 0)",
                                    "put(board, 'nut', 'red', 4, 0)",
                                    "put(board, 'screw', 'yellow', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 0)",
                                "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nwwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                "function": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'yellow', x=4, y=0)",
                                "usage": "wwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbns. Place a red washer in the 5th row, 1st column. Place a blue washer in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red nut in the 5th row, 1st column. Place a yellow screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 0)",
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwbns. place a red washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbns. Place a red washer in the 5th row, 1st column. Place a blue washer in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red nut in the 5th row, 1st column. Place a yellow screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nwwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "function": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'yellow', x=4, y=0)",
                                            "usage": "wwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two washers in the 5th row, 1st and 2nd column. The left one is red and the right washer is blue. Stack a green horizontal bridge on top of the two washers. Add a red nut on top of the green bridge in the 1st column. Stack a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 0)",
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two washers in the 5th row, 1st and 2nd column. The left one is red and the right washer is blue. Stack a green horizontal bridge on top of the two washers. Add a red nut on top of the green bridge in the 1st column. Stack a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'yellow', x=4, y=0)\nboard = init_board(8, 8)\nwwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "function": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'washer', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'yellow', x=4, y=0)",
                                            "usage": "wwbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 5, 1)\nput(board, 'washer', 'blue', 5, 2)\nput(board, 'bridge-h', 'green', 5, 1)\nput(board, 'nut', 'red', 5, 1)\nput(board, 'screw', 'blue', 5, 1)",
                                "output": [
                                    "put(board, 'washer', 'red', 5, 1)",
                                    "put(board, 'washer', 'blue', 5, 2)",
                                    "put(board, 'bridge-h', 'green', 5, 1)",
                                    "put(board, 'nut', 'red', 5, 1)",
                                    "put(board, 'screw', 'blue', 5, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 1)",
                                "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)\nboard = init_board(8, 8)\nwwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [1, 2, 1, 1, 1])",
                                "function": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)",
                                "usage": "wwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [1, 2, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbns. Place a red washer in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a green bridge horizontally in the 6th row, 2nd column. Place a red nut in the 6th row, 2nd column. Place a blue screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 1)",
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wwbns. place a red washer in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 5, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wwbns. Place a red washer in the 6th row, 2nd column. Place a blue washer in the 6th row, 3rd column. Place a green bridge horizontally in the 6th row, 2nd column. Place a red nut in the 6th row, 2nd column. Place a blue screw in the 6th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)\nboard = init_board(8, 8)\nwwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [1, 2, 1, 1, 1])",
                                            "function": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)",
                                            "usage": "wwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [1, 2, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red and a blue washer in the 6th row, 2nd and 3rd column. Add a green horizontal bridge on top of the two washers. Place a red nut on top of the left side of the green bridge. Stack a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 1)",
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wwbns(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red and a blue washer in the 6th row, 2nd and 3rd column. Add a green horizontal bridge on top of the two washers. Place a red nut on top of the left side of the green bridge. Stack a blue screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)\nboard = init_board(8, 8)\nwwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [1, 2, 1, 1, 1])",
                                            "function": "def wwbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=5, y=1)\n    put(board, 'washer', 'blue', x=5, y=2)\n    put(board, 'bridge-h', 'green', x=5, y=1)\n    put(board, 'nut', 'red', x=5, y=1)\n    put(board, 'screw', 'blue', x=5, y=1)",
                                            "usage": "wwbns(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [1, 2, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbns": [
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 6, 2)\nput(board, 'nut', 'blue', 6, 3)\nput(board, 'bridge-h', 'green', 6, 2)\nput(board, 'nut', 'red', 6, 2)\nput(board, 'screw', 'blue', 6, 2)",
                                "output": [
                                    "put(board, 'washer', 'red', 6, 2)",
                                    "put(board, 'nut', 'blue', 6, 3)",
                                    "put(board, 'bridge-h', 'green', 6, 2)",
                                    "put(board, 'nut', 'red', 6, 2)",
                                    "put(board, 'screw', 'blue', 6, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 2)",
                                "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nwnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [2, 3, 2, 2, 2])",
                                "function": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                "usage": "wnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [2, 3, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbns. Place a red washer in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a red nut in the 7th row, 3rd column. Place a blue screw in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 2)",
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbns. place a red washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 7th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 6, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 6, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbns. Place a red washer in the 7th row, 3rd column. Place a blue nut in the 7th row, 4th column. Place a green bridge horizontally in the 7th row, 3rd column. Place a red nut in the 7th row, 3rd column. Place a blue screw in the 7th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nwnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [2, 3, 2, 2, 2])",
                                            "function": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                            "usage": "wnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [2, 3, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 7th row, 3rd column. Place a blue nut to the right of the washer. Stack a green horizontal bridge on top of the washer and nut. Place a red nut on top of the left side of the bridge. Stack a blue screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 2)",
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbns(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 7th row, 3rd column. Place a blue nut to the right of the washer. Stack a green horizontal bridge on top of the washer and nut. Place a red nut on top of the left side of the bridge. Stack a blue screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)\nboard = init_board(8, 8)\nwnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [2, 3, 2, 2, 2])",
                                            "function": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=6, y=2)\n    put(board, 'nut', 'blue', x=6, y=3)\n    put(board, 'bridge-h', 'green', x=6, y=2)\n    put(board, 'nut', 'red', x=6, y=2)\n    put(board, 'screw', 'blue', x=6, y=2)",
                                            "usage": "wnbns(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [2, 3, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 0)\nput(board, 'nut', 'blue', 4, 1)\nput(board, 'bridge-h', 'green', 4, 0)\nput(board, 'nut', 'red', 4, 0)\nput(board, 'screw', 'green', 4, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 0)",
                                    "put(board, 'nut', 'blue', 4, 1)",
                                    "put(board, 'bridge-h', 'green', 4, 0)",
                                    "put(board, 'nut', 'red', 4, 0)",
                                    "put(board, 'screw', 'green', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbns(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wnbns(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)\nboard = init_board(8, 8)\nwnbns(board, ['red', 'blue', 'green', 'red', 'green'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                "function": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)",
                                "usage": "wnbns(board, ['red', 'blue', 'green', 'red', 'green'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbns. Place a red washer in the 5th row, 1st column. Place a blue nut in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red nut in the 5th row, 1st column. Place a green screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbns(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbns(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wnbns. place a red washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'green', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wnbns. Place a red washer in the 5th row, 1st column. Place a blue nut in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red nut in the 5th row, 1st column. Place a green screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)\nboard = init_board(8, 8)\nwnbns(board, ['red', 'blue', 'green', 'red', 'green'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "function": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)",
                                            "usage": "wnbns(board, ['red', 'blue', 'green', 'red', 'green'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 5th row, first column. Put a blue nut in the same row, 2nd column. Stack a horizontal bridge on top of the washer and the nut. Place a red nut on top of the left side of the bridge. Stack a green screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwnbns(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wnbns(board, ('red', 'blue', 'green', 'red', 'green'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red washer in the 5th row, first column. Put a blue nut in the same row, 2nd column. Stack a horizontal bridge on top of the washer and the nut. Place a red nut on top of the left side of the bridge. Stack a green screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)\nboard = init_board(8, 8)\nwnbns(board, ['red', 'blue', 'green', 'red', 'green'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "function": "def wnbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'nut', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'green', x=4, y=0)",
                                            "usage": "wnbns(board, ['red', 'blue', 'green', 'red', 'green'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbns": [
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            4,
                            4,
                            4,
                            4,
                            4
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 4, 0)\nput(board, 'bridge-h', 'blue', 4, 1)\nput(board, 'bridge-h', 'green', 4, 0)\nput(board, 'nut', 'red', 4, 0)\nput(board, 'screw', 'blue', 4, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 4, 0)",
                                    "put(board, 'bridge-h', 'blue', 4, 1)",
                                    "put(board, 'bridge-h', 'green', 4, 0)",
                                    "put(board, 'nut', 'red', 4, 0)",
                                    "put(board, 'screw', 'blue', 4, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)\nboard = init_board(8, 8)\nwbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                "function": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)",
                                "usage": "wbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbns. Place a red washer in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red nut in the 5th row, 1st column. Place a blue screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbns. place a red washer in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 5th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 4, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 4, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 5th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'blue', 4, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbns. Place a red washer in the 5th row, 1st column. Place a blue bridge horizontally in the 5th row, 2nd column. Place a green bridge horizontally in the 5th row, 1st column. Place a red nut in the 5th row, 1st column. Place a blue screw in the 5th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)\nboard = init_board(8, 8)\nwbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "function": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)",
                                            "usage": "wbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 5th row, 1st column. Add a blue horizontal bridge in the same row, in the next column. Stack a green horizontal bridge on top of the washer and the left part of the blue bridge. Position a red nut on top of the left side of the green bridge. Stack a blue screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbns(board, ('red', 'blue', 'green', 'red', 'blue'), 4, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a red washer in the 5th row, 1st column. Add a blue horizontal bridge in the same row, in the next column. Stack a green horizontal bridge on top of the washer and the left part of the blue bridge. Position a red nut on top of the left side of the green bridge. Stack a blue screw on top of the red nut.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)\nboard = init_board(8, 8)\nwbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "function": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=4, y=0)\n    put(board, 'bridge-h', 'blue', x=4, y=1)\n    put(board, 'bridge-h', 'green', x=4, y=0)\n    put(board, 'nut', 'red', x=4, y=0)\n    put(board, 'screw', 'blue', x=4, y=0)",
                                            "usage": "wbbns(board, ['red', 'blue', 'green', 'red', 'blue'], [4, 4, 4, 4, 4], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'washer', 'red', 7, 0)\nput(board, 'bridge-h', 'blue', 7, 1)\nput(board, 'bridge-h', 'green', 7, 0)\nput(board, 'nut', 'red', 7, 0)\nput(board, 'screw', 'yellow', 7, 0)",
                                "output": [
                                    "put(board, 'washer', 'red', 7, 0)",
                                    "put(board, 'bridge-h', 'blue', 7, 1)",
                                    "put(board, 'bridge-h', 'green', 7, 0)",
                                    "put(board, 'nut', 'red', 7, 0)",
                                    "put(board, 'screw', 'yellow', 7, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 7, 0)",
                                "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "wbbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 7, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwbbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [7, 7, 7, 7, 7], [0, 1, 0, 0, 0])",
                                "function": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                "usage": "wbbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [7, 7, 7, 7, 7], [0, 1, 0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbns. Place a red washer in the 8th row, 1st column. Place a blue bridge horizontally in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a red nut in the 8th row, 1st column. Place a yellow screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 7, 0)",
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build wbbns. place a red washer in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 8th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 7, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red nut in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 8th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 7, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build wbbns. Place a red washer in the 8th row, 1st column. Place a blue bridge horizontally in the 8th row, 2nd column. Place a green bridge horizontally in the 8th row, 1st column. Place a red nut in the 8th row, 1st column. Place a yellow screw in the 8th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwbbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [7, 7, 7, 7, 7], [0, 1, 0, 0, 0])",
                                            "function": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                            "usage": "wbbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [7, 7, 7, 7, 7], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a blue horizontal bridge in the last row, 2nd column. Add a red washer in the bottom left corner. Stack a green bridge on top of the washer and the left side of the blue bridge. Place a red nut on top of the left side of the green bridge. Stack a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nwbbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 7, 0)",
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "wbbns(board, ('red', 'blue', 'green', 'red', 'yellow'), 7, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a blue horizontal bridge in the last row, 2nd column. Add a red washer in the bottom left corner. Stack a green bridge on top of the washer and the left side of the blue bridge. Place a red nut on top of the left side of the green bridge. Stack a yellow screw on top of the nut.",
                                        "<Editor>": {
                                            "total_code": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)\nboard = init_board(8, 8)\nwbbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [7, 7, 7, 7, 7], [0, 1, 0, 0, 0])",
                                            "function": "def wbbns(board, colors, x, y):\n    put(board, 'washer', 'red', x=7, y=0)\n    put(board, 'bridge-h', 'blue', x=7, y=1)\n    put(board, 'bridge-h', 'green', x=7, y=0)\n    put(board, 'nut', 'red', x=7, y=0)\n    put(board, 'screw', 'yellow', x=7, y=0)",
                                            "usage": "wbbns(board, ['red', 'blue', 'green', 'red', 'yellow'], [7, 7, 7, 7, 7], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbws": [
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            3,
                            4,
                            3,
                            3,
                            3
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 3)\nput(board, 'washer', 'blue', 5, 4)\nput(board, 'bridge-h', 'green', 5, 3)\nput(board, 'washer', 'red', 5, 3)\nput(board, 'screw', 'yellow', 5, 3)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 3)",
                                    "put(board, 'washer', 'blue', 5, 4)",
                                    "put(board, 'bridge-h', 'green', 5, 3)",
                                    "put(board, 'washer', 'red', 5, 3)",
                                    "put(board, 'screw', 'yellow', 5, 3)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 3)",
                                "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 3)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nnwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [3, 4, 3, 3, 3])",
                                "function": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                "usage": "nwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [3, 4, 3, 3, 3])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbws. Place a red nut in the 6th row, 4th column. Place a blue washer in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a red washer in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 3)",
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbws. place a red nut in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 6th row, 5th column",
                                        "<Editor>": "put(board, 'washer', 'blue', 5, 4)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 4th column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 3)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbws. Place a red nut in the 6th row, 4th column. Place a blue washer in the 6th row, 5th column. Place a green bridge horizontally in the 6th row, 4th column. Place a red washer in the 6th row, 4th column. Place a yellow screw in the 6th row, 4th column.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nnwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [3, 4, 3, 3, 3])",
                                            "function": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "nwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [3, 4, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Add a blue washer in the same row, 5th column. Stack a green horizontal bridge on top of the two objects. Place a red washer on top of the left side of the bridge. Stack a yellow screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 3)",
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 3)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 4th column. Add a blue washer in the same row, 5th column. Stack a green horizontal bridge on top of the two objects. Place a red washer on top of the left side of the bridge. Stack a yellow screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)\nboard = init_board(8, 8)\nnwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [3, 4, 3, 3, 3])",
                                            "function": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=3)\n    put(board, 'washer', 'blue', x=5, y=4)\n    put(board, 'bridge-h', 'green', x=5, y=3)\n    put(board, 'washer', 'red', x=5, y=3)\n    put(board, 'screw', 'yellow', x=5, y=3)",
                                            "usage": "nwbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [3, 4, 3, 3, 3])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            6,
                            6,
                            6,
                            6,
                            6
                        ],
                        "y": [
                            1,
                            2,
                            1,
                            1,
                            1
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 6, 1)\nput(board, 'washer', 'blue', 6, 2)\nput(board, 'bridge-h', 'green', 6, 1)\nput(board, 'washer', 'red', 6, 1)\nput(board, 'screw', 'blue', 6, 1)",
                                "output": [
                                    "put(board, 'nut', 'red', 6, 1)",
                                    "put(board, 'washer', 'blue', 6, 2)",
                                    "put(board, 'bridge-h', 'green', 6, 1)",
                                    "put(board, 'washer', 'red', 6, 1)",
                                    "put(board, 'screw', 'blue', 6, 1)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbws(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 1)",
                                "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nwbws(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 1)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'blue', x=6, y=1)\nboard = init_board(8, 8)\nnwbws(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [1, 2, 1, 1, 1])",
                                "function": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'blue', x=6, y=1)",
                                "usage": "nwbws(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [1, 2, 1, 1, 1])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbws. Place a red nut in the 7th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a red washer in the 7th row, 2nd column. Place a blue screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbws(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 1)",
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbws(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nwbws. place a red nut in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue washer in the 7th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'blue', 6, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'washer', 'red', 6, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 7th row, 2nd column",
                                        "<Editor>": "put(board, 'screw', 'blue', 6, 1)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nwbws. Place a red nut in the 7th row, 2nd column. Place a blue washer in the 7th row, 3rd column. Place a green bridge horizontally in the 7th row, 2nd column. Place a red washer in the 7th row, 2nd column. Place a blue screw in the 7th row, 2nd column.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'blue', x=6, y=1)\nboard = init_board(8, 8)\nnwbws(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [1, 2, 1, 1, 1])",
                                            "function": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'blue', x=6, y=1)",
                                            "usage": "nwbws(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [1, 2, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 7th row, 2nd column. Add a blue washer to the right of it. Stack a green horizontal bridge on top of the nut and the washer. Place a red washer on top of the left side of the bridge. Finally, place a blue screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnwbws(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 1)",
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nwbws(board, ('red', 'blue', 'green', 'red', 'blue'), 6, 1)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 7th row, 2nd column. Add a blue washer to the right of it. Stack a green horizontal bridge on top of the nut and the washer. Place a red washer on top of the left side of the bridge. Finally, place a blue screw on top of the red washer.",
                                        "<Editor>": {
                                            "total_code": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'blue', x=6, y=1)\nboard = init_board(8, 8)\nnwbws(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [1, 2, 1, 1, 1])",
                                            "function": "def nwbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=6, y=1)\n    put(board, 'washer', 'blue', x=6, y=2)\n    put(board, 'bridge-h', 'green', x=6, y=1)\n    put(board, 'washer', 'red', x=6, y=1)\n    put(board, 'screw', 'blue', x=6, y=1)",
                                            "usage": "nwbws(board, ['red', 'blue', 'green', 'red', 'blue'], [6, 6, 6, 6, 6], [1, 2, 1, 1, 1])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbws": [
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "x": [
                            7,
                            7,
                            7,
                            7,
                            7
                        ],
                        "y": [
                            2,
                            3,
                            2,
                            2,
                            2
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 7, 2)\nput(board, 'nut', 'blue', 7, 3)\nput(board, 'bridge-h', 'green', 7, 2)\nput(board, 'washer', 'red', 7, 2)\nput(board, 'screw', 'green', 7, 2)",
                                "output": [
                                    "put(board, 'nut', 'red', 7, 2)",
                                    "put(board, 'nut', 'blue', 7, 3)",
                                    "put(board, 'bridge-h', 'green', 7, 2)",
                                    "put(board, 'washer', 'red', 7, 2)",
                                    "put(board, 'screw', 'green', 7, 2)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbws(board, ('red', 'blue', 'green', 'red', 'green'), 7, 2)",
                                "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnbws(board, ('red', 'blue', 'green', 'red', 'green'), 7, 2)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)\nboard = init_board(8, 8)\nnnbws(board, ['red', 'blue', 'green', 'red', 'green'], [7, 7, 7, 7, 7], [2, 3, 2, 2, 2])",
                                "function": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)",
                                "usage": "nnbws(board, ['red', 'blue', 'green', 'red', 'green'], [7, 7, 7, 7, 7], [2, 3, 2, 2, 2])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbws. Place a red nut in the 8th row, 3rd column. Place a blue nut in the 8th row, 4th column. Place a green bridge horizontally in the 8th row, 3rd column. Place a red washer in the 8th row, 3rd column. Place a green screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbws(board, ('red', 'blue', 'green', 'red', 'green'), 7, 2)",
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbws(board, ('red', 'blue', 'green', 'red', 'green'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnbws. place a red nut in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'nut', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 8th row, 4th column",
                                        "<Editor>": "put(board, 'nut', 'blue', 7, 3)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'washer', 'red', 7, 2)"
                                    },
                                    {
                                        "<Programmer>": "place a green screw in the 8th row, 3rd column",
                                        "<Editor>": "put(board, 'screw', 'green', 7, 2)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbws. Place a red nut in the 8th row, 3rd column. Place a blue nut in the 8th row, 4th column. Place a green bridge horizontally in the 8th row, 3rd column. Place a red washer in the 8th row, 3rd column. Place a green screw in the 8th row, 3rd column.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)\nboard = init_board(8, 8)\nnnbws(board, ['red', 'blue', 'green', 'red', 'green'], [7, 7, 7, 7, 7], [2, 3, 2, 2, 2])",
                                            "function": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)",
                                            "usage": "nnbws(board, ['red', 'blue', 'green', 'red', 'green'], [7, 7, 7, 7, 7], [2, 3, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 3rd column. Put a blue nut in the same row, 4th column. Stack a green horizontal bridge on top of the two nuts. Place a red washer on top of the left side of the bridge. Stack a green screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbws(board, ('red', 'blue', 'green', 'red', 'green'), 7, 2)",
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbws(board, ('red', 'blue', 'green', 'red', 'green'), 7, 2)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the last row, 3rd column. Put a blue nut in the same row, 4th column. Stack a green horizontal bridge on top of the two nuts. Place a red washer on top of the left side of the bridge. Stack a green screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)\nboard = init_board(8, 8)\nnnbws(board, ['red', 'blue', 'green', 'red', 'green'], [7, 7, 7, 7, 7], [2, 3, 2, 2, 2])",
                                            "function": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=7, y=2)\n    put(board, 'nut', 'blue', x=7, y=3)\n    put(board, 'bridge-h', 'green', x=7, y=2)\n    put(board, 'washer', 'red', x=7, y=2)\n    put(board, 'screw', 'green', x=7, y=2)",
                                            "usage": "nnbws(board, ['red', 'blue', 'green', 'red', 'green'], [7, 7, 7, 7, 7], [2, 3, 2, 2, 2])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            null,
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 0)\nput(board, 'nut', 'blue', 5, 1)\nput(board, 'bridge-h', 'green', 5, 0)\nput(board, 'washer', 'red', 5, 0)\nput(board, 'screw', 'blue', 5, 0)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 0)",
                                    "put(board, 'nut', 'blue', 5, 1)",
                                    "put(board, 'bridge-h', 'green', 5, 0)",
                                    "put(board, 'washer', 'red', 5, 0)",
                                    "put(board, 'screw', 'blue', 5, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)\nboard = init_board(8, 8)\nnnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                "function": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)",
                                "usage": "nnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbws. Place a red nut in the 6th row, 1st column. Place a blue nut in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a red washer in the 6th row, 1st column. Place a blue screw in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nnbws. place a red nut in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue nut in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'nut', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue screw in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'blue', 5, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nnbws. Place a red nut in the 6th row, 1st column. Place a blue nut in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a red washer in the 6th row, 1st column. Place a blue screw in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)\nboard = init_board(8, 8)\nnnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "function": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)",
                                            "usage": "nnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a blue nut in the 6th row, 2nd column. Add another nut in color red on the left side of the blue one. Stack a green horizontal bridge on top of the two nuts. Place a red washer on top of the left side of the green bridge. Position a blue screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nnbws(board, ('red', 'blue', 'green', 'red', 'blue'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a blue nut in the 6th row, 2nd column. Add another nut in color red on the left side of the blue one. Stack a green horizontal bridge on top of the two nuts. Place a red washer on top of the left side of the green bridge. Position a blue screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)\nboard = init_board(8, 8)\nnnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "function": "def nnbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'nut', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'blue', x=5, y=0)",
                                            "usage": "nnbws(board, ['red', 'blue', 'green', 'red', 'blue'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbws": [
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "x": [
                            5,
                            5,
                            5,
                            5,
                            5
                        ],
                        "y": [
                            0,
                            1,
                            0,
                            0,
                            0
                        ],
                        "orientations": [
                            null,
                            "horizontal",
                            "horizontal",
                            null,
                            null
                        ],
                        "rows": 8,
                        "cols": 8,
                        "min_rows": 2,
                        "min_cols": 3,
                        "code": {
                            "multi_turn": {
                                "total_code": "board = init_board(8, 8)\nput(board, 'nut', 'red', 5, 0)\nput(board, 'bridge-h', 'blue', 5, 1)\nput(board, 'bridge-h', 'green', 5, 0)\nput(board, 'washer', 'red', 5, 0)\nput(board, 'screw', 'yellow', 5, 0)",
                                "output": [
                                    "put(board, 'nut', 'red', 5, 0)",
                                    "put(board, 'bridge-h', 'blue', 5, 1)",
                                    "put(board, 'bridge-h', 'green', 5, 0)",
                                    "put(board, 'washer', 'red', 5, 0)",
                                    "put(board, 'screw', 'yellow', 5, 0)"
                                ],
                                "error": null
                            },
                            "single_turn": {
                                "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                "usage": "nbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                "error": null
                            },
                            "single_turn_sc": {
                                "total_code": "def nbbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'yellow', x=5, y=0)\nboard = init_board(8, 8)\nnbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                "function": "def nbbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'yellow', x=5, y=0)",
                                "usage": "nbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                "error": null
                            }
                        },
                        "quadrant": "bl",
                        "seed_template": {
                            "multi_turn": "templates/code/simple/fiveshapes_seed2_multi.j2",
                            "single_turn": "templates/code/simple/fiveshapes_seed2.j2",
                            "single_turn_sc": "templates/code/simple/fc_subset.j2"
                        },
                        "dialogues": {
                            "single_turn": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbws. Place a red nut in the 6th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a red washer in the 6th row, 1st column. Place a yellow screw in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "multi_turn": {
                                "template": "templates/instructions/simple/multiturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the step-by-step instructions to build nbbws. place a red nut in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'nut', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a blue bridge horizontally in the 6th row, 2nd column",
                                        "<Editor>": "put(board, 'bridge-h', 'blue', 5, 1)"
                                    },
                                    {
                                        "<Programmer>": "place a green bridge horizontally in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'bridge-h', 'green', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a red washer in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'washer', 'red', 5, 0)"
                                    },
                                    {
                                        "<Programmer>": "place a yellow screw in the 6th row, 1st column",
                                        "<Editor>": "put(board, 'screw', 'yellow', 5, 0)"
                                    }
                                ]
                            },
                            "single_turn_sc": {
                                "template": "templates/instructions/simple/singleturn.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "These are the instructions to build nbbws. Place a red nut in the 6th row, 1st column. Place a blue bridge horizontally in the 6th row, 2nd column. Place a green bridge horizontally in the 6th row, 1st column. Place a red washer in the 6th row, 1st column. Place a yellow screw in the 6th row, 1st column.",
                                        "<Editor>": {
                                            "total_code": "def nbbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'yellow', x=5, y=0)\nboard = init_board(8, 8)\nnbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "function": "def nbbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'yellow', x=5, y=0)",
                                            "usage": "nbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 1st column. Add a blue horizontal bridge to the right of the nut in column 2. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Place a red washer on top of the left side of the green bridge. Stack a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nnbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "usage": "nbbws(board, ('red', 'blue', 'green', 'red', 'yellow'), 5, 0)",
                                            "error": null
                                        }
                                    }
                                ]
                            },
                            "single_turn_hai_sc": {
                                "template_name": "human_annotated_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a red nut in the 6th row, 1st column. Add a blue horizontal bridge to the right of the nut in column 2. Stack a green horizontal bridge on top of the nut and the left side of the blue bridge. Place a red washer on top of the left side of the green bridge. Stack a yellow screw on top of the washer.",
                                        "<Editor>": {
                                            "total_code": "def nbbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'yellow', x=5, y=0)\nboard = init_board(8, 8)\nnbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "function": "def nbbws(board, colors, x, y):\n    put(board, 'nut', 'red', x=5, y=0)\n    put(board, 'bridge-h', 'blue', x=5, y=1)\n    put(board, 'bridge-h', 'green', x=5, y=0)\n    put(board, 'washer', 'red', x=5, y=0)\n    put(board, 'screw', 'yellow', x=5, y=0)",
                                            "usage": "nbbws(board, ['red', 'blue', 'green', 'red', 'yellow'], [5, 5, 5, 5, 5], [0, 1, 0, 0, 0])",
                                            "error": null
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        }
    }
}