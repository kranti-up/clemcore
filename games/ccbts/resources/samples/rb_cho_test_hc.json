{
    "regular": {
        "challenge": {
            "2": {
                "ns": [
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'ns' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with ns objects. The nut is yellow and the screw is blue.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'ns' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four ns objects in the first row, in all odd columns. The nut is green and the screw is blue. Repeat this step for the three other odd rows.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'ns' object, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['green', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a ns object in all odd columns for all rows. The objects include a yellow screw, and a green nut.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    ns(board, colors=['red', 'yellow'], x=row, y=3)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ns(board, colors=['red', 'yellow'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'ns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    ns(board, colors=['red', 'yellow'], x=row, y=3)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ns(board, colors=['red', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 4th column with ns objects composed of a red nut and a yellow screw.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    ns(board, colors=['red', 'yellow'], x=row, y=3)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ns(board, colors=['red', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wn": [
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wn' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with wn objects. The washers are red and the nuts are green",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wn' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four wn objects in each odd row, for each of those rows one in each odd column. The wn objects are composed of a green nut and a red washer.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'wn' object, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['yellow', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill all odd columns with wn objects. They each have a blue nut and a yellow washer.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=row, y=3)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wn' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=row, y=3)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 4th column with wn objects composed of a red nut and a blue washer.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=row, y=3)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ws": [
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'ws' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with ws objects with green screws and yellow washers.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ws(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ws(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'ws' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ws(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ws(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a ws object in all odd rows in the first column. The screw of the ws objects is green and the washer is blue. Repeat the first step for the 3rd, 5th, and 7th column.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ws(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        ws(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'ws' object, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['red', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill all odd columns with ws objects composed of a green screw and a red washer.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    ws(board, colors=['yellow', 'blue'], x=row, y=3)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ws(board, colors=['yellow', 'blue'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'ws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    ws(board, colors=['yellow', 'blue'], x=row, y=3)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ws(board, colors=['yellow', 'blue'], x=row, y=3)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 4th column with 8 ws objects composed of a blue screw and a yellow washer.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    ws(board, colors=['yellow', 'blue'], x=row, y=3)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ws(board, colors=['yellow', 'blue'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nw": [
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nw' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with nw objects composed of a green nut and a blue washer.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nw' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a nw object in all odd columns for row 1, 3, 5, and 7. The washer is red and the nut is yellow.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nw' object, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['blue', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill all odd columns with nw objects composed of a yellow washer and a blue nut.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=3)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nw' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=3)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 4th column with nw objects composed of a green nut and a yellow washer.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=3)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bn": [
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bn' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row, 7th column with bn objects. They are composed of a yellow nut, and a red bridge.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bn' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'blue'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bn object in all odd columns for row 1, 4, and 7. Each object includes a yellow bridge and a blue nut.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bn' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['blue', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th and 7th column with bn objects composed of a yellow nut and a blue bridge.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bw": [
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bw' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'blue'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 7 bw objects on the diagonal from the top left corner to row 7, column 7. The bridges are green and the washers are blue.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bw' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four bw objects in the first row, in columns 1, 3, 5, and 7. The bridge is red and the washer is yellow. Repeat step 1 for the row 4 and 7, placing four objects of the same type and color in the same columns for both rows.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bw' object, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['blue', 'green'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place bw objects in all odd rows for column 1, 3, 5, and 7. The bridge is blue and the washer green.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bs": [
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bs' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in row 7, column 7 with bs objects. The bridge is red and the screw is yellow.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bs' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bs objects in the first row, in all odd columns. The bridge is blue and the screw is red. Put a bs object in all odd columns for row 4 and 7 as well. All bs objects have the same colors.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bs' object, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['yellow', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "ererer",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "3": {
                "nwb": [
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nwb' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'green', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in row 7, column 7 with nwb objects which are composed of a yellow bridge, and a green washer and nut.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nwb(board, colors=['red', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nwb(board, colors=['red', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nwb' object in alternating columns of the first row, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'red', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nwb(board, colors=['red', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nwb(board, colors=['red', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three nwb objects in the first row, in the 1st, 4th, and 7th column. The washer and the nut are red, and the bridge is yellow. Position three more of those objects in the 3rd row, in the same columns. Repeat the process for the 5th and 7th row as well.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nwb(board, colors=['red', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nwb(board, colors=['red', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bws": [
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bws' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'blue', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left to the bottom right with bws objects, except for the last column. The seven bws objects have a blue washer, and a red screw and bridge.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bws(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bws(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bws' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'blue', 'green'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bws(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bws(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bws objects in the first column, in row 1, 4, and 7. The bridge is yellow, the washer is blue, and the screw is green. Repeat the first step for column 3, 5, and 7.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bws(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bws(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwn": [
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwn(board, colors=['red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwn(board, colors=['red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwn' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'green', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwn(board, colors=['red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwn(board, colors=['red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with bwn objects, except for the last square. The nut and the bridge are red, while the washer is green.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwn(board, colors=['red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwn(board, colors=['red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bwn' object in alternating columns of the first row, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'red', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bwn objects in the first, 4th, and 7th column for row 1, 3, 5, and 7. The objects are composed of a red washer, a yellow nut, and a blue bridge.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnw": [
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnw' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in row 7, column 7 with bnw objects composed of a red washer and bridge, and a yellow nut.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnw' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'blue', 'green'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bnw objects in the first row, in column 1, 3, 5, and 7. The bridge is red, the nut is blue, and the washer is green. Position four more bnw objects in the same colors in the 4th row, in the same columns. Add 4 more objects of the same type and color in the 7th row, in all odd columns as well.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bnw' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['green', 'yellow', 'green'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th column with bnw objects with a green washer and bridge, and a yellow nut.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nws": [
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nws' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'red', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with nws objects composed of a yellow screw and nut, and a red washer.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nws' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'yellow', 'blue'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place nws objects in the first row, in column 1, 3, 5, and 7. The nut is red, the screw is blue, and the washer is yellow. Repeat the first step for the 3rd, 5th, and 7th row as well.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nws(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nws(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nws(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nws' object, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['yellow', 'blue', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nws(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nws(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill all odd columns with 8 nws objects per column. Each objects has a yellow nut and screw, and a blue washer.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nws(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        nws(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbb": [
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nbb' objects, each taking a 3x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'yellow', 'green'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 6 nbb objects on the diagonal from the top left corner to the 6th row, 6th column. The 7th and 8th column are empty. Each nbb object is composed of a red nut, a green vertical bridge in the upper part, and a yellow bridge in the lower part.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbb(board, colors=['yellow', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbb(board, colors=['yellow', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nbb' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'yellow', 'green'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbb(board, colors=['yellow', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbb(board, colors=['yellow', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position three nbb objects in the first row, in the first, 4th, and 7th column. Add three more in the 4th row and another three in the 7th row for the same columns. The object is composed of a yellow nut, a yellow horizontal bridge, and a green vertical bridge.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbb(board, colors=['yellow', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbb(board, colors=['yellow', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bns": [
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bns' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'blue', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row and column with bns objects composed of a green screw, a blue nut, and a yellow bridge.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bns' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'yellow', 'blue'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bns objects in the first row, in the 1st, 3rd, 5th, and 7th column. Each has a red bridge, a yellow nut, and a blue screw. Position 4 more bns objects of the same color in the 4th row, in the same columns. Repeat the process for the 7th row.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bns' object, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['red', 'yellow', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the 1st, 3rd, 5th, and 7th column with bns objects, so that there are 4 objects in each of these columns. The bns objects are composed of a red screw and bridge, and a yellow nut.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnb": [
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnb(board, colors=['yellow', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnb(board, colors=['yellow', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnb' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'yellow', 'red'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnb(board, colors=['yellow', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnb(board, colors=['yellow', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row, 7th column with bnb objects. The nut and the horizontal bridge are yellow, and the vertical bridge is red.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnb(board, colors=['yellow', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnb(board, colors=['yellow', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnb' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'yellow', 'blue'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bnb objects in the first row, in column 1, 4, and 7. Each contains a yellow nut and horizontal bridge, and a blue vertical bridge. Position three more bnb objects of the same color in the 4th row, in the same columns. Repeat this step for the 7th row.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wns": [
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wns' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'blue', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with wns objects composed of a yellow washer, a blue nut, and a red screw.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wns(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wns(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wns' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'blue', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wns(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wns(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wns object in all odd columns for row 1, 3, 5, and 7. The washer and the screw are red, the nut is blue.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wns(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wns(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwb": [
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wwb' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'blue', 'red'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row, 7th column with wwb objects composed of a red bridge, a yellow washer on the left, and a blue washer on the right.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wwb' object in alternating columns of the first row, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'red', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place wwb objects in the first, 4th, and 7th column, so that there is an object in row 1, 3, 5, and 7 for each of the three columns. The 12 wwb objects include a green bridge, a yellow washer on the left and a red washer on the right.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbb": [
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wbb' objects, each taking a 3x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'green', 'blue'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 6 wbb objects on the diagonal from the top left corner to the square in row 6, column 6. Each object includes a yellow washer, a green bridge, and a blue bridge on top.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wbb' object in alternating columns of the first row, each occupying a 1x3 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'red', 'green'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position two wbb objects in the first row, in the first and 5th column. The washer is blue, the left bridge is green, and the right bridge is red. Repeat this step for row 3, 5, and 7.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbb": [
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbb' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'green', 'blue'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position 1 bbb object in the top left corner and add another one in the 3rd row and column. Place two more bbb objects in row/column 5, and in row/column 7. All of the four bbb objects have two green vertical bridges, and a blue horizontal bridge.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bbb' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'yellow', 'red'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bbb objects in the first row, in the first, 4th, and 7th column. The upper horizontal bridge is blue, the lower one is yellow, and the vertical bridge is red. Place three more in the 4th row, in the same columns. Finally, add three more bbb objects in the same colors in the 7th row, in the same three columns.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bbb' object, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['yellow', 'green', 'blue'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bbb objects in the first row, in the first, 4th, and 7th column. The left vertical bridge is yellow, the right one is green, and the horizontal bridge is blue. Repeat this step for the 3rd, 5th, and 7th row.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bbb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnb": [
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnb(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnb(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nnb' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'red', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnb(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnb(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with nnb objects composed of a blue bridge, a green nut on the left and a red nut on the right. Leave the last row empty, so that only 7 nnb objects are placed on the diagonal.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnb(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnb(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nnb' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'red', 'green'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four nnb objects in the first row, in all odd columns. The bridge is green, the upper nut is yellow, and the lower nut is red. Repeat step 1 for row 4 and 7.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nnb' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.  Use only these colors: ['red', 'blue', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first, 4th, and 7th column with 8 nnb objects per column. Each object is composed of a red nut on the left, a blue nut on the right, and a yellow horizontal bridge.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwb": [
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwb' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'yellow', 'blue'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left to the bottom right with bwb objects with a yellow washer and horizontal bridge, and a blue vertical bridge. Place one in each row except for the last one, so that there are 7 bwb objects on the board.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bwb' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'green', 'red'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position three bwb objects in the first row, in column 1, 4, and 7. Add three more in the 4th row, in the same columns. Finally, place three more of these objects in the 7th row, in the same columns again. All bwb objects include a red horizontal bridge, a blue vertical bridge, and a green washer.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnb": [
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wnb' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'red', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row and column with seven wnb objects. The objects are composed of a yellow washer, a red nut, and a green horizontal bridge.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wnb' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'blue', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place wnb objects in the first row, in column 1, 3, 5, and 7. The nut is blue, the bridge is red, and the washer is yellow. Repeat step 1 for row 4 and 7.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "4": {
                "bnbn": [
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'yellow', 'red', 'green'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a bnbn object in the top left corner. It has a yellow vertical bridge, a red horizontal bridge, a green nut on the left, and a yellow nut on the right. Add another one in the 3rd row, 3rd column. Place two more of these objects in row and column 5, and in row and column 7.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbs": [
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nwbs' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with nwbs objects, but leave the last row empty. There are 7 nwbs objects overall placed on the board, each containing a yellow nut and screw, a green horizontal bridge, and a red washer.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbs(board, colors=['blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbs(board, colors=['blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nwbs' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'yellow', 'red', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbs(board, colors=['blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbs(board, colors=['blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a nwbs object in the top left corner. The washer and the screw are yellow, the bridge is red, and the nut is blue. Add three more in columns 3, 5, and 7. Place 4 more nwbs objects in the same colors in the 4th row, in the same columns. Position a nwbs object in each odd column for row 7 as well. The colors of the objects are the same as before.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbs(board, colors=['blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbs(board, colors=['blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbw": [
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbw(board, colors=['green', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbw(board, colors=['green', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nwbw' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'green', 'red', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbw(board, colors=['green', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbw(board, colors=['green', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position 7 nwbw objects on the diagonal from the top left corner to the square in row 7, column 7. All objects include a green nut, a green washer in the lower part, a yellow washer in the upper part, and a red vertical bridge.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbw(board, colors=['green', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbw(board, colors=['green', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbn": [
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbn(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbn(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wnbn' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'red', 'green', 'red'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbn(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbn(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with wnbn objects, but leave the last column empty, so that only 7 objects are placed on the diagonal. Each wnbn object is composed of a green bridge, two red nuts, and a red washer.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbn(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbn(board, colors=['red', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wnbn(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wnbn(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wnbn' object in alternating columns of the first row, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'green', 'blue', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wnbn(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wnbn(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three wnbn objects in the first, in the 3rd, in the 5th and in the 7th row. In each of those rows, place them in the 1st, 4th and 7th column. Each of these objects has a blue bridge and three other parts which are green.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wnbn(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wnbn(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbs": [
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nnbs' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the 7th row, 7th column with seven nnbs objects. They each include blue nuts, a yellow bridge, and a green screw.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nnbs' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four nnbs objects in the first row, in the 1st, 3rd, 5th, and 7th column. The nuts are green, the screw is yellow, and the bridge is blue. Repeat the first step for the 4th and 7th row.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbn": [
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbn(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbn(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wbbn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'yellow', 'red', 'green'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbn(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbn(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four wbbn objects on the diagonal from the top left corner to the bottom right one. Only position them in odd rows. Each object has a green nut and washer, a red vertical bridge, and a yellow horizontal bridge.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbn(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbn(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbbn(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbbn(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wbbn' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'red', 'blue', 'green'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbbn(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbbn(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position three wbbn objects in the first row, in columns 1, 4, and 7. Add three more in the 4th row, in the same columns. Finally, put three more in the 7th row, in the same columns. All wbbn objects have a yellow washer, a blue vertical bridge, a red horizontal bridge, and a green nut.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbbn(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbbn(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbn": [
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbn(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbn(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'yellow', 'green', 'yellow'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbn(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbn(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bbbn objects on the diagonal from the top left corner to the bottom right corner. They are positioned in the four odd columns. Each object has a green horizontal bridge, while the three other parts are yellow.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbn(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbn(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bbbn' object in alternating columns of the first row, each occupying a 3x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'green', 'blue', 'red'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position three bbbn objects in the first row and three bbbn objects in the 5th row. For both rows, the objects are placed in the columns 1, 4, and 7. The bbbn objects include two green vertical bridges, a blue horizontal bridge, and a red nut.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbw": [
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbw(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbw(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nnbw' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'blue', 'yellow', 'blue'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbw(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbw(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to row 7, column 7 with nnbw objects. Each of the 7 objects includes a yellow bridge, a red nut on the left, a blue nut on the right, and a blue washer.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbw(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbw(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nnbw' object in alternating columns of the first row, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'yellow', 'blue', 'green'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position three nnbw objects in the first row, in the 1st, 4th, and 7th column. The bridge is blue, the left nut and the washer are green, and the right nut is yellow. Place three more in the 3rd row, in the same columns. Add three of those objects in the 5th row as well, in the same columns. Repeat this pattern for the 7th row as well.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbs": [
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wwbs' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left to the bottom right with wwbs objects with blue washers, a green screw, and a yellow bridge. However, leave the last column empty and place only 7 wwbs objects on the board.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnws": [
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnws(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnws(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnws' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'yellow', 'red', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnws(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnws(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "ereree",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnws(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnws(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnws' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put four bnws objects in the first row, in column 1, 3, 5, and 7. Repeat this pattern for the 4th and 7th row as well. All bnws objects include a yellow bridge and screw, a blue washer, and a red nut.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbw": [
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nbbw' objects, each taking a 1x3 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position 6 nbbw objects on the diagonal from the top left corner to the square in the 6th row and column. The objects contain a yellow nut and washer, a green bridge on the left and a red bridge on the right.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nbbw' object in alternating columns of the first row, each occupying a 3x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'blue', 'red', 'yellow'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four nbbw objects in the first row, in the first, third, fifth, and seventh column. The upper bridge is red, the lower one is blue, the washer is yellow, and the nut is green. Repeat step 1 for row 5 as well.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        nbbw(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbs": [
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wnbs' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'yellow', 'blue', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to row 7, column 7 with 7 wnbs objects composed of a yellow washer and nut, a blue bridge, and a green screw.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wnbs' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'yellow', 'red', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a wnbs object in 1st, 3rd, 5th, and 7th column for the 1st, 4th, and 7th row. Each object contains a green screw and washer, a yellow nut, and a red bridge.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbw": [
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbw(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbw(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wbbw' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'yellow', 'blue'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbw(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbw(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four wbbw objects on the diagonal from the top left corner to the bottom right corner, so that the objects are placed in the odd rows. Each object includes a yellow vertical bridge and three other parts in blue.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbw(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbw(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wbbw' object in alternating columns of the first row, each occupying a 1x3 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place two wbbw objects in the 1st and 5th column in row 1, 3, 5, and 7. The objects contain a green washer on the left, a yellow washer on the right, a blue bridge on the left, and a green bridge on the right.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 4):\n        wbbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbw": [
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wnbw' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'red', 'green', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "There are 7 wnbw objects on the board, each one including a red nut, a yellow washer, a green bridge, and a blue washer. Place the first wnbw object in the top left corner. Position another wnbw object in the 7th row, 7th column. Now add 5 more wnbw objects on the diagonal between the first two objects. ",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wnbw' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four wnbw objects in the first, in the 4th, and in the 7th row. For each of those three rows, place the objects in the 1st, 3rd, 5th, and 7th column. The objects are composed of a yellow bridge, a red washer in the upper half, a blue washer in the lower half, and a red nut.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbs": [
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nbbs' objects, each taking a 1x3 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'green', 'yellow', 'green'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Create a diagonal of nbbs objects starting in the top left corner and ending in the 6th row, 6th column. Overall, there are 6 nbbs objects on the board, each including a red nut, a yellow bridge on the left, a green bridge on the right, and a green screw.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbbs(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbbs(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nbbs' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'blue', 'green', 'blue'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbbs(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbbs(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put three nbbs objects in the first row, in the 1st, 4th, and 7th column. The screw and the vertical bridge are blue, the nut is yellow, and the horizontal bridge is green. Repeat step one for the 4th and 7th row, so that 6 more nbbs objects are added.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbbs(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        nbbs(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbb": [
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbb(board, colors=['blue', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbb(board, colors=['blue', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbb' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'red', 'green'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbb(board, colors=['blue', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbb(board, colors=['blue', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put a bbbb object in the top left corner. It is composed of a red vertical bridge on the left side, a green vertical bridge on the right side, and two blue horizontal bridges. Place another one in the 3rd row, 3rd column. Add two more in the 5th row and column and in the 7th row and column.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbb(board, colors=['blue', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbb(board, colors=['blue', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'red', 'yellow', 'yellow'],x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'red', 'yellow', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bbbb' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'red', 'yellow', 'yellow'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'red', 'yellow', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'red', 'yellow', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bbbb objects in the first, in the 4th, and in the 7th row. For each of those three rows, position the objects in column 1, 4, and 7. The vertical bridges of the object are yellow, the upper horizontal bridge is green, and the other horizontal bridge is red.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'red', 'yellow', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'red', 'yellow', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbw": [
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbw(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbw(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbw' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbw(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbw(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left to the bottom right with four bwbw objects, each placed in odd rows. The horizontal bridges are yellow, the vertical ones are red, the upper washer is green, and the lower one is blue.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbw(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbw(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbw": [
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbw' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'green', 'yellow', 'red'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row and column with bnbw objects. The objects include a yellow vertical bridge, a green horizontal bridge, a green nut, and a red washer.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbw(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbw(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnbw' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbw(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbw(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bnbw objects in the first row, in the first, 4th, and 7th column. Put three more in the 4th row and another three in the 7th row, in the same columns for both rows. All objects include a yellow horizontal bridge, a yellow washer, a blue vertical bridge, and a red nut.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbw(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbw(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbn": [
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nbbn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place one nbbn object in the top left corner, and another one in the 7th row, 7th column. They both have a yellow vertical bridge, a blue horizontal bridge and a blue nut in the upper part, and a green nut in the lower part. Add two more of these objects between the first two, so that the four objects are on the same diagonal.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbs": [
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbs(board, colors=['blue', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbs(board, colors=['blue', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wbbs' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'green', 'yellow', 'blue'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbs(board, colors=['blue', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbs(board, colors=['blue', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four wbbs objects in the diagonal from the top left corner to the bottom right corner. The objects are only placed in odd columns. Each wbbs object is composed of a blue screw and washer, a yellow vertical bridge, and a green horizontal bridge.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbs(board, colors=['blue', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbs(board, colors=['blue', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        wbbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        wbbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wbbs' object in alternating columns of the first row, each occupying a 3x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'green', 'yellow', 'blue'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        wbbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        wbbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four wbbs objects in the 1st row, in all odd columns. The screw is blue, the washer is red, the upper bridge is yellow, and the lower bridge is green. Repeat the first step for the 5th row as well.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        wbbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 2):\n        wbbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbs": [
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbs' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'yellow', 'blue', 'green'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in row 7, column 7 with 7 bwbs objects which are composed of a yellow washer and vertical bridge, a blue horizontal bridge, and a green screw.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwns": [
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwns(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwns(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwns' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'red', 'green', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwns(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwns(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with bwns objects, but leave the last column empty. There are therefore 7 bwns objects placed on the board. They all include a red washer, a green nut, a blue screw, and a yellow bridge.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwns(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwns(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bwns(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bwns(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bwns' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'green', 'blue', 'yellow'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bwns(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bwns(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bwns objects in the first row, in the odd columns. Position four more in the 4th row, and another four in the 7th row, all in the same columns as before. All bwns objects include a red bridge, a yellow screw, a blue nut, and a green washer.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bwns(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bwns(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbs": [
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbs' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'yellow', 'blue', 'yellow'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with four bnbs objects which are placed in the odd columns. The horizontal bridge is green, the vertical one is blue, and the nut and screw are yellow.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbn": [
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wwbn' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'green', 'red', 'yellow'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wwbn object in the top left corner. The nut is yellow, the upper washer is blue, the lower washer is green, and the bridge is red. Add another one in row 2, column 2. Continue adding wwbn objects in the same colors on the diagonal. The last object is placed in row 7, column 7, leaving the last column empty.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wwbn' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['red', 'yellow', 'green', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four wwbn objects in the first row, in column 1, 3, 5, and 7. Put four more of these objects in the 4th row and in the 7th row, in the same columns for both rows. Each object includes a red washer in the upper part, a yellow washer in the lower part, a green bridge, and a blue nut.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbn(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbs": [
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['red', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['red', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbs' objects, each taking a 3x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'blue', 'yellow', 'green'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['red', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['red', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "rererer",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['red', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['red', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bbbs' object in alternating columns of the first row, each occupying a 3x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'yellow', 'blue', 'green'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Put bbbs objects in the first row, in column 1, 4, and 7. The horizontal bridge and the lower vertical bridge are yellow, the other vertical bridge is blue, and the screw is green. Place three more bbbs objects in the same colors in the 5th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 4):\n    for col in range(0, 8, 3):\n        bbbs(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbw": [
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbw' objects, each taking a 2x3 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a bbbw object in the top left corner. The upper horizontal bridge is blue, the other one is red, the vertical bridge is green, and the washer is blue. Put another one in the 3rd row and column. The last bbbw object is positioned in the 5th row, 5th column. It has the same colors as the two objects before.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbn": [
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'green', 'yellow'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bwbn objects on the diagonal from the top left corner to the bottom right corner. The objects are all placed in odd rows. Each object includes a blue washer and horizontal bridge, a yellow nut, and a green vertical bridge.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bwbn' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'blue', 'red', 'yellow'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position 9 bwbn objects on the board. Each has a red vertical bridge, a green horizontal bridge, a yellow nut, and a blue washer. Place one object in the top left corner, and two more in the same row, in columns 4 and 7. Add three more objects in the 4th row, in the same three columns. Repeat the process for the 7th row.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbn": [
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbn(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbn(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nwbn' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'red', 'green', 'yellow'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbn(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbn(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place one nwbn object with an upper red nut, a lower yellow nut, a red washer and a green bridge in the top left corner. Position another one in the 7th row and column. Put 5 more nwbn objects in the same colors on the diagonal between the first two objects.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbn(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbn(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbn(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbn(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nwbn' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['yellow', 'red', 'blue', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbn(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbn(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four nwbn objects in the first row, in the 1st, 3rd, 5th, and 7th column. The nut in the upper part is yellow, the one in the lower part is red, the washer is red as well, and the bridge is blue. Position four more of these objects in the 4th row, in the same columns. Add another four in the 7th row, in the same columns as well.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbn(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwbn(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "5": {
                "bbbws": [
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbws' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'green', 'red', 'green', 'blue'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a bbbws object on the top left corner. The left vertical bridge is blue, the right one is green, the horizontal bridge is red, the washer is green, and the screw is blue. Place three more objects of the same type and color on the board. One in row and column 3, another one in row and column 5, and the last bbbws object in row and column 7.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbwn": [
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbwn(board, colors=['red', 'yellow', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbwn(board, colors=['red', 'yellow', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbwn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'yellow', 'blue', 'green', 'red'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbwn(board, colors=['red', 'yellow', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbwn(board, colors=['red', 'yellow', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right corner with bwbwn objects, just leave the last square empty. The 7 bwbwn objects are composed of a blue horizontal bridge, a red vertical bridge, a red nut, a yellow washer on the right, and a green washer on the left.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbwn(board, colors=['red', 'yellow', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbwn(board, colors=['red', 'yellow', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbnw": [
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['green', 'green', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['green', 'green', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbnw' objects, each taking a 3x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'green', 'red', 'yellow', 'red'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['green', 'green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['green', 'green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three bbbnw objects on the diagonal from the top left to the bottom right. They are positioned in row 1, 3, and 5. The washer and the upper vertical bridge are red, the other vertical bridge and the horizontal bridge are green, and the nut is yellow.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['green', 'green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (2, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['green', 'green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbwn": [
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbwn(board, colors=['blue', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbwn(board, colors=['blue', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbwn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'yellow', 'red', 'yellow', 'blue'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbwn(board, colors=['blue', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbwn(board, colors=['blue', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place four bbbwn objects on the diagonal from the top left corner to the bottom right corner, placing one in each odd row. The objects are composed of a blue nut and a blue horizontal bridge in the upper part, a yellow horizontal bridge in the lower part, a yellow washer, and a red vertical bridge.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbwn(board, colors=['blue', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbwn(board, colors=['blue', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbns": [
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbns(board, colors=['green', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbns(board, colors=['green', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbns' objects, each taking a 2x3 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'green', 'yellow', 'green', 'yellow'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbns(board, colors=['green', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbns(board, colors=['green', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 6th row, 6th column with bbbns objects composed of a yellow screw and a yellow horizontal bridge on the left side, and three other parts which are green.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbns(board, colors=['green', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (0, 2), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbns(board, colors=['green', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbws": [
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nbbws' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'yellow', 'red', 'yellow'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position four nbbws objects on the board which include a blue nut and horizontal bridge, a yellow vertical bridge and screw, and a red washer. They are placed in the 1st row and column, in the 3rd row and column, in the 5th row and column, and finally, in the 7th row and column. ",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbwn": [
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbwn(board, colors=['red', 'red', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbwn(board, colors=['red', 'red', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbwn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'red', 'yellow', 'green', 'yellow'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbwn(board, colors=['red', 'red', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbwn(board, colors=['red', 'red', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 7 bnbwn objects on the diagonal from the top left corner to the square in row 7, column 7. The objects are composed of a green washer, a red horizontal bridge, a yellow vertical bridge, a red nut in the lower part, and a yellow nut on top of all.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbwn(board, colors=['red', 'red', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbwn(board, colors=['red', 'red', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbws": [
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbws(board, colors=['blue', 'blue', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbws(board, colors=['blue', 'blue', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbws' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'green', 'red', 'green'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbws(board, colors=['blue', 'blue', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbws(board, colors=['blue', 'blue', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "erere",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbws(board, colors=['blue', 'blue', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbws(board, colors=['blue', 'blue', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbws(board, colors=['green', 'green', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbws(board, colors=['green', 'green', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bwbws' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'green', 'yellow', 'green', 'blue'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbws(board, colors=['green', 'green', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbws(board, colors=['green', 'green', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a bwbws object in the top left corner. The horizontal bridge is green, the vertical bridge is yellow, the washers are green, and the screw is blue. Place two more bwbws objects in the same colors in the same row, in the 4th and 7th column. Put three bwbws objects in the same colors in both the 4th and 7th row as well, in the 1st, 4th, and 7th column for both rows.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbws(board, colors=['green', 'green', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bwbws(board, colors=['green', 'green', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbns": [
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wbbns' objects, each taking a 3x1 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'green', 'red', 'blue', 'yellow'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position one wbbns object in the top left corner and another one in the 6th row, 6th column. Place four more wbbns objects on the diagonal between them. All objects are composed of a yellow washer and screw, a blue nut, a green bridge at the bottom and a red bridge above.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbnw": [
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbnw' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'green', 'yellow', 'green', 'yellow'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left to the bottom right with bnbnw objects, leaving only the last column empty. The seven objects are composed of a blue vertical bridge, two green nuts, a yellow horizontal bridge, and a yellow washer.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbns": [
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wnbns' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'yellow', 'blue', 'green', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a wnbns object in the top left corner. Place another one in the 7th row, 7th column. Now put 5 more wnbns objects on the diagonal between the first two objects. Each object includes a green nut on the left, a yellow nut on the right, a blue bridge, a green washer and a yellow screw.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wnbns' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'blue', 'yellow', 'green', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a wnbns object in the top left corner and add three more in the same row, in the 3rd, 5th, and 7th column. The washer and the lower nut are blue, the nut in the upper part is green, the bridge is yellow, and the screw is red.  Place four more wnbns objects in the 4th row, in the same columns. The objects are colored in the same ways as the first 4. Position the last for wnbns in the same colors in the 7th row, in the same columns.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbns": [
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbns(board, colors=['blue', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbns(board, colors=['blue', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbns' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'blue', 'green', 'yellow', 'red'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbns(board, colors=['blue', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbns(board, colors=['blue', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right with bnbns objects and leave the last square in the bottom right corner empty. The objects have a blue vertical bridge, a green horizontal bridge, a red screw, a yellow nut on the left, and a blue nut on the right.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbns(board, colors=['blue', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbns(board, colors=['blue', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbws": [
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbws(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbws(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbws' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['green', 'yellow', 'blue', 'green', 'yellow'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbws(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbws(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 4 bnbws objects in the diagonal from the top left corner to the bottom right corner. One is placed in the top left corner, the next one is positioned in row and column 3. Another bnbws object is placed in row and column 5, and the last object is positioned in the 7th row and column. All four objects habe a green horizontal bridge, a blue vertical bridge, a yellow nut, a green washer, and a yellow screw.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbws(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbws(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'blue', 'green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'blue', 'green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnbws' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['blue', 'blue', 'green', 'red', 'blue'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'blue', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'blue', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Position a bnbws object in column 1, 4, and 7 for row 1, 4, and 7. The objects include a blue horizontal bridge, a green vertical bridge, a blue screw and nut, and a red washer.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'blue', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'blue', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbnw": [
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbnw' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['yellow', 'yellow', 'red', 'green', 'yellow'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place 7 bwbnw objects on the diagonal from the top left to the bottom right. Place one in each of the rows 1-7. The vertical bridge and the washers are yellow, the nut is green, and the horizontal bridge is red.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbws": [
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbws(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbws(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nnbws' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'blue', 'green', 'yellow', 'red'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbws(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbws(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row and column with nnbws objects. They are composed of a red washer on the left and a blue washer on the right, a green bridge, a yellow washer, and a red screw.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbws(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nnbws(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbns": [
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbns(board, colors=['blue', 'yellow', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbns(board, colors=['blue', 'yellow', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wwbns' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'yellow', 'green', 'blue', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbns(board, colors=['blue', 'yellow', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbns(board, colors=['blue', 'yellow', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row and column with 7 wwbns objects. They include a blue washer and nut on the left, a red screw, a green bridge, and a yellow washer on the right.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbns(board, colors=['blue', 'yellow', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wwbns(board, colors=['blue', 'yellow', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwbns(board, colors=['green', 'green', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwbns(board, colors=['green', 'green', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wwbns' object in alternating columns of the first row, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.  Use only these colors: ['green', 'green', 'yellow', 'blue', 'yellow'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwbns(board, colors=['green', 'green', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwbns(board, colors=['green', 'green', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place three wwbns objects in the first row, in column 1, 4, and 7. The washers are green, the screw and the bridge are yellow, and the nut is blue. Repeat step 1 for the other three odd rows.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwbns(board, colors=['green', 'green', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        wwbns(board, colors=['green', 'green', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbns": [
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbns' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['red', 'blue', 'green', 'red', 'yellow'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the bottom right with bwbns objects. Leave only the bottom right corner empty, placing therefore 7 objects on the board. The objects have a red nut and horizontal bridge, the screw is yellow, the vertical bridge is green, and the washer is blue.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbws": [
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'green', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'green', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nwbws' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.  Use only these colors: ['blue', 'green', 'yellow', 'green', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'green', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'green', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            },
                            "regular_hai": {
                                "template_name": "human_written_instruction",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the diagonal from the top left corner to the square in the 7th row and column with seven nwbws objects. They contain a blue nut, green washers, a yellow bridge, and a red screw.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'green', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'green', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        }
    }
}