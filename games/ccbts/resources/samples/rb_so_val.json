{
    "regular": {
        "simple": {
            "2": {
                "nw": [
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=x, y=y)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=x, y=y)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed1.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template1.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=x, y=y)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=x, y=y)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nw' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    nw(board, colors=['yellow', 'green'], x=row, y=3)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    nw(board, colors=['yellow', 'green'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nw' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    nw(board, colors=['yellow', 'green'], x=row, y=3)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    nw(board, colors=['yellow', 'green'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['yellow', 'green'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nw(board, colors=['yellow', 'green'],x=row, y=col)            ",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['yellow', 'green'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nw(board, colors=['yellow', 'green'],x=row, y=col)            "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed7.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template7.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from top-left corner, fill the grid diagonally with the 'nw' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the top-right corner, repeat the diagonal fill.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['yellow', 'green'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nw(board, colors=['yellow', 'green'],x=row, y=col)            ",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nw(board, colors=['yellow', 'green'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nw(board, colors=['yellow', 'green'],x=row, y=col)            "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['blue', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=7, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['blue', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=7, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed8.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template8.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'nw' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, fill the last row and the last column with the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['blue', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=7, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['blue', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nw(board, colors=['blue', 'green'],x=7, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['green', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=0, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['green', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'nw' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['green', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=0, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nw(board, colors=['green', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nw(board, colors=['green', 'yellow'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "\nfor row in [0, 3, 7]:\n    nw(board, colors=['blue', 'green'], x=row, y=0)\n    nw(board, colors=['blue', 'green'], x=row, y=4)\n    nw(board, colors=['blue', 'green'], x=row, y=7)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    nw(board, colors=['blue', 'green'], x=row, y=0)\n    nw(board, colors=['blue', 'green'], x=row, y=4)\n    nw(board, colors=['blue', 'green'], x=row, y=7)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed10.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template10.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fifth, and last columns of the first row, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, repeat this placement pattern in the fourth row and the last row.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "\nfor row in [0, 3, 7]:\n    nw(board, colors=['blue', 'green'], x=row, y=0)\n    nw(board, colors=['blue', 'green'], x=row, y=4)\n    nw(board, colors=['blue', 'green'], x=row, y=7)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    nw(board, colors=['blue', 'green'], x=row, y=0)\n    nw(board, colors=['blue', 'green'], x=row, y=4)\n    nw(board, colors=['blue', 'green'], x=row, y=7)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for col in range(0, 8, 1):\n    nw(board, colors=['green', 'red'], x=0, y=col)\n    nw(board, colors=['green', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nw(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    nw(board, colors=['green', 'red'], x=0, y=col)\n    nw(board, colors=['green', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nw(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed11.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template11.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first and last rows with the 'nw' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the 7th column of the 1st row, fill the grid diagonally with the 'nw' object until you reach the 1st column of the 7th row.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for col in range(0, 8, 1):\n    nw(board, colors=['green', 'red'], x=0, y=col)\n    nw(board, colors=['green', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nw(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    nw(board, colors=['green', 'red'], x=0, y=col)\n    nw(board, colors=['green', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nw(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ns": [
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=x, y=y)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=x, y=y)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed1.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template1.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=x, y=y)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=x, y=y)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'ns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1 ):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    ns(board, colors=['yellow', 'red'], x=3, y=col)    ",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1 ):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    ns(board, colors=['yellow', 'red'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'ns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1 ):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    ns(board, colors=['yellow', 'red'], x=3, y=col)    ",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1 ):\n    ns(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    ns(board, colors=['yellow', 'red'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['blue', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ns(board, colors=['blue', 'red'],x=row, y=col)            ",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['blue', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ns(board, colors=['blue', 'red'],x=row, y=col)            "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed7.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template7.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from top-left corner, fill the grid diagonally with the 'ns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the top-right corner, repeat the diagonal fill.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['blue', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ns(board, colors=['blue', 'red'],x=row, y=col)            ",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ns(board, colors=['blue', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ns(board, colors=['blue', 'red'],x=row, y=col)            "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['green', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=7, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['green', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=7, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed8.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template8.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'ns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, fill the last row and the last column with the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['green', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=7, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['green', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ns(board, colors=['green', 'red'],x=7, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=0, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'ns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=0, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ns(board, colors=['yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ns(board, colors=['yellow', 'green'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "\nfor row in [0, 3, 7]:\n    ns(board, colors=['green', 'red'], x=row, y=0)\n    ns(board, colors=['green', 'red'], x=row, y=4)\n    ns(board, colors=['green', 'red'], x=row, y=7)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    ns(board, colors=['green', 'red'], x=row, y=0)\n    ns(board, colors=['green', 'red'], x=row, y=4)\n    ns(board, colors=['green', 'red'], x=row, y=7)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed10.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template10.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fifth, and last columns of the first row, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, repeat this placement pattern in the fourth row and the last row.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "\nfor row in [0, 3, 7]:\n    ns(board, colors=['green', 'red'], x=row, y=0)\n    ns(board, colors=['green', 'red'], x=row, y=4)\n    ns(board, colors=['green', 'red'], x=row, y=7)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    ns(board, colors=['green', 'red'], x=row, y=0)\n    ns(board, colors=['green', 'red'], x=row, y=4)\n    ns(board, colors=['green', 'red'], x=row, y=7)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for col in range(0, 8, 1):\n    ns(board, colors=['blue', 'yellow'], x=0, y=col)\n    ns(board, colors=['blue', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ns(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    ns(board, colors=['blue', 'yellow'], x=0, y=col)\n    ns(board, colors=['blue', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ns(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed11.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template11.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first and last rows with the 'ns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the 7th column of the 1st row, fill the grid diagonally with the 'ns' object until you reach the 1st column of the 7th row.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for col in range(0, 8, 1):\n    ns(board, colors=['blue', 'yellow'], x=0, y=col)\n    ns(board, colors=['blue', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ns(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    ns(board, colors=['blue', 'yellow'], x=0, y=col)\n    ns(board, colors=['blue', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ns(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ws": [
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ws(board, colors=['green', 'yellow'], x=x, y=y)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ws(board, colors=['green', 'yellow'], x=x, y=y)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed1.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template1.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ws(board, colors=['green', 'yellow'], x=x, y=y)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    ws(board, colors=['green', 'yellow'], x=x, y=y)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'ws' object, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        ws(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    ws(board, colors=['red', 'green'], x=row, y=3)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ws(board, colors=['red', 'green'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'ws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    ws(board, colors=['red', 'green'], x=row, y=3)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    ws(board, colors=['red', 'green'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ws(board, colors=['yellow', 'red'],x=row, y=col)            ",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ws(board, colors=['yellow', 'red'],x=row, y=col)            "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed7.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template7.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from top-left corner, fill the grid diagonally with the 'ws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the top-right corner, repeat the diagonal fill.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ws(board, colors=['yellow', 'red'],x=row, y=col)            ",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            ws(board, colors=['yellow', 'red'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            ws(board, colors=['yellow', 'red'],x=row, y=col)            "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=7, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=7, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed8.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template8.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'ws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, fill the last row and the last column with the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=7, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    ws(board, colors=['green', 'blue'],x=7, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=0, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'ws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=0, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            ws(board, colors=['green', 'blue'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    ws(board, colors=['green', 'blue'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "\nfor row in [0, 3, 7]:\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n    ws(board, colors=['green', 'blue'], x=row, y=4)\n    ws(board, colors=['green', 'blue'], x=row, y=7)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n    ws(board, colors=['green', 'blue'], x=row, y=4)\n    ws(board, colors=['green', 'blue'], x=row, y=7)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed10.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template10.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fifth, and last columns of the first row, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, repeat this placement pattern in the fourth row and the last row.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "\nfor row in [0, 3, 7]:\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n    ws(board, colors=['green', 'blue'], x=row, y=4)\n    ws(board, colors=['green', 'blue'], x=row, y=7)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    ws(board, colors=['green', 'blue'], x=row, y=0)\n    ws(board, colors=['green', 'blue'], x=row, y=4)\n    ws(board, colors=['green', 'blue'], x=row, y=7)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for col in range(0, 8, 1):\n    ws(board, colors=['green', 'yellow'], x=0, y=col)\n    ws(board, colors=['green', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ws(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    ws(board, colors=['green', 'yellow'], x=0, y=col)\n    ws(board, colors=['green', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ws(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed11.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template11.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first and last rows with the 'ws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the 7th column of the 1st row, fill the grid diagonally with the 'ws' object until you reach the 1st column of the 7th row.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for col in range(0, 8, 1):\n    ws(board, colors=['green', 'yellow'], x=0, y=col)\n    ws(board, colors=['green', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ws(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    ws(board, colors=['green', 'yellow'], x=0, y=col)\n    ws(board, colors=['green', 'yellow'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            ws(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wn": [
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=x, y=y)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=x, y=y)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed1.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template1.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=x, y=y)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=x, y=y)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wn' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wn' object in alternating columns of the first row, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'wn' object, each occupying a 1x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 2):\n        wn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1 ):\n    wn(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wn(board, colors=['yellow', 'red'], x=3, y=col)    ",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1 ):\n    wn(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wn(board, colors=['yellow', 'red'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wn' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1 ):\n    wn(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wn(board, colors=['yellow', 'red'], x=3, y=col)    ",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1 ):\n    wn(board, colors=['yellow', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wn(board, colors=['yellow', 'red'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wn(board, colors=['red', 'yellow'],x=row, y=col)            ",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wn(board, colors=['red', 'yellow'],x=row, y=col)            "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed7.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template7.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from top-left corner, fill the grid diagonally with the 'wn' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the top-right corner, repeat the diagonal fill.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wn(board, colors=['red', 'yellow'],x=row, y=col)            ",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wn(board, colors=['red', 'yellow'],x=row, y=col)            "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=7, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=7, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed8.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template8.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'wn' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, fill the last row and the last column with the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=7, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wn(board, colors=['red', 'yellow'],x=7, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=0, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'wn' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=0, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wn(board, colors=['red', 'yellow'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    wn(board, colors=['red', 'yellow'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "\nfor row in [0, 3, 7]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=0)\n    wn(board, colors=['yellow', 'blue'], x=row, y=4)\n    wn(board, colors=['yellow', 'blue'], x=row, y=7)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=0)\n    wn(board, colors=['yellow', 'blue'], x=row, y=4)\n    wn(board, colors=['yellow', 'blue'], x=row, y=7)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed10.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template10.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fifth, and last columns of the first row, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, repeat this placement pattern in the fourth row and the last row.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "\nfor row in [0, 3, 7]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=0)\n    wn(board, colors=['yellow', 'blue'], x=row, y=4)\n    wn(board, colors=['yellow', 'blue'], x=row, y=7)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=0)\n    wn(board, colors=['yellow', 'blue'], x=row, y=4)\n    wn(board, colors=['yellow', 'blue'], x=row, y=7)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for col in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=0, y=col)\n    wn(board, colors=['blue', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wn(board, colors=['blue', 'red'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=0, y=col)\n    wn(board, colors=['blue', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wn(board, colors=['blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed11.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template11.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first and last rows with the 'wn' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the 7th column of the 1st row, fill the grid diagonally with the 'wn' object until you reach the 1st column of the 7th row.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for col in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=0, y=col)\n    wn(board, colors=['blue', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wn(board, colors=['blue', 'red'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    wn(board, colors=['blue', 'red'], x=0, y=col)\n    wn(board, colors=['blue', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wn(board, colors=['blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bw": [
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bw' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bw(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bw' object in alternating columns of the first row, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bw' object, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        bw(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    bw(board, colors=['red', 'blue'], x=row, y=3)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bw(board, colors=['red', 'blue'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bw' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    bw(board, colors=['red', 'blue'], x=row, y=3)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bw(board, colors=['red', 'blue'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    bw(board, colors=['red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bw(board, colors=['red', 'green'], x=3, y=col)    ",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bw(board, colors=['red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bw(board, colors=['red', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bw' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    bw(board, colors=['red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bw(board, colors=['red', 'green'], x=3, y=col)    ",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bw(board, colors=['red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bw(board, colors=['red', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bs": [
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bs' objects, each taking a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bs(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bs' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bn": [
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bn' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bn(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bn' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    bn(board, colors=['yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bn(board, colors=['yellow', 'blue'], x=3, y=col)    ",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bn(board, colors=['yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bn(board, colors=['yellow', 'blue'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bn' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    bn(board, colors=['yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bn(board, colors=['yellow', 'blue'], x=3, y=col)    ",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bn(board, colors=['yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bn(board, colors=['yellow', 'blue'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "3": {
                "nbb": [
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nbb' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=0, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'nbb' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=0, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbb(board, colors=['yellow', 'yellow', 'blue'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bns": [
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bns' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bns' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        bns(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 2 ):\n    bns(board, colors=['red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bns(board, colors=['red', 'yellow', 'green'], x=3, y=col)    ",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bns(board, colors=['red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bns(board, colors=['red', 'yellow', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bns' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2 ):\n    bns(board, colors=['red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bns(board, colors=['red', 'yellow', 'green'], x=3, y=col)    ",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bns(board, colors=['red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bns(board, colors=['red', 'yellow', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbb": [
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbb' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbb(board, colors=['green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbb(board, colors=['blue', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=0, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbb(board, colors=['blue', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bbb' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbb(board, colors=['blue', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=0, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbb(board, colors=['blue', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbb(board, colors=['blue', 'blue', 'red'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nws": [
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nws' objects, each taking a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 1 ):\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nws(board, colors=['green', 'blue', 'red'], x=3, y=col)    ",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1 ):\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nws(board, colors=['green', 'blue', 'red'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 1 ):\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nws(board, colors=['green', 'blue', 'red'], x=3, y=col)    ",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1 ):\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nws(board, colors=['green', 'blue', 'red'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nws(board, colors=['green', 'yellow', 'blue'], x=x, y=y)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nws(board, colors=['green', 'yellow', 'blue'], x=x, y=y)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed1.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template1.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nws(board, colors=['green', 'yellow', 'blue'], x=x, y=y)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    nws(board, colors=['green', 'yellow', 'blue'], x=x, y=y)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)            ",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)            "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed7.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template7.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from top-left corner, fill the grid diagonally with the 'nws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the top-right corner, repeat the diagonal fill.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)            ",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            nws(board, colors=['blue', 'green', 'yellow'],x=row, y=col)            "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=7, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=7, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed8.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template8.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'nws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, fill the last row and the last column with the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=7, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    nws(board, colors=['green', 'yellow', 'green'],x=7, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=0, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'nws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=0, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(1, 8, 1):\n    nws(board, colors=['red', 'yellow', 'green'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "\nfor row in [0, 3, 7]:\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=0)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=4)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=7)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=0)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=4)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=7)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed10.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template10.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fifth, and last columns of the first row, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, repeat this placement pattern in the fourth row and the last row.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "\nfor row in [0, 3, 7]:\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=0)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=4)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=7)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=0)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=4)\n    nws(board, colors=['yellow', 'red', 'blue'], x=row, y=7)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for col in range(0, 8, 1):\n    nws(board, colors=['red', 'yellow', 'red'], x=0, y=col)\n    nws(board, colors=['red', 'yellow', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nws(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    nws(board, colors=['red', 'yellow', 'red'], x=0, y=col)\n    nws(board, colors=['red', 'yellow', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nws(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed11.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template11.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first and last rows with the 'nws' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the 7th column of the 1st row, fill the grid diagonally with the 'nws' object until you reach the 1st column of the 7th row.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for col in range(0, 8, 1):\n    nws(board, colors=['red', 'yellow', 'red'], x=0, y=col)\n    nws(board, colors=['red', 'yellow', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nws(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    nws(board, colors=['red', 'yellow', 'red'], x=0, y=col)\n    nws(board, colors=['red', 'yellow', 'red'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            nws(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwb": [
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nwb' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nwb' object, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnb": [
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'nnb' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nnb' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    nnb(board, colors=['blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnb(board, colors=['blue', 'red', 'green'], x=3, y=col)    ",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nnb(board, colors=['blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnb(board, colors=['blue', 'red', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nnb' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    nnb(board, colors=['blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnb(board, colors=['blue', 'red', 'green'], x=3, y=col)    ",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nnb(board, colors=['blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnb(board, colors=['blue', 'red', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbb": [
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbb(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbb(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wbb' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbb(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        wbb(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wbb(board, colors=['green', 'green', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=0, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wbb(board, colors=['green', 'green', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'wbb' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wbb(board, colors=['green', 'green', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=0, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wbb(board, colors=['green', 'green', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    wbb(board, colors=['green', 'green', 'red'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnb": [
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'wnb' object, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnw": [
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bnw' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        bnw(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 1):\n    bnw(board, colors=['red', 'green', 'red'], x=row, y=3)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    bnw(board, colors=['red', 'green', 'red'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bnw' object, each occupying a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 1):\n    bnw(board, colors=['red', 'green', 'red'], x=row, y=3)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    bnw(board, colors=['red', 'green', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 2 ):\n    bnw(board, colors=['green', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bnw(board, colors=['green', 'yellow', 'green'], x=3, y=col)    ",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bnw(board, colors=['green', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bnw(board, colors=['green', 'yellow', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bnw' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2 ):\n    bnw(board, colors=['green', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bnw(board, colors=['green', 'yellow', 'green'], x=3, y=col)    ",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bnw(board, colors=['green', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bnw(board, colors=['green', 'yellow', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwb": [
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    wwb(board, colors=['blue', 'red', 'yellow'], x=row, y=3)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    wwb(board, colors=['blue', 'red', 'yellow'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wwb' object, each occupying a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    wwb(board, colors=['blue', 'red', 'yellow'], x=row, y=3)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    wwb(board, colors=['blue', 'red', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wns": [
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 1):\n    wns(board, colors=['red', 'green', 'yellow'], x=row, y=3)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    wns(board, colors=['red', 'green', 'yellow'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 1):\n    wns(board, colors=['red', 'green', 'yellow'], x=row, y=3)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    wns(board, colors=['red', 'green', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'green'], x=x, y=y)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'green'], x=x, y=y)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed1.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template1.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'green'], x=x, y=y)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor x, y in [[0,0], [0,7], [8-1, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'green'], x=x, y=y)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)            ",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)            "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed7.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template7.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from top-left corner, fill the grid diagonally with the 'wns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the top-right corner, repeat the diagonal fill.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)            ",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\ndr_locations = []\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)\n            dr_locations.append((row, col))\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(7 - use_cols, -1, -1):\n        if row == 8 - 1 - col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            if (row, col) in dr_locations:\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()        \n            wns(board, colors=['green', 'yellow', 'blue'],x=row, y=col)            "
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wns(board, colors=['blue', 'yellow', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=7, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wns(board, colors=['blue', 'yellow', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=7, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed8.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template8.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'wns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, fill the last row and the last column with the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wns(board, colors=['blue', 'yellow', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=7, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            wns(board, colors=['blue', 'yellow', 'red'],x=row, y=col)\n\nfor row in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=row, y=7)\n\nfor col in range(0, 7, 1):\n    wns(board, colors=['blue', 'yellow', 'red'],x=7, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "\nfor row in [0, 3, 7]:\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=0)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=4)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=7)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=0)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=4)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=7)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed10.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template10.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fifth, and last columns of the first row, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, repeat this placement pattern in the fourth row and the last row.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "\nfor row in [0, 3, 7]:\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=0)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=4)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=7)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\n\nfor row in [0, 3, 7]:\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=0)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=4)\n    wns(board, colors=['yellow', 'blue', 'yellow'], x=row, y=7)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for col in range(0, 8, 1):\n    wns(board, colors=['green', 'red', 'green'], x=0, y=col)\n    wns(board, colors=['green', 'red', 'green'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wns(board, colors=['green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    wns(board, colors=['green', 'red', 'green'], x=0, y=col)\n    wns(board, colors=['green', 'red', 'green'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wns(board, colors=['green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed11.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template11.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first and last rows with the 'wns' object, each occupying a 1x1 space. Continue until there's insufficient space at the grid's end for a full object. Then, starting from the 7th column of the 1st row, fill the grid diagonally with the 'wns' object until you reach the 1st column of the 7th row.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for col in range(0, 8, 1):\n    wns(board, colors=['green', 'red', 'green'], x=0, y=col)\n    wns(board, colors=['green', 'red', 'green'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wns(board, colors=['green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor col in range(0, 8, 1):\n    wns(board, colors=['green', 'red', 'green'], x=0, y=col)\n    wns(board, colors=['green', 'red', 'green'], x=7, y=col)\n\n\nuse_rows = 0 if 1 == 1 else 0\nuse_cols = 0 if 1 == 1 else 0\n\nfor row in range( 1, 8 - use_rows):\n    for col in range(6, 0, -1):\n        if row == 8 - 1 - col:\n            wns(board, colors=['green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bws": [
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    bws(board, colors=['green', 'red', 'blue'], x=row, y=3)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    bws(board, colors=['green', 'red', 'blue'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bws' object, each occupying a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    bws(board, colors=['green', 'red', 'blue'], x=row, y=3)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    bws(board, colors=['green', 'red', 'blue'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "4": {
                "nbbn": [
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nbbn' objects, each taking a 3x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (2, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 3 == 1 else 2\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nbbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbs": [
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbs' objects, each taking a 2x3 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1), (1, 2)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 3 == 1 else 2\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbn": [
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bnbn' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    bnbn(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=3)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bnbn(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bnbn' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    bnbn(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=3)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bnbn(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbw": [
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'wnbw' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            wnbw(board, colors=['green', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbw": [
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbw(board, colors=['yellow', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbw(board, colors=['yellow', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bbbw' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbw(board, colors=['yellow', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbw(board, colors=['yellow', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    bbbw(board, colors=['blue', 'yellow', 'green', 'red'], x=row, y=3)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bbbw(board, colors=['blue', 'yellow', 'green', 'red'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bbbw' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    bbbw(board, colors=['blue', 'yellow', 'green', 'red'], x=row, y=3)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bbbw(board, colors=['blue', 'yellow', 'green', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbs": [
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbs(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbs(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'wwbs' object in alternating columns of the first row, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbs(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 2):\n        wwbs(board, colors=['yellow', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=3, y=col)    ",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wwbs' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=3, y=col)    ",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbs(board, colors=['yellow', 'red', 'green', 'red'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbb": [
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bbbb' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbb(board, colors=['green', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbs": [
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnbs' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbs": [
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nwbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nwbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nwbs' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nwbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nwbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=3, y=col)    ",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nwbs' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=3, y=col)    ",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbw": [
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nnbw' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        nnbw(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbw": [
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwbw(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwbw(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'nwbw' object, each occupying a 2x1 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwbw(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 2):\n        nwbw(board, colors=['green', 'green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbn": [
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bwbn' object, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbn(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbn": [
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    wbbn(board, colors=['red', 'red', 'yellow', 'green'], x=row, y=3)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    wbbn(board, colors=['red', 'red', 'yellow', 'green'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wbbn' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    wbbn(board, colors=['red', 'red', 'yellow', 'green'], x=row, y=3)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    wbbn(board, colors=['red', 'red', 'yellow', 'green'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbs": [
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    nbbs(board, colors=['blue', 'blue', 'green', 'yellow'], x=row, y=3)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    nbbs(board, colors=['blue', 'blue', 'green', 'yellow'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nbbs' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    nbbs(board, colors=['blue', 'blue', 'green', 'yellow'], x=row, y=3)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    nbbs(board, colors=['blue', 'blue', 'green', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=0, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'nbbs' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=0, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            nbbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    nbbs(board, colors=['red', 'green', 'yellow', 'green'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwns": [
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(0, 8, 2 ):\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=3, y=col)    ",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bwns' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(0, 8, 2 ):\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=3, y=col)    ",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    bwns(board, colors=['green', 'red', 'yellow', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbs": [
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=3, y=col)    ",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wnbs' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=3, y=col)    ",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbs(board, colors=['green', 'blue', 'red', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbn": [
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbbn(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=0, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbbn(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bbbn' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbbn(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=0, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bbbn(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bbbn(board, colors=['green', 'red', 'blue', 'yellow'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbw": [
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=0, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bnbw' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=0, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbw(board, colors=['red', 'yellow', 'blue', 'red'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbw": [
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=0, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bwbw' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=0, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbw(board, colors=['blue', 'yellow', 'green', 'blue'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "5": {
                "nwbws": [
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'nwbws' objects, each taking a 2x1 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 1 == 1 else 0\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            nwbws(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=3)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nwbws' object, each occupying a 1x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=3)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=3, y=col)    ",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nwbws' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=3, y=col)    ",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nwbws(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbnw": [
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['blue', 'yellow', 'green', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['blue', 'yellow', 'green', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bbbnw' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['blue', 'yellow', 'green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bbbnw(board, colors=['blue', 'yellow', 'green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbnw": [
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['green', 'red', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['green', 'red', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbnw' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['green', 'red', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 0)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbnw(board, colors=['green', 'red', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=0, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bwbnw' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=0, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbnw(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbns": [
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed2.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template2.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Start from the top-left corner and diagonally place 'bwbns' objects, each taking a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            skip_row_col = ()\n            bwbns(board, colors=['red', 'blue', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbns(board, colors=['green', 'green', 'blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbns(board, colors=['green', 'green', 'blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bwbns' object, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbns(board, colors=['green', 'green', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bwbns(board, colors=['green', 'green', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbwn": [
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbwn(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbwn(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bbbwn' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbwn(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bbbwn(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbns": [
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnbns' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=0, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bnbns' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=0, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbws": [
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'red', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'red', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnbws' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'red', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['blue', 'red', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'bnbws' object, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    for col in range(0, 8, 3):\n        bnbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    bnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'], x=row, y=3)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bnbws' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    bnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'], x=row, y=3)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbwn": [
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbwn(board, colors=['red', 'green', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbwn(board, colors=['red', 'green', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed3.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template3.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, place the 'bnbwn' object in alternating columns of the first row, each occupying a 2x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then, repeat this pattern in alternating rows.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbwn(board, colors=['red', 'green', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 3):\n    for col in range(0, 8, 3):\n        bnbwn(board, colors=['red', 'green', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=0, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bnbwn' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=0, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bnbwn(board, colors=['yellow', 'blue', 'green', 'red', 'green'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbns": [
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 4):\n        wbbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 4):\n        wbbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'wbbns' object, each occupying a 1x3 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 4):\n        wbbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 4):\n        wbbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbns": [
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        wnbns(board, colors=['red', 'red', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        wnbns(board, colors=['red', 'red', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed4.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template4.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the first column with the 'wnbns' object, each occupying a 1x2 space.  Continue until there's insufficient space at the grid's end for a full object. Then repeat this action in every alternate column.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        wnbns(board, colors=['red', 'red', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 1):\n    for col in range(0, 8, 3):\n        wnbns(board, colors=['red', 'red', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=3, y=col)    ",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wnbns' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=3, y=col)    ",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wnbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbns": [
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    bbbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'], x=row, y=3)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bbbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'bbbns' object, each occupying a 2x3 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    bbbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'], x=row, y=3)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    bbbns(board, colors=['blue', 'blue', 'yellow', 'green', 'red'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbws": [
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2):\n    nbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=3)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    nbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=3)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed5.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template5.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nbbws' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2):\n    nbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=3)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2):\n    nbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=3)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbwn": [
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=0, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=0, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed9.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template9.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid diagonally with the 'bwbwn' object, each occupying a 2x2 space. Continue until there's insufficient space at the grid's end for a full object. Additionally, fill the first row and the first column with the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "def is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=0, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\ndef is_overlap(row, col, cur_row_col):\n    all_locations = []\n    for dx, dy in [(0, 0), (0, 1), (1, 1)]:\n        x, y = row + dx, col + dy\n        all_locations.append((x, y))\n    if cur_row_col in all_locations:\n        return True\n    return False\n\n\nuse_rows = 0 if 2 == 1 else 1\nuse_cols = 0 if 2 == 1 else 1\n\nskip_row_col = ()\n\nfor row in range(8 - use_rows):\n    for col in range(8 - use_cols):\n        if row == col:\n            if row > 0 and col > 0 and not skip_row_col and is_overlap(row-1, col-1, (row, col)):\n                skip_row_col = (row, col)\n                continue\n            \n            skip_row_col = ()\n            bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'],x=row, y=col)\n\nfor row in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=row, y=0)\n\nfor col in range(2, 8, 2):\n    bwbwn(board, colors=['blue', 'red', 'green', 'blue', 'yellow'], x=0, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbws": [
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=3, y=col)    ",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'nnbws' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=3, y=col)    ",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    nnbws(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbns": [
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(0, 8, 2 ):\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=3, y=col)    ",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=3, y=col)    "
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed6.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template6.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Fill the fourth column with the 'wwbns' object, each occupying a 2x1 space. Continue until there's insufficient space at the grid's end for a full object. Then do the same for the fourth row.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(0, 8, 2 ):\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=3, y=col)    ",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(0, 8, 2 ):\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=3)\n\nfor col in range(0, 8, 1):\n    if col == 3:\n        continue\n    wwbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=3, y=col)    "
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        }
    }
}