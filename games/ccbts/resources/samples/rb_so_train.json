{
    "regular": {
        "simple": {
            "2": {
                "nw": [
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nw(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nw(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['green', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['blue', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['red', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['red', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['yellow', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['yellow', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['red', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nw' objects diagonally.  Use only these colors: ['blue', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nw(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'blue'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['green', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'blue'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['yellow', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['green', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['yellow', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['blue', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'red'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['blue', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['yellow', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object at all the corners of the grid.  Use only these colors: ['red', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nw(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'green'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'green'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'red'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'red'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nw",
                        "shapes": [
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'nw' object.",
                                        "<Editor>": {
                                            "function": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def nw(board, colors, x, y):\n    shapes = ['nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nw(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bs": [
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bs(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bs(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bs",
                        "shapes": [
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow'] for the 'bs' object.",
                                        "<Editor>": {
                                            "function": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bs(board, colors, x, y):\n    shapes = ['bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bs(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ns": [
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ns(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ns(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['red', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['yellow', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['green', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['yellow', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['red', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['blue', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['yellow', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ns' objects diagonally.  Use only these colors: ['red', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ns(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['blue', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['red', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['green', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['green', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'red'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['blue', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'red'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['yellow', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['yellow', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'green'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object at all the corners of the grid.  Use only these colors: ['blue', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'green'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ns(board, colors=['blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'blue'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'blue'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ns",
                        "shapes": [
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['blue', 'red'], x=row, y=col)",
                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red'] for the 'ns' object.",
                                        "<Editor>": {
                                            "function": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['blue', 'red'], x=row, y=col)",
                                            "total_code": "def ns(board, colors, x, y):\n    shapes = ['nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ns(board, colors=['blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "ws": [
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        ws(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        ws(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['blue', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['red', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['green', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['blue', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['yellow', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['yellow', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['green', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'ws' objects diagonally.  Use only these colors: ['red', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            ws(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['red', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['blue', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'blue'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['green', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'blue'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['red', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['green', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['yellow', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['yellow', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'green'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object at all the corners of the grid.  Use only these colors: ['blue', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'green'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    ws(board, colors=['blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['blue', 'green'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['blue', 'green'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'blue'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'blue'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'red'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'red'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "ws",
                        "shapes": [
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'ws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'ws' object.",
                                        "<Editor>": {
                                            "function": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def ws(board, colors, x, y):\n    shapes = ['washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        ws(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bw": [
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bw(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bw(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'blue'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'blue'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bw",
                        "shapes": [
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow'] for the 'bw' object.",
                                        "<Editor>": {
                                            "function": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bw(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wn": [
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wn(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wn(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['green', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['blue', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['yellow', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['red', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['red', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['yellow', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['yellow', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wn' objects diagonally.  Use only these colors: ['blue', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wn(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['blue', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['red', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'green'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['blue', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'green'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['yellow', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['red', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['green', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['red', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object at all the corners of the grid.  Use only these colors: ['yellow', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wn(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'yellow'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'red'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['blue', 'red'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['blue', 'red'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'blue'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wn",
                        "shapes": [
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['green', 'blue'], x=row, y=col)",
                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue'] for the 'wn' object.",
                                        "<Editor>": {
                                            "function": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['green', 'blue'], x=row, y=col)",
                                            "total_code": "def wn(board, colors, x, y):\n    shapes = ['washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wn(board, colors=['green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bn": [
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'green'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bn(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'yellow'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'green'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'green'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'yellow'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bn(board, colors=['blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'green'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'green'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'red'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'red'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'green'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'green'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'blue'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'blue'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bn",
                        "shapes": [
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow'] for the 'bn' object.",
                                        "<Editor>": {
                                            "function": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0], [0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bn(board, colors=['blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "3": {
                "wwb": [
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'red'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'yellow'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'yellow'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'red'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'yellow'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['green', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['yellow', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'yellow'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwb",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue'] for the 'wwb' object.",
                                        "<Editor>": {
                                            "function": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wwb(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwb": [
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'green'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'blue'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'red'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'blue'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'green'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'green'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'blue'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'blue'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'green'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwb",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow'] for the 'nwb' object.",
                                        "<Editor>": {
                                            "function": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwb(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnw": [
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'green'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'green'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnw(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'yellow'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnw(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'yellow'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'red'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow'] for the 'bnw' object.",
                                        "<Editor>": {
                                            "function": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnw(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bws": [
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'yellow'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'yellow'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'blue'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'blue'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bws(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'yellow'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'green'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'green'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'blue'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bws(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'yellow'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green'] for the 'bws' object.",
                                        "<Editor>": {
                                            "function": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bws(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnb": [
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'yellow'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnb",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow'] for the 'wnb' object.",
                                        "<Editor>": {
                                            "function": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnb(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnb(board, colors=['blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nws": [
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'blue'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'blue'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nws(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'blue'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nws(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['green', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['green', 'yellow', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['yellow', 'green', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['red', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['red', 'green', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['green', 'red', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['green', 'blue', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'nws' objects diagonally.  Use only these colors: ['blue', 'green', 'blue'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            nws(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['red', 'green', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['green', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['red', 'blue', 'red'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['green', 'red', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['green', 'blue', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['yellow', 'red', 'yellow'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['red', 'blue', 'green'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nws",
                        "shapes": [
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nws' object at all the corners of the grid.  Use only these colors: ['blue', 'yellow', 'blue'] for the 'nws' object.",
                                        "<Editor>": {
                                            "function": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    nws(board, colors=['blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wns": [
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'blue'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wns(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'blue'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'blue'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'blue'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wns(board, colors=['yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['green', 'blue', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['green', 'blue', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['yellow', 'green', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['yellow', 'blue', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['blue', 'green', 'blue'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['red', 'blue', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['green', 'yellow', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed14.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template14.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Starting from the top-left corner, fill the grid with 'wns' objects diagonally.  Use only these colors: ['yellow', 'red', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in range(8):\n        if row == col:\n            wns(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['blue', 'red', 'blue'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['red', 'blue', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['green', 'red', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['blue', 'yellow', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['green', 'yellow', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['green', 'blue', 'yellow'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['yellow', 'red', 'green'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wns",
                        "shapes": [
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed15.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template15.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wns' object at all the corners of the grid.  Use only these colors: ['green', 'yellow', 'red'] for the 'wns' object.",
                                        "<Editor>": {
                                            "function": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row, col in [[0,0], [0,7], [7, 0], [7, 7]]:\n    wns(board, colors=['green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnb": [
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['green', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['green', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'green'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'red'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'red'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnb(board, colors=['blue', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['blue', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'green'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'green'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'red'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnb(board, colors=['green', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['red', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnb",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red'] for the 'nnb' object.",
                                        "<Editor>": {
                                            "function": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nnb(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwn": [
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'blue'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwn(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'blue'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'green'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'blue'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwn(board, colors=['green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'blue'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'blue'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red'] for the 'bwn' object.",
                                        "<Editor>": {
                                            "function": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwn(board, colors=['blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bns": [
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'yellow'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'yellow'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bns(board, colors=['yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'blue'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'yellow'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bns(board, colors=['red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green'] for the 'bns' object.",
                                        "<Editor>": {
                                            "function": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bns(board, colors=['yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbb": [
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbb",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue'] for the 'nbb' object.",
                                        "<Editor>": {
                                            "function": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nbb(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbb(board, colors=['yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwb": [
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'green'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwb",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red'] for the 'bwb' object.",
                                        "<Editor>": {
                                            "function": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwb(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbb": [
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['green', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['blue', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['blue', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['blue', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['blue', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbb",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue'] for the 'wbb' object.",
                                        "<Editor>": {
                                            "function": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wbb(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbb(board, colors=['red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbb": [
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red'] for the 'bbb' object.",
                                        "<Editor>": {
                                            "function": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbb(board, colors=['green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnb": [
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['green', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['green', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['green', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['green', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['red', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0], [0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnb",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'green'] for the 'bnb' object.",
                                        "<Editor>": {
                                            "function": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnb(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0], [0, 1, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnb(board, colors=['blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "4": {
                "bwns": [
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'yellow', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'blue', 'yellow'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'green', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow', 'green'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'yellow', 'red'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow', 'red'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'yellow', 'red'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green', 'red'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'red', 'green'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'green', 'red'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['green', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'blue', 'green'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bwns(board, colors=['blue', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'yellow', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'yellow', 'red'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'yellow'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'green'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'blue'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'blue', 'green'] for the 'bwns' object.",
                                        "<Editor>": {
                                            "function": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'nut', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwns(board, colors=['blue', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbs": [
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['blue', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['blue', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'red', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['blue', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['blue', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'yellow', 'blue'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'red', 'blue'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'red', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'red', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'red', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbs(board, colors=['green', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue', 'red'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'red', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red', 'blue'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'yellow', 'red'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'green', 'red'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'red', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'green', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'yellow'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'blue'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['yellow', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'red'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'green'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbs",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green', 'blue'] for the 'wnbs' object.",
                                        "<Editor>": {
                                            "function": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbs(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbs(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbn": [
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['blue', 'blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['blue', 'blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'green', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['blue', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['blue', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue', 'green'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'green', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'red', 'green'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'yellow', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'green', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'red', 'green'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbn(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'blue', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'blue', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'blue', 'green'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'green', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'blue', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'red', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbn(board, colors=['yellow', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'red', 'yellow'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'blue'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbn",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'green'] for the 'wwbn' object.",
                                        "<Editor>": {
                                            "function": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wwbn(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbn(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbw": [
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue', 'green'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'blue', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['green', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue', 'green'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red', 'green'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green', 'blue'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'blue', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'green', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'green', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'blue'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'green'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['green', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'red'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'green'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbw",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'yellow'] for the 'nnbw' object.",
                                        "<Editor>": {
                                            "function": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbw(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbw(board, colors=['red', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbs": [
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'yellow', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'red', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'red', 'blue'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'red', 'yellow'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['green', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['blue', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['blue', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'red', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['blue', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['blue', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbs(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'red', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'red', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'yellow', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'green', 'blue'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['red', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'blue', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['yellow', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'yellow', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbs(board, colors=['green', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'green'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'yellow'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['red', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbs",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'wwbs' object.",
                                        "<Editor>": {
                                            "function": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wwbs(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbs": [
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'green', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'yellow', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'red', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'green', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['red', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'yellow', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbs(board, colors=['blue', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'green', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'red', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['green', 'blue', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'red'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'blue', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'yellow', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'blue', 'red'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'red'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbs(board, colors=['blue', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'blue'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'green'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbs",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'nwbs' object.",
                                        "<Editor>": {
                                            "function": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbs(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbn": [
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'red', 'yellow'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue', 'yellow'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'blue', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'blue', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'blue', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbn(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'blue', 'yellow'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'green', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'red', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'green', 'yellow'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'yellow', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['green', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'blue', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbn(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'yellow'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'green'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'red'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['green', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbn",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'blue'] for the 'nwbn' object.",
                                        "<Editor>": {
                                            "function": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbn(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnws": [
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red', 'green'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'green', 'red'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green', 'red'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['blue', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'yellow', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'green', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'yellow', 'green'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['yellow', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'green', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        bnws(board, colors=['green', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'blue', 'green'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'green', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['green', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'green', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'blue', 'red'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['blue', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'yellow', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'red'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'red', 'green'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['red', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'red'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'blue', 'green'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'yellow', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'yellow'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'blue'] for the 'bnws' object.",
                                        "<Editor>": {
                                            "function": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bnws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'washer', 'screw']\n    for shape, color in zip(shapes, colors):\n            put(board, shape, color, x, y)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnws(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbw": [
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'green', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['yellow', 'red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['yellow', 'red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['yellow', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['yellow', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'yellow', 'blue'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'blue', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'yellow', 'blue'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'blue', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'blue', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['red', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'blue', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['yellow', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbw(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'blue'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'red'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'green'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['green', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'blue'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbw",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'yellow'] for the 'nwbw' object.",
                                        "<Editor>": {
                                            "function": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbw(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbw(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbw": [
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'yellow', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'red', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'blue', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['green', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'yellow', 'green'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['blue', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'green', 'blue', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbw(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'green', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'blue', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['yellow', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'green'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbw",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'red', 'yellow'] for the 'wnbw' object.",
                                        "<Editor>": {
                                            "function": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnbw(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbw(board, colors=['green', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wnbn": [
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'blue', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'red', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'green', 'yellow'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'green', 'yellow'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['red', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue', 'red'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green', 'yellow'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'blue', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbn(board, colors=['green', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue', 'red'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'green', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'green', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['yellow', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'red', 'yellow'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['green', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['red', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'red'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'blue'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'green'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['blue', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbn",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'red'] for the 'wnbn' object.",
                                        "<Editor>": {
                                            "function": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wnbn(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbn(board, colors=['yellow', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbs": [
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'yellow', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['red', 'red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'red', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'yellow', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbs(board, colors=['green', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['blue', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'red', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'blue', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red', 'blue'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['yellow', 'blue', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbs(board, colors=['red', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'green'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'blue'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'red'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'yellow'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['green', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbs",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'nnbs' object.",
                                        "<Editor>": {
                                            "function": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nnbs(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbw": [
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'yellow'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'red', 'blue'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'blue'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'green'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['yellow', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'yellow'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green', 'blue'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['red', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbw",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'yellow'] for the 'nbbw' object.",
                                        "<Editor>": {
                                            "function": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbw(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbw": [
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'red'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow', 'blue'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'red'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'red'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['red', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'blue'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['green', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbw",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'green'] for the 'wbbw' object.",
                                        "<Editor>": {
                                            "function": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wbbw(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbw(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbs": [
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'green'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'yellow'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'yellow'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'green'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'red'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'yellow'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbs",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'bnbs' object.",
                                        "<Editor>": {
                                            "function": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbs(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbs(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbb": [
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'green'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'blue'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'blue', 'green', 'green'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'blue', 'green', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'green'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'blue', 'green', 'green'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'blue', 'green', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'green', 'green'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'green', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green', 'green'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'green', 'green'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'green', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'blue', 'green', 'green'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'blue', 'green', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'green'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'blue', 'green', 'green'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['yellow', 'blue', 'green', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'yellow', 'red', 'red'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'yellow', 'red', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'red'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'yellow', 'red', 'red'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'yellow', 'red', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-h",
                            "bridge-v"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'green'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'bridge-v']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbb",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "bridge-h"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbb' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'bbbb' object.",
                                        "<Editor>": {
                                            "function": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbb(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'bridge-h']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbb(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbs": [
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'blue'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'green'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'blue'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'red'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'red'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbs",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'red'] for the 'nbbs' object.",
                                        "<Editor>": {
                                            "function": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nbbs(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbs(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbw": [
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'green'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'green'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'green'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'green'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'red'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['green', 'red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'bnbw' object.",
                                        "<Editor>": {
                                            "function": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbw(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbn": [
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'yellow'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['yellow', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow', 'blue'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'green'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'blue'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'yellow'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['blue', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'green'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'green'] for the 'bnbn' object.",
                                        "<Editor>": {
                                            "function": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbn(board, colors=['green', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbs": [
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'red'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'red'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'green', 'blue'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'green'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['green', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'blue'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['yellow', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'red'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbs",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'red'] for the 'wbbs' object.",
                                        "<Editor>": {
                                            "function": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wbbs(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbn": [
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'yellow'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'green'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['green', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'green'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'red'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'red'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['yellow', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'blue'] for the 'bwbn' object.",
                                        "<Editor>": {
                                            "function": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbn(board, colors=['blue', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbn": [
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'red', 'blue'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'yellow'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['yellow', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'blue'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['red', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'blue'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'red'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'red', 'blue'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['green', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'blue'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'green'] for the 'bbbn' object.",
                                        "<Editor>": {
                                            "function": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bbbn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbn(board, colors=['blue', 'green', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbw": [
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'blue'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'yellow'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'blue'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'green'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'green'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['green', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'red'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbw",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'yellow'] for the 'bbbw' object.",
                                        "<Editor>": {
                                            "function": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbw(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbs": [
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'green'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'green'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['yellow', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'yellow'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'green'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'red'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['green', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbs",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'green'] for the 'bwbs' object.",
                                        "<Editor>": {
                                            "function": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwbs(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbs(board, colors=['red', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbw": [
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'red'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'green'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['blue', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'yellow'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'blue'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'yellow'] for the 'bwbw' object.",
                                        "<Editor>": {
                                            "function": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbw(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbn": [
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'yellow'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'red'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['yellow', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'red'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'red'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'red', 'yellow'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['green', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'green'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'green'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbn",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'blue', 'yellow'] for the 'wbbn' object.",
                                        "<Editor>": {
                                            "function": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbn(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbn(board, colors=['red', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbn": [
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'yellow'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'blue'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['red', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'yellow'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'blue'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'green'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['green', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'red'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['yellow', 'yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbn",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'nbbn' object.",
                                        "<Editor>": {
                                            "function": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nbbn(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbn(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbs": [
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'red'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'red'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 1, 1], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'blue'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['green', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'yellow'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 1], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['yellow', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'red'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['red', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'yellow'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0], [0, 1, 0, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbs",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbs' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'blue'] for the 'bbbs' object.",
                                        "<Editor>": {
                                            "function": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbs(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0], [0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbs(board, colors=['blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            },
            "5": {
                "wnbns": [
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'yellow', 'green'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'green', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'green', 'red', 'green'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'red', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'blue', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['blue', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'red', 'green'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'yellow', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'blue', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'blue', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'blue', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'blue', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['red', 'blue', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'red', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'red', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'yellow', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'red', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wnbns(board, colors=['yellow', 'red', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'red', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'red', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'green', 'red', 'green'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'red', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'red', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'blue', 'red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'blue', 'red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'blue', 'red', 'yellow', 'green'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'blue', 'red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'blue', 'red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'red', 'blue', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'red', 'blue', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green', 'red', 'green'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'red', 'yellow', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['blue', 'yellow', 'red', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'blue', 'yellow', 'blue'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'yellow', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'blue', 'green', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'blue', 'green', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'green', 'red', 'green'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'blue', 'green', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wnbns(board, colors=['red', 'blue', 'green', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'green', 'red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'green', 'red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'red', 'green', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'green', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'green', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'red', 'green', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'red', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'red', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'red', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'yellow', 'blue'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'red', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'red', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'red', 'green', 'blue', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'green', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'green', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'yellow', 'blue', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'green', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'green', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'red', 'blue', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['blue', 'blue', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'blue', 'red', 'yellow'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['green', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wnbns",
                        "shapes": [
                            "washer",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'red', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'red', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wnbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'red', 'yellow', 'blue', 'red'] for the 'wnbns' object.",
                                        "<Editor>": {
                                            "function": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'red', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wnbns(board, colors, x, y):\n    shapes = ['washer', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wnbns(board, colors=['red', 'red', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbws": [
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'red', 'green'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'yellow', 'red'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'blue', 'red'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'yellow', 'green'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'yellow', 'blue'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'green', 'red'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'green', 'yellow'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbws",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'green', 'yellow'] for the 'bbbws' object.",
                                        "<Editor>": {
                                            "function": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbws(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbws(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nwbws": [
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'red', 'green'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'red', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'red', 'blue'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'green', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'green', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'blue', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'green', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'green', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'blue', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'red', 'blue'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'red', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nwbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'yellow', 'blue', 'green'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'yellow', 'green', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['red', 'red', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'blue', 'yellow', 'green'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'red', 'blue', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'green', 'red', 'green', 'blue'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['blue', 'green', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'green', 'red', 'blue', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'red', 'blue', 'green'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'red', 'yellow', 'blue', 'green'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'yellow', 'blue', 'red', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'red', 'green', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'yellow', 'red', 'blue'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'yellow', 'blue', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'blue', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'green', 'red', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'green', 'red', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'green', 'red', 'blue', 'yellow'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'green', 'red', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'green', 'red', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'red', 'blue', 'yellow', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['green', 'red', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'green', 'red', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'green', 'red', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red', 'yellow', 'green'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'green', 'red', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['blue', 'green', 'red', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nwbws",
                        "shapes": [
                            "nut",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['red', 'green', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['red', 'green', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nwbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue', 'green', 'red'] for the 'nwbws' object.",
                                        "<Editor>": {
                                            "function": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['red', 'green', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def nwbws(board, colors, x, y):\n    shapes = ['nut', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nwbws(board, colors=['red', 'green', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbns": [
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'green', 'blue'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'red', 'blue'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'red', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'blue', 'green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'blue', 'green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'red', 'blue'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'blue', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['red', 'blue', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'blue', 'red'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'blue', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'blue', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'blue', 'green'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'blue', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'blue', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow', 'red'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow', 'red'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbns",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'red', 'yellow'] for the 'bbbns' object.",
                                        "<Editor>": {
                                            "function": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbns(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbns(board, colors=['blue', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbwn": [
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'red', 'yellow'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'red', 'blue'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'green', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'green', 'blue'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'yellow', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'green', 'yellow'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['blue', 'blue', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['blue', 'blue', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'yellow', 'red'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['blue', 'blue', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['blue', 'blue', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'yellow', 'red'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['red', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['red', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'red', 'yellow'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['red', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['red', 'green', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbwn",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'red', 'blue'] for the 'bwbwn' object.",
                                        "<Editor>": {
                                            "function": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbwn(board, colors=['green', 'blue', 'yellow', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nbbws": [
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'green', 'yellow'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'yellow', 'green'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'blue', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'blue', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'blue', 'green'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'blue', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'blue', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'yellow', 'green'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'green', 'red'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'green', 'blue'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'red', 'green', 'yellow'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-h', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['green', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nbbws",
                        "shapes": [
                            "nut",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nbbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'red', 'yellow'] for the 'nbbws' object.",
                                        "<Editor>": {
                                            "function": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nbbws(board, colors, x, y):\n    shapes = ['nut', 'bridge-v', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nbbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbwn": [
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'red', 'yellow'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'red', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'red', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'red', 'blue'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'red', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'red', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'red', 'green'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'blue', 'yellow'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['yellow', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'red', 'yellow'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'yellow', 'red'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'green', 'red'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['red', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbwn",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'blue', 'green', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'blue', 'green', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'red', 'blue'] for the 'bnbwn' object.",
                                        "<Editor>": {
                                            "function": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'blue', 'green', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbwn(board, colors=['blue', 'blue', 'green', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbwn": [
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'red', 'yellow'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'yellow', 'green'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'yellow', 'green'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'blue', 'red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'blue', 'red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'blue', 'red'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'blue', 'red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'blue', 'red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'blue', 'yellow'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'yellow', 'blue'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'yellow', 'red'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'red', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbwn",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "washer",
                            "nut"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbwn' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'green', 'yellow'] for the 'bbbwn' object.",
                                        "<Editor>": {
                                            "function": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbwn(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'washer', 'nut']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbwn(board, colors=['yellow', 'yellow', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbws": [
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'blue', 'yellow'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'yellow', 'blue'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'green', 'red'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'blue', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'red', 'green'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'green', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'green', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'green', 'blue'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'green', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'green', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'yellow', 'red', 'yellow'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['blue', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'blue', 'green'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['green', 'red', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbws",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'red', 'green', 'yellow'] for the 'bwbws' object.",
                                        "<Editor>": {
                                            "function": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbws(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbws(board, colors=['yellow', 'blue', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "nnbws": [
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'green', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'green', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'green', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'green', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'green', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'red', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['green', 'green', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'red', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'blue', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'blue', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'blue', 'green', 'yellow', 'red'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'blue', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['yellow', 'blue', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'red', 'green'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['blue', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'yellow', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'yellow', 'green'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'yellow', 'blue', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'yellow', 'blue', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'yellow', 'blue', 'yellow', 'red'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'yellow', 'blue', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['green', 'yellow', 'blue', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'blue', 'green', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'blue', 'green', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'green', 'red', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'blue', 'green', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'blue', 'green', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'yellow', 'red', 'yellow', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'yellow', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'yellow', 'blue', 'red', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'blue', 'red', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'red', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'red', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'green', 'yellow', 'red'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'red', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['red', 'red', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'red', 'green', 'blue', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['yellow', 'red', 'green', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "yellow",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['blue', 'red', 'yellow', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['blue', 'red', 'yellow', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'red', 'yellow', 'blue', 'red'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['blue', 'red', 'yellow', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        nnbws(board, colors=['blue', 'red', 'yellow', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow', 'green', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'yellow', 'red', 'blue', 'green'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'yellow', 'red', 'blue', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'red', 'blue', 'green'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'yellow', 'red', 'blue', 'green'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'yellow', 'red', 'blue', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'yellow', 'blue', 'red', 'green'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'yellow', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'red', 'blue', 'red'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow', 'red', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'red', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'red', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'yellow', 'green', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'green', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'blue', 'yellow', 'blue', 'yellow'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "nnbws",
                        "shapes": [
                            "nut",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['yellow', 'blue', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['yellow', 'blue', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'nnbws' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'blue', 'red', 'yellow', 'blue'] for the 'nnbws' object.",
                                        "<Editor>": {
                                            "function": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['yellow', 'blue', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def nnbws(board, colors, x, y):\n    shapes = ['nut', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        nnbws(board, colors=['yellow', 'blue', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbnw": [
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'yellow', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'yellow', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'green', 'red'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'yellow', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'yellow', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'blue', 'yellow'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "red",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'blue', 'red', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'blue', 'red', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'red', 'yellow', 'green'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'blue', 'red', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'blue', 'red', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'red', 'blue', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'red', 'blue', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'green', 'blue'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'red', 'blue', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['red', 'red', 'blue', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'blue', 'red'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'red', 'blue', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'yellow', 'green'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['yellow', 'green', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'yellow', 'green', 'yellow'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['green', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbnw",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'red', 'green', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'red', 'green', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'yellow', 'red'] for the 'bwbnw' object.",
                                        "<Editor>": {
                                            "function": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'red', 'green', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbnw(board, colors=['blue', 'red', 'green', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bbbnw": [
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-v",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'green', 'yellow'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-v', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'green', 'yellow'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'green', 'blue'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['yellow', 'green', 'red', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['yellow', 'green', 'red', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow', 'blue'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['yellow', 'green', 'red', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['yellow', 'green', 'red', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green', 'red', 'green'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'yellow', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-h",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                1,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'red', 'green'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-h', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'red', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-v",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'yellow', 'blue'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'green', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'bridge-h', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'green', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bbbnw",
                        "shapes": [
                            "bridge-h",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ],
                            [
                                2,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bbbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'red', 'green'] for the 'bbbnw' object.",
                                        "<Editor>": {
                                            "function": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bbbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'bridge-v', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bbbnw(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wbbns": [
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'red', 'green'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'red', 'yellow'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'blue', 'green'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'blue', 'green'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'blue', 'green'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['yellow', 'green', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 3,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ],
                            [
                                2,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'yellow', 'red', 'yellow'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'red', 'yellow', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-v",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'blue', 'red', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'blue', 'red', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'green', 'yellow'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'blue', 'red', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-v', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['green', 'blue', 'red', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wbbns",
                        "shapes": [
                            "washer",
                            "bridge-h",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 3,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                0,
                                2
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wbbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'red', 'green'] for the 'wbbns' object.",
                                        "<Editor>": {
                                            "function": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wbbns(board, colors, x, y):\n    shapes = ['washer', 'bridge-h', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wbbns(board, colors=['red', 'green', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bwbns": [
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'green', 'red', 'green'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'blue', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'green', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'green', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'blue', 'green'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'green', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'green', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-v",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'blue', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'blue', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'blue', 'green'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'blue', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-v', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['red', 'blue', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'green', 'blue', 'green'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "red",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'red', 'blue', 'green'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'yellow', 'red', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'yellow', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'yellow', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'yellow', 'red', 'green', 'blue'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'yellow', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['blue', 'yellow', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'blue', 'red', 'yellow', 'red'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['green', 'blue', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bwbns",
                        "shapes": [
                            "bridge-h",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'red', 'yellow'] for the 'bwbns' object.",
                                        "<Editor>": {
                                            "function": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bwbns(board, colors, x, y):\n    shapes = ['bridge-h', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bwbns(board, colors=['yellow', 'red', 'blue', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbnw": [
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'blue', 'yellow', 'green', 'yellow'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'blue', 'yellow', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'green', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'green', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'green', 'yellow', 'green', 'blue'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'green', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'green', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green', 'blue', 'yellow'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'yellow', 'blue'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'red', 'blue', 'yellow', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "blue",
                            "red",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'blue', 'red', 'blue'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'blue', 'red', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'blue', 'red', 'blue'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'blue', 'red', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'yellow', 'blue', 'red', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'green', 'red'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['blue', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'green', 'red', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'green', 'red', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'red', 'green', 'blue'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'green', 'red', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['green', 'green', 'red', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbnw",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "washer"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbnw' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'red', 'green'] for the 'bnbnw' object.",
                                        "<Editor>": {
                                            "function": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def bnbnw(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'washer']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbnw(board, colors=['red', 'red', 'blue', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbws": [
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'green', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'green', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'green', 'yellow', 'green'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'green', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'red', 'green', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "red",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'red', 'blue', 'yellow'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'yellow', 'red', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "yellow",
                            "green",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'yellow', 'green', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'yellow', 'green', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'yellow', 'green', 'blue', 'green'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'yellow', 'green', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'yellow', 'green', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'red', 'blue', 'yellow', 'green'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'yellow', 'green', 'red'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'green', 'yellow', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['green', 'green', 'yellow', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'green', 'blue', 'yellow'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'blue', 'yellow'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['red', 'blue', 'yellow', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbws",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "washer",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbws' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'red', 'yellow', 'red'] for the 'bnbws' object.",
                                        "<Editor>": {
                                            "function": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbws(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'washer', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbws(board, colors=['yellow', 'green', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "bnbns": [
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red', 'yellow'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'red', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'red', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'red', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'red', 'yellow', 'red'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'red', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'red', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'yellow', 'green'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'red', 'green', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow', 'green'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'blue', 'yellow', 'red'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "yellow",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'yellow', 'green', 'blue'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'yellow', 'green', 'blue'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'green', 'yellow', 'green', 'blue'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'yellow', 'green', 'blue'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['blue', 'green', 'yellow', 'green', 'blue'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-v",
                            "nut",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'blue', 'yellow', 'green'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-v', 'nut', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "bnbns",
                        "shapes": [
                            "bridge-h",
                            "nut",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'red', 'green', 'red'], x=row, y=col)",
                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'red', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ],
                            [
                                1,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'bnbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'green', 'red', 'green', 'red'] for the 'bnbns' object.",
                                        "<Editor>": {
                                            "function": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'red', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def bnbns(board, colors, x, y):\n    shapes = ['bridge-h', 'nut', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 1, 1, 1, 1]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        bnbns(board, colors=['green', 'green', 'red', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ],
                "wwbns": [
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "blue",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'blue', 'yellow', 'red'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'blue', 'yellow', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'blue', 'yellow', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'blue', 'yellow', 'red'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'blue', 'yellow', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "yellow",
                            "green",
                            "blue",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'yellow', 'green', 'blue', 'yellow'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'yellow', 'green', 'blue', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'blue', 'yellow', 'red', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'yellow', 'blue', 'green', 'yellow'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'yellow'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "blue",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'blue', 'green'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'blue', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['red', 'red', 'yellow', 'blue', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'blue', 'green'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'blue', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['blue', 'red', 'green', 'red', 'green'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['blue', 'red', 'green', 'red', 'green'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['blue', 'red', 'green', 'red', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['blue', 'red', 'green', 'red', 'green'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['blue', 'red', 'green', 'red', 'green'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "red",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'red', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'red', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['green', 'red', 'blue', 'green', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'red', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['green', 'red', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed16.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template16.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, and fifth columns of the first row. Then, repeat this placement pattern in the fifth row.  Use only these colors: ['yellow', 'green', 'blue', 'green', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 4]:\n    for col in [0, 4]:\n        wwbns(board, colors=['yellow', 'green', 'blue', 'green', 'red'], x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['blue', 'yellow', 'green', 'yellow', 'blue'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "blue",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'blue', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'blue', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'blue', 'green', 'yellow'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'blue', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'blue', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "blue",
                            "yellow",
                            "green",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'blue', 'yellow', 'green', 'yellow'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'green', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'blue', 'yellow', 'green', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "blue",
                            "green",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'blue', 'green', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'blue', 'green', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['yellow', 'blue', 'green', 'yellow', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'blue', 'green', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['yellow', 'blue', 'green', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "blue",
                            "yellow",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'blue', 'yellow', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'blue', 'yellow', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "red",
                            "yellow",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['red', 'red', 'yellow', 'red', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['red', 'red', 'yellow', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "red",
                            "blue",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'blue', 'red', 'blue', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'blue', 'red', 'blue', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-h",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "green",
                            "red",
                            "green",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'red', 'green', 'blue'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'red', 'green', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed12.j2",
                        "occupied_rows": 1,
                        "occupied_cols": 2,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                0,
                                1
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template12.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh columns of the first row. Then, repeat this pattern of placement in the remaining rows. Use only these colors: ['green', 'green', 'red', 'green', 'blue'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'red', 'green', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-h', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 0, 0, 0, 0], [0, 1, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in range(8):\n    for col in [0, 3, 6]:\n        wwbns(board, colors=['green', 'green', 'red', 'green', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "red",
                            "green",
                            "blue",
                            "red",
                            "green"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['red', 'green', 'blue', 'red', 'green'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['red', 'green', 'blue', 'red', 'green'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['red', 'green', 'blue', 'red', 'green'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['red', 'green', 'blue', 'red', 'green'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['red', 'green', 'blue', 'red', 'green'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "green",
                            "red",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'green', 'red', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'green', 'red', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'green', 'red', 'yellow', 'blue'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'green', 'red', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'green', 'red', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "yellow",
                            "green",
                            "blue",
                            "yellow",
                            "blue"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['yellow', 'green', 'blue', 'yellow', 'blue'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['yellow', 'green', 'blue', 'yellow', 'blue'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "blue",
                            "yellow",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'blue', 'yellow', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'blue', 'yellow', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'blue', 'yellow', 'green', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'blue', 'yellow', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'blue', 'yellow', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "red",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'red', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'red', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'red', 'green', 'yellow', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'red', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'red', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "yellow",
                            "green",
                            "yellow",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'yellow', 'green', 'yellow', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'yellow', 'green', 'yellow', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "green",
                            "yellow",
                            "blue",
                            "green",
                            "red"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'red'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'red'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['green', 'yellow', 'blue', 'green', 'red'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'red'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['green', 'yellow', 'blue', 'green', 'red'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "combo_name": "wwbns",
                        "shapes": [
                            "washer",
                            "washer",
                            "bridge-v",
                            "nut",
                            "screw"
                        ],
                        "colors": [
                            "blue",
                            "blue",
                            "yellow",
                            "red",
                            "yellow"
                        ],
                        "code": {
                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                        },
                        "quadrant": "tl",
                        "seed_template": "templates/code/regular/regular_seed13.j2",
                        "occupied_rows": 2,
                        "occupied_cols": 1,
                        "relative_positions": [
                            [
                                0,
                                0
                            ],
                            [
                                1,
                                0
                            ]
                        ],
                        "dialogues": {
                            "regular": {
                                "template": "templates/instructions/regular/regular_template13.j2",
                                "instructions": [
                                    {
                                        "<Programmer>": "Place a 'wwbns' object in the first, fourth, and seventh rows of the first column. Then, repeat this placement pattern in the remaining columns.  Use only these colors: ['blue', 'blue', 'yellow', 'red', 'yellow'] for the 'wwbns' object.",
                                        "<Editor>": {
                                            "function": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)",
                                            "output": "for row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)",
                                            "total_code": "def wwbns(board, colors, x, y):\n    shapes = ['washer', 'washer', 'bridge-v', 'nut', 'screw']\n    for shape, color, dx, dy in zip(shapes, colors, [0, 1, 0, 0, 0], [0, 0, 0, 0, 0]):\n            put(board, shape, color, x + dx, y + dy)\nboard = init_board(8, 8)\nfor row in [0, 3, 6]:\n    for col in range(8):\n        wwbns(board, colors=['blue', 'blue', 'yellow', 'red', 'yellow'],x=row, y=col)"
                                        }
                                    }
                                ]
                            }
                        }
                    }
                ]
            }
        }
    }
}